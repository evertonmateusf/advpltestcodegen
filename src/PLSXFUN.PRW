#INCLUDE "PLSXFUN.CH"
#INCLUDE "PLSMGER.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "SET.CH"
#INCLUDE "AP5MAIL.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "TOPCONN.CH"
#INCLUDE "PPLMFUN.CH"
#INCLUDE "TCBROWSE.CH"

#DEFINE G_CONSULTA  "01"
#DEFINE G_SADT_ODON "02"
#DEFINE G_SOL_INTER "03"
#DEFINE G_REEMBOLSO "04"
#DEFINE G_RES_INTER "05"
#DEFINE G_HONORARIO "06"
#DEFINE G_ANEX_QUIM "07"
#DEFINE G_ANEX_RADI "08"
#DEFINE G_ANEX_OPME "09"
#DEFINE G_REC_GLOSA "10"
#DEFINE G_PROR_INTE "11"

#DEFINE __ACDCRI186 {"09L",OEMTOANSI(STR0072) }//"PROCEDIMENTO EXISTENTE NO PACOTE. ( PARTICIPAÇÕES )."
#DEFINE __ACDCRI178 {"09E",OEMTOANSI(STR0073) }//"BLOQUEIO DE PAGAMENTO OU EXCLUSAO DA COMPOSICAO AO NEGAR SUB-ITEM."
#DEFINE __ACDCRI179 {"09F",OEMTOANSI(STR0074) }//"BLOQUEIO DE PAGAMENTO, COMPOSICAO NAO AUTORIZADA NO ATENDIMENTO."
#DEFINE __ACDCRI09Z {"09Z","GUIA JURIDICA - ESTA GUIA NÃO SERÁ SUBMETIDA AOS CRITÉRIOS DE VALIDAÇÃO DO SISTEMA!"}

STATIC __LGLOAUTO	  := .F.
STATIC __ACRITGLOSAS  := {}
STATIC __CLASTDESC    := ""
STATIC __AMATCOM	  := {}
STATIC __COPEUSR      := {}
STATIC __AGUIJUR	  := {.F.,.F.} // GUIA JURIDICA: AUTORIZADO A PROSSEGUIR ? ## DEVE MANDAR PRA AUDITORIA ?

STATIC __MV_PLGEPAD	  := GETNEWPAR("MV_PLGEPAD","")
STATIC __TAMBCF_CHAVE := TAMSX3("BCF_CHAVE")[1]
STATIC __CCARGAPUB	  := PLSINICIA()
STATIC __LBCT_GLOATO  := BCT->( FIELDPOS("BCT_GLOATO")) > 0

STATIC __PLSA498GUI	  := .F.
STATIC __CFILBCF	  := XFILIAL('BCF')
STATIC __CFILBCT	  := XFILIAL('BCT')

/*/{PROTHEUS.DOC} PLSRETTIT
RETORNA UM TITULO DE ACORDO COM UM ALIAS.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLSRETTIT(CALIAS)
LOCAL CRET    := ""
LOCAL CFILSX2 := NIL
LOCAL _CFILX2 := SX2->(DBFILTER())

SX2->(DBCLEARFILTER())
SX2->(DBSETORDER(1))
IF SX2->(MSSEEK(CALIAS))
	CRET := ALLTRIM(SX2->(X2NOME()))
ENDIF	


SET FILTER TO &_CFILX2

	
RETURN CRET

/*/{PROTHEUS.DOC} PLSGRAVERR
GRAVA ERROS EM UM FORMATO PADRAO PARA USO EXTERNO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.01
@VERSION 1.0
/*/
FUNCTION PLSGRAVERR(CTIPO,UVALOR,AMSGERRO)
	
IF CTIPO == "T" // TEXTO SIMPLES
	AADD(AMSGERRO,{"T",UVALOR})
ELSEIF CTIPO == "H" // HELP PADRAO (FUNCAO HELP)
	AADD(AMSGERRO,{"H",UVALOR})
ENDIF
	
RETURN(AMSGERRO)

/*/{PROTHEUS.DOC} PLSINTVLD
RETORNA SE A OPERADORA   E VALIDA PARA O OPERADOR...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.01
@VERSION 1.0
/*/
FUNCTION PLSINTVLD(CCODINT,CCODOPE)
LOCAL LRET      := .T.
DEFAULT CCODINT := &(READVAR())
DEFAULT CCODOPE := RETCODUSR()

IF ! CCODINT $ PLSINTAUT()
	HELP("",1,"PLSINTVLD")
	LRET := .F.
ENDIF
	
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSVLDINT
VALIDA O CONTEUDO DA UMA OPERADORA  ...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSVLDINT(CCODINT,LPLSSERVER)
LOCAL LRET     		:= .T.
LOCAL LFORCOU 		:= .F.

DEFAULT LPLSSERVER 	:= PLSSERVER()
DEFAULT CCODINT    	:= PLSINTPAD()

// ESTOU SEMPRE RETORNANDO .T. TALVEZ NAO SEJA NECESSARIO FAZER A CONSISTENCIA
// NO USUARIO PROTHEUS X OPERADORA....
IF EMPTY(__COPEUSR)
	__COPEUSR := PLSINTAUT()
ENDIF

LRET := ( CCODINT $ __COPEUSR )

//ALGUNS CAMPOS NAO FAZ SENTIDO FAZER COM QUE O USUARIO CADASTRE O OPERADOR DO SISTEMA COM BASE NA OPERADORA
//POR EXEMPLO.: CAMPO OPERADORA NA ROTINA DEBITO/CREDITO -> NESTA ROTINA O CAMPO OPERADORA SERVE PARA IDENTIFICARA OPERADORA PARA O QUAL SERA FEITO O DEBITO/CREDITO

IF READVAR() $ "M->BSQ_CODINT" .OR. GETNEWPAR("MV_PLSUNI","0") == "1"
	LRET 	:= .T.
	LFORCOU := .T.
ENDIF

IF !LFORCOU
	
	IF ! LRET
		
		IF ! LPLSSERVER
			HELP("",1,"PLSINTVLD")
		ENDIF
		
	ENDIF
	
	IF LRET
		__COPEPAD := CCODINT
	ELSE
		LRET := EMPTY(__COPEUSR)
	ENDIF
	
ELSE
	__COPEPAD := PLSINTPAD()
ENDIF
	
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSNAODISP
RETORNA UMA MENSAGEM INFORMANDO ROTINA NAO DISPONIVEL
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSNAODISP(CFUNCAO)
	
	MSGINFO(OEMTOANSI(STR0003)+CHR(13)+CHR(13)+OEMTOANSI(STR0004)+CFUNCAO) //"FUNCAO AINDA NAO DISPONIBILIZADA PELO DEPARTAMENTO DE SISTEMAS"###"CODIGO DA FUNCAO "
	
RETURN

/*/{PROTHEUS.DOC} PLSISAUTO
RETORNA SE ESTA EM MODO AUTOMATICO OU NAO...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSISAUTO()
RETURN(IF(__CINTERNET=="AUTOMATICO",.T.,.F.))

/*/{PROTHEUS.DOC} PLSOBRIGAT
MESMA COISA DO OBRIGATORIO MAIS O PARAMETRO LHELP
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSOBRIGAT(AGETS,ATELA,TOBG,LPLSSERVER,AMSGERRO)
	LOCAL I,N,BCAMPO,X,Y, CTEXT := "", CBYTE
	#IFDEF ENGLISH
		LOCAL APOS := {"FIRST","SECOND","THIRD","FOURTH","FIFTH","SIXTH","SEVENTH","EIGTH","NINETH","LAST"}
		LOCAL CFOLD := "FOLDER"
	#ELSE
		#IFDEF SPANISH
			LOCAL APOS := {"PRIMERA","SEGUNDA","TERCERA","QUARTA","QUINTA","SEXTA","SEPTIMA","OCTAVA","NOVENA","ULTIMA"}
			LOCAL CFOLD := "CARPETA"
		#ELSE
			LOCAL APOS := {"PRIMEIRA","SEGUNDA","TERCEIRA","QUARTA","QUINTA","SEXTA","SETIMA","OITAVA","NONA","ULTIMA"}
			LOCAL CFOLD := "PASTA"
		#ENDIF
	#ENDIF
	DEFAULT LPLSSERVER := PLSSERVER()
	BCAMPO := {|NCPO| FIELD(NCPO) }
	TOBG:=""
	FOR I:=1 TO LEN(AGETS)
		IF SUBSTR(AGETS[I],22,1) == "T" .AND. EMPTY(M->&(SUBSTR(AGETS[I],9,10)))
			ACHAATELA(@X,@Y,I,ATELA)
			IF X*Y > 0
				TOBG:=TOBG+ATELA[X][Y]
				IF EMPTY(CTEXT)
					CBYTE := SUBS(AGETS[I],24,1)
					IF CBYTE == " "
						CTEXT := SUBS(ATELA[X,Y],1,18)
					ELSEIF CBYTE$"123456789"
						CTEXT := SUBS(ATELA[X,Y],1,18)+" -> "+APOS[VAL(CBYTE)]+" "+CFOLD
					ELSE
						CTEXT := SUBS(ATELA[X,Y],1,18)+" -> "+APOS[10]+" "+CFOLD
					ENDIF
				ENDIF
			ELSE
				TOBG := "VV"
			ENDIF
		ENDIF
		
	NEXT I
	
	CTEXT := CTEXT + SPACE(50-LEN(CTEXT))
	
	IF LEN(TOBG) > 0
		IF ! LPLSSERVER
			HELP(1," ","OBRIGAT",,CTEXT,3,0)
		ENDIF
		PLSGRAVERR("H","OBRIGAT",@AMSGERRO)
		RETURN(IF(!LPLSSERVER,.F.,{.F.,AMSGERRO}))
	ENDIF
RETURN(.T.)

/*/{PROTHEUS.DOC} PLSINTAUT
LISTA AS OPERADORAS   AUTORIZADAS PARA UM OPERADOR...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSINTAUT(CCODOPE)
	LOCAL CRET      := ""
	DEFAULT CCODOPE := PLSRTCDUSR()
	
	BX4->(DBSETORDER(1))
	IF BX4->(MSSEEK(XFILIAL("BX4")+CCODOPE))
		WHILE ! BX4->(EOF()) .AND. BX4->(BX4_FILIAL+BX4_CODOPE) == XFILIAL("BX4")+CCODOPE
			CRET += BX4->BX4_CODINT+","
			BX4->(DBSKIP())
		ENDDO
	ENDIF
	
RETURN(CRET)

/*/{PROTHEUS.DOC} PLSINTPAD
RETORNA A OPERADORA   PADRAO PARA UM OPERADOR...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSINTPAD()

IF EMPTY(__MV_PLGEPAD)

	IF EMPTY(__COPEPAD)
		
		AVISO( 	OEMTOANSI(STR0005), ; //"PARAMETRIZACAO OPERADORA"
				OEMTOANSI(STR0006)+ALLTRIM(PLRETOPE())+OEMTOANSI(STR0007),; //"O USUARIO '"###"' ESTA SEM PARAMETRIZACAO PARA UMA OU MAIS OPERADORAS. ISSO DEVE SER FEITO ANTES DE UTILIZAR ESTA E OUTRAS OPCOES DO SISTEMA"
				{ OEMTOANSI(STR0008) }, 2 ) 	                                                                     //"OK"
		
	ENDIF
	
ELSE
	
	__COPEPAD := __MV_PLGEPAD
	
ENDIF

RETURN(__COPEPAD)

/*/{PROTHEUS.DOC} PLSRTMASPR
RETORNA PROCEDIMENTO COM SUA MASCARA PADRAO...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSRTMASPR(CCODPAD,CCODPSA)
	LOCAL   CMASCARA   := "@R "
	
	BA8->(DBSETORDER(3))
	IF BA8->(MSSEEK(XFILIAL("BA8")+CCODPAD+CCODPSA))
		
		BF8->(DBSETORDER(1))
		IF BF8->(MSSEEK(XFILIAL("BF8")+BA8->BA8_CODTAB))
			
			WHILE ! BF8->(EOF()) .AND. BF8->(BF8_FILIAL+BF8_CODINT+BF8_CODIGO) == XFILIAL("BF8")+BA8->BA8_CODTAB
				CMASCARA += REPLICATE("!",VAL(BF8->BF8_DIGITO))+BF8->BF8_SEPARA
				BF8->(DBSKIP())
			ENDDO
		ENDIF
	ENDIF
	
RETURN(TRANSFORM(CCODPSA,CMASCARA))

/*/{PROTHEUS.DOC} PLSSINC
FUNCAO PARA REPLICAO DE CAMPOS DE UMA TABELA PARA OUTRA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 02.10.2001
@PARAM CPROG  ,   CARACTER, CODIGO DO PROGRAMA PARA REFERENCIA NA SINCRONIZACAO
@PARAM CALIAS1,   CARACTER, ALIAS DE ORIGEM DOS CAMPOS
@PARAM CALIAS2,   CARACTER, ALIAS DE DESTINO DOS CAMPOS
@PARAM LEMPTY,    LOGICO, VERIFICA SE ESTIVER VAZIO O CAMPO ANTES PARA NÃO LIMPAR NA INTEGRAÇÃO
@PARAM LLETAB,   LOGICO, INFORMA SE DEVE USAR OS DADOS DE UMA DETERMINADA TABELA QUE DEVERÁ SER POSICIONADA
@PARAM NRECALIA1, RECNO PARA POSICIONAR NO ALIAS CONTIDO EM CALIAS1 (USAR SOMENTE SE PRECISAR DOS DADOS DA TABELA E NÃO DA MEMÓRIA)
@PARAM NINDALIA1, INDICE PARA POSICIONAR NO ALIAS CONTIDO EM CALIAS1 (USAR SOMENTE SE PRECISAR DOS DADOS DA TABELA E NÃO DA MEMÓRIA),
				  SÓ DEVE SER USADO CASO NÃO USE O RECNO.
@PARAM CCHVALIA1, CHAVE PARA POSICIONAR NO ALIAS CONTIDO EM CALIAS1 (USAR SOMENTE SE PRECISAR DOS DADOS DA TABELA E NÃO DA MEMÓRIA),
				  SÓ DEVE SER USADO CASO NÃO USE O RECNO E NÃO DEVE CONTER A FILIAL NA CHAVE.
				  O CONTEÚDO DEVE SER O VALOR QUE DEVERÁ SER LOCALIZADO NA TABELA.
@PARAM NRECALIA2, RECNO PARA POSICIONAR NO ALIAS CONTIDO EM CALIAS2 (USAR SOMENTE SE PRECISAR DOS DADOS DA TABELA E NÃO DA MEMÓRIA)
@PARAM NINDALIA2, INDICE PARA POSICIONAR NO ALIAS CONTIDO EM CALIAS2 (USAR SOMENTE SE PRECISAR DOS DADOS DA TABELA E NÃO DA MEMÓRIA),
				  SÓ DEVE SER USADO CASO NÃO USE O RECNO.
@PARAM CCHVALIA2  CHAVE PARA POSICIONAR NO ALIAS CONTIDO EM CALIAS2 (USAR SOMENTE SE PRECISAR DOS DADOS DA TABELA E NÃO DA MEMÓRIA),
				  SÓ DEVE SER USADO CASO NÃO USE O RECNO E NÃO DEVE CONTER A FILIAL NA CHAVE.
				  DEVERÁ PASSAR OS CAMPOS REFERENTES AO ALIAS CALIAS1 QUE DEVERÁ SER USADO PARA POSICIONAR NA TABELA DO CALIAS2
				  EXEMPLO: "BA1_CODINT+BA1_CODEMP+BA1_MATRIC"	
@VERSION 1.0
/*/
FUNCTION PLSSINC(CPROG, CALIAS1, CALIAS2, LEMPTY, LLETAB, NRECALIA1, NINDALIA1, CCHVALIA1, NRECALIA2, NINDALIA2,CCHVALIA2)  
	
	LOCAL   AAREA     := GETAREA()
	LOCAL   LOK1      := .F.
	LOCAL   LOK2      := .F.
	LOCAL   CALIASUSU := ""   
	LOCAL   LRETSEKTB := .T.
	
	DEFAULT LEMPTY    :=.F.
	DEFAULT LLETAB   := .F.
	DEFAULT NRECALIA1 := 0
	DEFAULT NINDALIA1 := 0
	DEFAULT CCHVALIA1 := ""
	DEFAULT NRECALIA2 := 0
	DEFAULT NINDALIA2 := 0
	DEFAULT CCHVALIA2 := ""
	
	CPROG := PADR(CPROG,10)
	BBL->(DBSETORDER(2))
	
	IF BBL->(MSSEEK(XFILIAL()+CPROG+CALIAS1+CALIAS2))
		
		//COM A VARIÁVEL LLEMEMO TRUE, NÃO IRÁ CONSIDERAR OS DADOS DA MEMORIA, E SIM OS DADOS DE UMA TABELA POSICIONADA.
		/*COM O LLEMEMO TRUE, ALEM DE POSICIONAR NA TABELA DE ONDE OS DADOS SERÃO EXTRAÍDOS,
		  É OBRIGATÓRIO POSICIONAR NA TABELA QUE SERÁ SINCRONIZADA,CASO CONTRÁRIO
		  O SISTEMA IRÁ CONSIDERAR OS VALORES DA MEMORIA DO ALIAS CONTIDO NA VARIÁVEL CALIAS1 PODENDO
		  CAUSAR ERROR LOG EM DETERMINADA SITUAÇÃO
		*/
		IF LLETAB

			//UTILIZA O RECNO PARA POSICIONAR NA TABELA 
			IF NRECALIA1 != 0 

				&(CALIAS1)->(DBGOTO(NRECALIA1))
				
				//VERIFICA SE O REGISTRO EXISTE E SE FOI POSICIONADO CORRETAMENTE
				IF &(CALIAS1)->(RECNO()) == NRECALIA1
					CALIASUSU := CALIAS1+"->"
				ENDIF

			ELSEIF NINDALIA1 > 0 .AND. !EMPTY(CCHVALIA1)

				&(CALIAS1)->(DBSETORDER(NINDALIA1))

				//FAZ UM SEEK PARA POSICIONAR NO REGISTRO CORRETO, SE NÃO VAI CONTINUAR BUSCANDO OS DADOS DA MEMÓRIA
				IF &(CALIASUSU)->(MSSEEK(XFILIAL(CALIASUSU) + CCHVALIA1))
					CALIASUSU := CALIAS1+"->"
				ENDIF
			ENDIF

			/*PARA POSICIONAR NA TABELA QUE SERÁ SINCRONIZADA É OBRIGATÓRIO TER POSICIONADO NA TABELA DE ONDE SERÃO
			EXTRAIDO OS DADOS.*/
			IF NRECALIA2 != 0 .AND. !EMPTY(CALIASUSU)

				&(CALIAS2)->(DBGOTO(NRECALIA2))
				
				//SE O RECNO NÃO EXISTE, O PROCESSO DE SINCRONIZAÇÃO NÃO SERÁ EXECUTADO
				IF &(CALIAS2)->(RECNO()) != NRECALIA2
					LRETSEKTB := .F.
				ENDIF
	
			ELSEIF NINDALIA2 > 0 .AND. !EMPTY(CCHVALIA2) .AND. !EMPTY(CALIASUSU)

				&(CALIAS2)->( DBSETORDER( NINDALIA2))
				
				/*FAZ UM SEEK PARA POSICIONAR NO REGISTRO CORRETO, SE NÃO NÃO ENCONTROU, O PROCESSO DE 
				  SINCRONIZAÇÃO NÃO SERÁ EXECUTADO, POIS O BENEFICIÁRIO NEM SEMPRE ESTARÁ CADASTRADO
				  NA TABELA CORRESPONDENTE 
				*/
				IF !&(CALIAS2)->( MSSEEK( XFILIAL(CALIAS2) + &(CALIAS1+"->"+(CCHVALIA2))))
					LRETSEKTB := .F.
				ENDIF
			ELSE
				
				/*SE NÃO POSICIONOU NA TABELA CONTIDA NA VARIÁVEL CCHVALIA2, VOLTA AO PADRÃO DE UTILIZAÇÃO DA MEMÓRIA
				  POIS É OBRIGATÓRIO POSICIONAR NAS DUAS TABELAS CORRETAMENTE PARA USAR ESSA REGRA  
				*/
				CALIASUSU := "M->"
			ENDIF
		
		ELSE
			CALIASUSU := "M->"
		ENDIF

		IF LRETSEKTB

			//DA RECLOCK, DESSA FORMA NÃO PRECISA NEM POSICIONAR E NEM DAR RECLOCK FORA DA FUNÇÃO
			IF CALIASUSU != "M->"
				&(CALIAS2)->( RECLOCK(CALIAS2,.F.) )
			ENDIF

			WHILE !BBL->(EOF()) .AND. CPROG == BBL->BBL_PROGRA .AND. BBL->BBL_ALIAS1 == CALIAS1 .AND. BBL->BBL_ALIAS2 == CALIAS2
				
				LOK1 := .T.
				LOK2 := .T.
				
				DBSELECTAREA(BBL->BBL_ALIAS2)
				LOK1 := FIELDPOS(BBL->BBL_CAMPO2) > 0
				
				IF ! LOK1

					FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"SIGAPLS - "+STR0031+STR0032+" ["+BBL->BBL_ALIAS2+"] "+STR0033+" ["+ALLTRIM(BBL->BBL_CAMPO2)+"] . "+STR0034+" PLSM160." , 0, 0, {})//"TABELA DE SINCRONISMO INVALIDA. "###"TABELA"###"CAMPO"###"EFETUAR A MANUTENÇÃO NO CADASTRO ATRAVÉS DO PROGRAMA"		
					
				ENDIF
				
				DBSELECTAREA(BBL->BBL_ALIAS1)
				LOK2 := FIELDPOS(BBL->BBL_CAMPO1) > 0
				
				IF LOK2
					LOK2 := TYPE(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1)) <> "U"
				ENDIF
				
				IF ! LOK2

					FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"SIGAPLS - "+STR0031+STR0033+" ["+CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1)+"] . "+STR0034+" PLSM160." , 0, 0, {})//"TABELA DE SINCRONISMO INVALIDA. "###"CAMPO"###"EFETUAR A MANUTENÇÃO NO CADASTRO ATRAVÉS DO PROGRAMA"		

				ENDIF
				
				IF LOK1 .AND. LOK2
					IF ALLTRIM(BBL->BBL_CAMPO2) == "A2_COD_MUN"
						SA2->A2_COD_MUN := SUBSTR(&(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1)),3)
						CCODMUN := SUBSTR(BID->BID_CODMUN,3)
						CCODEST	:= BID->BID_EST
						SA2->A2_MUN := BID->BID_DESCRI
					ELSEIF ALLTRIM(BBL->BBL_CAMPO2) == "A1_COD_MUN"
						SA1->A1_COD_MUN := SUBSTR(&("M->"+ALLTRIM(BBL->BBL_CAMPO1)),3)
						SA1->A1_MUN := BID->BID_DESCRI
					ELSEIF ALLTRIM(BBL->BBL_CAMPO2) == "A1_END"
						IF ALLTRIM(BBL->BBL_CAMPO1) $ 'BA1_ENDERE/BTS_ENDERE'
							SA1->A1_END := ALLTRIM(&(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1)))+ IIF(EMPTY(ALLTRIM(&(CALIASUSU+ALLTRIM(BBL->BBL_ALIAS1)+"_NR_END"))),""," ,"+ ALLTRIM(&(CALIASUSU+ALLTRIM(BBL->BBL_ALIAS1)+"_NR_END")))
						ELSE
							SA1->A1_END := &(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1))
						ENDIF	
					ELSEIF LEMPTY  // VERIFICA SE ESTIVER VAZIO O CAMPO ANTES PARA NÃO LIMPAR NA INTEGRAÇÃO
						IF !EMPTY(&(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1)))
							&(BBL->BBL_ALIAS2+"->"+ALLTRIM(BBL->BBL_CAMPO2)) := &(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1))
						ENDIF
					ELSEIF ALLTRIM(BBL->BBL_CAMPO2) $ "BA1_ORIEND/BA1_BAIRRO/BA1_CEPUSR/BA1_CODMUN/BA1_COMEND/BA1_ENDERE/BA1_MUNICI/BA1_NR_END/BA1_ESTADO"
						//ORIGEM DO ENDEREÇO CASO A OPÇÃO FOR 5=RESP. FAM E NÃO FOR RESPONSAVEL DA FAMILIA NÃO PODERA ATUALIZAR O ENDEREÇO
						IF BA1->BA1_ORIEND  <> "5" .OR. BA1->BA1_RESFAM <> "0"
							&(BBL->BBL_ALIAS2+"->"+ALLTRIM(BBL->BBL_CAMPO2)) := &(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1))
						ENDIF
					ELSE
						&(BBL->BBL_ALIAS2+"->"+ALLTRIM(BBL->BBL_CAMPO2)) := &(CALIASUSU+ALLTRIM(BBL->BBL_CAMPO1))
					ENDIF
				ENDIF
				
				BBL->(DBSKIP())
			ENDDO

			IF CALIASUSU != "M->"
				&(CALIAS2)->( MSUNLOCK() )
			ENDIF
		ENDIF
	ELSE
		IF GETNEWPAR("MV_PLSMSGS","1") == "1"
			MSGALERT(OEMTOANSI(STR0009)+CALIAS1+" X "+CALIAS2+OEMTOANSI(STR0010))	 //"ARQUIVO DE SINCRONISMO ENTRE "###" NAO ESTA INTEGRO. VERIFIQUE!"
		ENDIF
	ENDIF
	
	RESTAREA(AAREA)
RETURN .T.

/*/{PROTHEUS.DOC} PLSDIGI
FUNCAO DE CALCULO DO DIGITO VERIFICADOR
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 02.10.2001
@PARAM CCODIGO, CARACTER, CODIGO QUE SERA GERADO O DIGITO VERIFICADOR
@PARAM NMODULO, CARACTER, MODULO PARA CALCULO DO DIGITO (11=DEFAULT)
@VERSION 1.0
/*/
FUNCTION PLSDIGI(CCODIGO,NMODULO)
	DEFAULT NMODULO := 11
	CRET := SUBSTR(STR(MOD(VAL(CCODIGO),NMODULO),2),2,1)
RETURN CRET

/*/{PROTHEUS.DOC} PLSZERO
PREENCHE COM ZEROS A ESQUERDA O CAMPO OU VARIAVEL
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04.10.2001
@PARAM CVAR, CARACTER, NOME DO CAMPO (DEVE SER PASSADO ENTRE ASPAS)
@VERSION 1.0
/*/
FUNCTION PLSZERO(CVAR,NTAM)
LOCAL NI		:= 0
LOCAL LPODE 	:= .T.
LOCAL CPAR 		:= GETNEWPAR("MV_PLSUNI","0")//VERIFICA O PARAMETRO, CASO 1-UNIMED, PASSAR PELO IF

DEFAULT CVAR 	:= READVAR()
DEFAULT NTAM 	:= IIF(!EMPTY(CVAR),LEN(&CVAR),0)

// PROTEGE PARA QUE A DIGITAÇÃO DO CAMPO NUMERO DO IMPRESSO NÃO POSSA ULTRAPASSAR
// O TAMANHO DE 11 POSIÇÕES PREVISTO NAS NORMAS DO PTU

IF CVAR $ "M->BE1_NUMIMP|M->BE4_NUMIMP|M->BD5_NUMIMP" .AND. CPAR == "1"
	NTAM := 11
ENDIF

//FIM VERIFICAÇAO

IF EMPTY(&CVAR)
	RETURN .T.
ENDIF

FOR NI := 1 TO NTAM
	IF !(SUBSTR(&CVAR,NI,1) $ " 0123456789")
		LPODE := .F.
		EXIT
	ENDIF
NEXT

IF LPODE
	&CVAR := STRZERO(VAL(SUBSTR(&CVAR,1,NTAM)),NTAM)
ENDIF
	
RETURN .T.
/*/{PROTHEUS.DOC} PLSIGUALA
IGUALA VARIAVEL PRIVATE DE ACORDO COM VALOR FORNECIDO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 06.11.2001
@PARAM CVAR, CARACTER, NOME DA VARIAVEL
@PARAM UVAL, CARACTER, VALOR A IGUALAR
@VERSION 1.0
/*/
FUNCTION PLSIGUALA(CVAR,UVAL)
	&CVAR := UVAL
RETURN .T.

/*/{PROTHEUS.DOC} PLSXUSRBLO
RETORNA USUARIO BLOQUEADO OU NAO...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 05.03.2002
@VERSION 1.0
/*/
FUNCTION PLSXUSRBLO(CANO,CMES,DDATBLO,CMOTBLO)
	LOCAL LRET := .T.
	
	IF ! EMPTY(CMOTBLO)
		IF CANO+CMES >= SUBS(DTOS(DDATBLO),1,6)
			LRET := .F.
		ENDIF
	ENDIF
	
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSRETGLO
RETORNA DESCRICAO DA GLOSA...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSRETGLO(CCODOPE,CCODGLO)
LOCAL CRET

BCT->(DBSETORDER(1))
IF BCT->(MSSEEK(XFILIAL("BCT") + CCODOPE + CCODGLO))
	CRET := BCT->BCT_DESCRI
ELSE
	CRET := SPACE( LEN(BCT->BCT_DESCRI) )
ENDIF
	
RETURN(CRET)

/*/{PROTHEUS.DOC} PLSCHKCRI
CHECA SE A CRITICA TEM EXCECAO NO NIVEL CORRESPONDENTE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 27.07.2010
@VERSION 1.0
/*/
FUNCTION PLSCHKCRI(ADADPAR)
LOCAL LRET			:= .T.
LOCAL NTAMANHO		:= 0
LOCAL CCODOPE		:= __COPEPAD
LOCAL CTABELA		:= IIF( LEN(ADADPAR) >= 1,ADADPAR[1],"" )
LOCAL CCHAVE 		:= IIF( LEN(ADADPAR) >= 2,ADADPAR[2],"" )
LOCAL CCODCRI		:= IIF( LEN(ADADPAR) >= 3,ADADPAR[3],"" )

// SE A CRITICA FOI INFORMADA
IF ! EMPTY(CCODCRI) .AND. ! EMPTY(CCHAVE)

	NTAMANHO := __TAMBCF_CHAVE

	// AJUSTA O TAMANHO DA CHAVE
	CCHAVE := CCHAVE + SPACE( NTAMANHO - LEN(CCHAVE) )

	// VALIDA CONFORME O NIVEL
	BCF->( DBSETORDER(1) )
	LRET := ! BCF->( MSSEEK( __CFILBCF + CCODOPE + CTABELA + CCHAVE + CCODCRI ) )
	
ENDIF

RETURN LRET

/*/{PROTHEUS.DOC} PCLPGAUTO
RETORNA SE UMA CRITICA E PARA GLOCAR AUTOMATICO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PCLPGAUTO()
RETURN __LGLOAUTO

/*/{PROTHEUS.DOC} PCLPOSGLO
LIMA MATRIZ AO ALTERAR QUALQUER CRITICA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PCLPOSGLO()
__ACRITGLOSAS := {}
RETURN

/*/{PROTHEUS.DOC} PLSPOSGLO
POSICIONA EM UMA DETERMINADA GLOSA...
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSPOSGLO(CCODOPE,CCODGLO,CDESCRI,CLOCALEXEC,CATIVO,CTPLOCEXEC,CAUDITO,LANAAMBOS)
LOCAL NPOS			:= 0
LOCAL CPROPRI		:= ""
LOCAL CLOCANA		:= ""
LOCAL CPROT			:= ""
LOCAL CPOS			:= ""
LOCAL CWEB			:= ""
LOCAL CENVCOX		:= ""
LOCAL LRET			:= .T.

DEFAULT CDESCRI    	:= ""
DEFAULT CLOCALEXEC 	:= "1"
DEFAULT CATIVO     	:= "1"
DEFAULT CTPLOCEXEC  := "1" //"1" REMOTE PROTHEUS  "2" WEB  "3" POS "4" ---- "5" XML
DEFAULT CAUDITO		:= ""
DEFAULT LANAAMBOS   := .F.

// ESSE ITEM SE FAZ NECESSARIO DEVIDO AS VARIAS CHAMADAS DO PLSPOSGLO COM O PARAMETRO CTPLOCEXEC EM BRANCO E VINDO DA WEB, E ASSIM NÃO RESPEITANDO O CAMPO BCT_WEB
IF FUNNAME() == 'RPC' 
	CTPLOCEXEC := "2"
ENDIF

NPOS := ASCAN(__ACRITGLOSAS,{ |X| X[1] == __CFILBCT + CCODOPE + CCODGLO })

IF NPOS == 0

	BCT->( DBSETORDER(1) )

	IF ! BCT->( MSSEEK( __CFILBCT + CCODOPE + CCODGLO) )
	
		BCT->( RECLOCK("BCT",.T.) )
		
			BCT->BCT_FILIAL  := __CFILBCT
			BCT->BCT_CODOPE  := CCODOPE
			BCT->BCT_PROPRI  := SUBS(CCODGLO,1,1)
			BCT->BCT_CODGLO  := SUBS(CCODGLO,2,2)
			BCT->BCT_DESCRI  := CDESCRI
			BCT->BCT_TIPO    := "1"
			BCT->BCT_USO     := "3"
			BCT->BCT_ATIVO   := CATIVO
			BCT->BCT_RESOBR  := "0"
			BCT->BCT_NIVEL   := "2"
			BCT->BCT_PERFOR  := "0"
			BCT->BCT_LOCANA  := "3"			
			BCT->BCT_AUDITO  := CAUDITO
			BCT->BCT_PROT := "1"
			BCT->BCT_POS  := "1"
			BCT->BCT_WEB  := "1"
			
			IF __LBCT_GLOATO
				BCT->BCT_GLOATO  := "0"
			ENDIF
			
		BCT->( MSUNLOCK() )
		
	ENDIF
	
	AADD(__ACRITGLOSAS,{BCT->(BCT_FILIAL+BCT_CODOPE+BCT_PROPRI+BCT_CODGLO),;
						BCT->BCT_PROPRI,;
						BCT->BCT_ATIVO,;
						IIF(LANAAMBOS,"3",BCT->BCT_LOCANA),;
						BCT->BCT_PROT,;
						BCT->BCT_POS,;
						BCT->BCT_WEB,;
						BCT->BCT_DESCRI,;
						BCT->BCT_ENVCOX,;
						IIF(__LBCT_GLOATO,BCT->BCT_GLOATO,'0')})
						
	NPOS := LEN(__ACRITGLOSAS)

ENDIF

CPROPRI     := __ACRITGLOSAS[NPOS,2]
CATIVO      := __ACRITGLOSAS[NPOS,3]
CLOCANA     := __ACRITGLOSAS[NPOS,4]
CPROT       := __ACRITGLOSAS[NPOS,5]
CPOS        := __ACRITGLOSAS[NPOS,6]
CWEB        := __ACRITGLOSAS[NPOS,7]
__CLASTDESC := __ACRITGLOSAS[NPOS,8]
CENVCOX	    := __ACRITGLOSAS[NPOS,9]

IF __LBCT_GLOATO
	__LGLOAUTO := __ACRITGLOSAS[NPOS,10] == '1'
ENDIF

// DE SISTEMA SEMPRE CRITICA...
IF CPROPRI $ "5,X"

	IF CATIVO == "1"
		LRET := .T.
	ELSE
		LRET := .F.
	ENDIF

ELSEIF ( CPROPRI $ "0,7,9" ) .AND. ( ( CLOCANA $ " ,3" ) .OR. ( CLOCANA == CLOCALEXEC ) ) .AND. ( CATIVO == "1" )
	
	IF EMPTY(CTPLOCEXEC)
	
		LRET := .T.
		
	ELSEIF ! EMPTY(CTPLOCEXEC)

		IF CTPLOCEXEC $ "1,4"
			
			//PROTHEUS
			IF CPROT $ " ,1" 
				LRET := .T.
			ELSE
				LRET := .F.
			ENDIF

		ELSEIF CTPLOCEXEC == "2"
			
			//WEB
			IF CWEB $ " ,1" 
				LRET := .T.
			ELSE
				LRET := .F.
			ENDIF

		ELSEIF CTPLOCEXEC == "3"
			
			//POS
			IF CPOS $ " ,1" 
				LRET := .T.
			ELSE
				LRET := .F.
			ENDIF

		ELSE
			LRET := .T.
		ENDIF

	ELSE
		LRET := .T.
	ENDIF

ELSE
	LRET := .F.
ENDIF

//SE A CRITICA ESTA INATIVA, ESTOU NA VALIDACAO DO XML E O CAMPO PARA ENVIO DE
//GUIA PARA CONFERENCIA ESTA HABILITADO O SISTEMA HABILITA A CRITICA
IF ! LRET .AND. CLOCALEXEC == '5' .AND. CENVCOX == '1'
	LRET := .T.
ENDIF

//SE VEIO DA GERAÇÃO DA GUIA DE RECURSO DE GLOSA NÃO HAVERÁ NENHUM
//TIPO DE CRÍTICA.
//ESSA NOVA GUIA SERVE APENAS PARA PAGAMENTO E O SEU VALOR É ACORDADO ENTRE
//A OPERADORA E O PRESTADOR, POR ISSO NADA PODE SER CRITICADO.

IF LRET

	//A VARIAVEL __PLSA498GUI FOI CRIADA PARA MELHOR PERFORMACE 
	//O IDEAL E TRATAR OS PONTOS DE CHAMADAS DA PLSPOSGLO E NAO FAZER O TRATAMENTO ABAIXO.
	IF __PLSA498GUI 
		LRET := .F.
	ENDIF
	
ENDIF	
	
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSBCTDESC
RETORNA A DESCRICAO DE UMA GLOSAS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.2001
@VERSION 1.0
/*/
FUNCTION PLSBCTDESC()
//NO FUTURO VAMOS IMPLEMENTAR AQUI UM IFDEF ESPANHOL E INGLES
RETURN(__CLASTDESC)

/*/{PROTHEUS.DOC} PLSCODSUP
GERA CODIGO DA NATUREZA SUPERIOR
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 05.06.03
@PARAM CCODIGO, CARACTER, CODIGO DA NATUREZA
@PARAM CGRUGEN, CARACTER, GRUPO GERENCIAL
@VERSION 1.0
/*/
FUNCTION PLSCODSUP(CCODIGO,CGRUGEN)
	
	LOCAL AAREA, AAMBBF0
	LOCAL CCOD  := "" , NCONT, NPOS := 1
	
	CCODIGO		:= ALLTRIM(CCODIGO)
	AAREA    	:= GETAREA()
	AAMBBF0  	:= BF0->(GETAREA())
	
	DBSELECTAREA("BF0") ; DBSETORDER(1)
	
	FOR NCONT := LEN(CCODIGO) TO 1 STEP - 1
		CCOD  := PADR(LEFT(CCODIGO,LEN(CCODIGO)-NPOS),20)
		NPOS ++
		IF MSSEEK(XFILIAL()+CGRUGEN+CCOD,.F.)
			CCOD := BF0->BF0_CODIGO
			EXIT
		ENDIF
	NEXT
	
	M->BF0_CODSUP := CCOD
	BF0->(RESTAREA(AAMBBF0))
	RESTAREA(AAREA)
	
RETURN .T.

/*/{PROTHEUS.DOC} PLSCODSUP
VALIDA CODIGO SUPERIOR NA INCLUSAO DA NATUREZA DE SAUDE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 05.06.03
@PARAM CCODIGO, CARACTER, CODIGO DA NATUREZA SUPERIOR
@PARAM CGRUGEN, CARACTER, GRUPO GERENCIAL
@VERSION 1.0
/*/
FUNCTION PLSVLDSUP(CCODIGO, CGRUGEN)
	
	LOCAL ASAVEAREA	:= GETAREA()
	LOCAL LRET		:= .T.
	
	DBSELECTAREA("BF0")
	DBSETORDER(1)
	
	IF ! EMPTY(CCODIGO)
		IF !MSSEEK(XFILIAL()+CGRUGEN+CCODIGO)	//A NATUREZA DEVE EXISTIR NAS NATUREZAS DE SAUDE
			HELP("  ", 1, "NOCADBF0SU")
			LRET := .F.
		ENDIF
		IF LRET
			IF BF0->BF0_CLASSE != "1"			//A NATUREZA SUPERIOR DEVE SER SINTETICA.
				HELP(" ",1,"NOBF0SINTE")
				LRET := .F.
			ENDIF
		ENDIF
	ENDIF
	
	RESTAREA(ASAVEAREA)
	
RETURN LRET

/*/{PROTHEUS.DOC} PLSPROAM
ACUMULA 1 MES EM UM MES E ANO PASSADO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 17.09.03
@VERSION 1.0
/*/
FUNCTION PLSPROAM(CANO,CMES)
	
	IF CMES == "12"
		CANO := STRZERO(VAL(CANO)+1,4)
		CMES := "01"
	ELSE
		CMES := STRZERO(VAL(CMES)+1,2)
	ENDIF
	
RETURN({CANO,CMES})

/*/{PROTHEUS.DOC} PLSSXBSRA
PESQUISA SXB CUSTOMIZADA PARA EXIBIR O CADASTRO TABELA SRA, ONDE A PESQUISA CUSTOMIZADA.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 18/10/04
@VERSION 1.0
/*/
FUNCTION PLSSXBSRA()
	LOCAL ODLG, OBTOK, OBTCANCEL, OORDER, OCHAVE, OSELECT
	LOCAL NOPC  := 0
	LOCAL CORDER := OEMTOANSI(STR0011) //"MATRÍCULA"
	LOCAL CCHAVE := PADR( &( READVAR() ), TAMSX3("RA_NOME")[1] )
	LOCAL AORDERS := {}
	LOCAL ACPOBRW := {}
	LOCAL CFILTER := ""
	LOCAL CTITLE := OEMTOANSI(STR0012) //"SELEÇÃO DE FUNCIONÁRIO"
	LOCAL AINDEXSRA := {}
	LOCAL BFILTRABRW
	LOCAL NPOSSRA
	LOCAL NTAMFIL := FWSIZEFILIAL()
	AADD(AORDERS,OEMTOANSI(STR0011)) //"MATRÍCULA"
	AADD(AORDERS,OEMTOANSI(STR0013)) //"CENTRO CUSTO"
	AADD(AORDERS,OEMTOANSI(STR0014)) //"NOME"
	
	AADD( ACPOBRW, { GETSX3CACHE("RA_FILIAL","X3_CAMPO"),, GETSX3CACHE("RA_FILIAL","X3_TITULO") , GETSX3CACHE("RA_FILIAL","X3_PICTURE")} )
	AADD( ACPOBRW, { GETSX3CACHE("RA_MAT","X3_CAMPO"),, GETSX3CACHE("RA_MAT","X3_TITULO") , GETSX3CACHE("RA_MAT","X3_PICTURE")} )
	AADD( ACPOBRW, { GETSX3CACHE("RA_NOME","X3_CAMPO"),, GETSX3CACHE("RA_NOME","X3_TITULO") , GETSX3CACHE("RA_NOME","X3_PICTURE")} )
	AADD( ACPOBRW, { GETSX3CACHE("RA_CC","X3_CAMPO"),, GETSX3CACHE("RA_CC","X3_TITULO") , GETSX3CACHE("RA_CC","X3_PICTURE")} )
	
	DEFINE MSDIALOG ODLG TITLE CTITLE FROM 000,000 TO 300,500 PIXEL
	
	BFILTRABRW	:= { || FILBROWSE( "SRA" , @AINDEXSRA , "RA_SITFOLH <> 'D'" ) }
	EVAL( BFILTRABRW )
	
	OSELECT := MSSELECT():NEW("SRA",,,ACPOBRW,,,{ 003, 003, 117, 220 },"PLFILFIL('"+SPACE(NTAMFIL)+"')","PLFILFIL('"+REPLICATE('Z',NTAMFIL)+"')",ODLG)
	OSELECT:BAVAL := {|| NOPC := 1, ODLG:END() }
	OSELECT:OBROWSE:REFRESH()
	
	@ 125,004 SAY OEMTOANSI(STR0015) SIZE 40,08 OF ODLG PIXEL //"ORDENAR POR:" //"ORDENAR POR:"
	@ 125,042 COMBOBOX OORDER VAR CORDER ITEMS AORDERS SIZE 125,08 OF ODLG PIXEL VALID PLFINDSRA(AINDEXSRA,OORDER:NAT,,BFILTRABRW,OSELECT)
	@ 137,004 SAY OEMTOANSI(STR0016) SIZE 40,08 OF ODLG PIXEL //"LOCALIZAR:" //"LOCALIZAR:"
	@ 137,042 GET OCHAVE VAR CCHAVE SIZE 125,08 OF ODLG PIXEL VALID PLFINDSRA(AINDEXSRA,OORDER:NAT,CCHAVE,BFILTRABRW,OSELECT)
	DEFINE SBUTTON OBTOK     FROM 003,220 TYPE 1 ENABLE ACTION ( NOPC := 1, ODLG:END() ) OF ODLG PIXEL
	DEFINE SBUTTON OBTCANCEL FROM 017,220 TYPE 2 ENABLE ACTION ( NOPC := 0, ODLG:END() ) OF ODLG PIXEL
	
	ACTIVATE MSDIALOG ODLG CENTERED
	
	NPOSSRA := SRA->(RECNO())
	
	// DELETA O FILTRO UTILIZANDO A FUNCAO FILBROWSE
ENDFILBRW("SRA",AINDEXSRA)

SRA->(DBGOTO(NPOSSRA))

RETURN(.T.)

/*/{PROTHEUS.DOC} PLFINDSRA
ROTINA PARA TRATAR A BUSCA NA ESCOLHA DA MSSELECT
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 20/10/04
@VERSION 1.0
/*/
STATIC FUNCTION PLFINDSRA(AINDEXSRA,NAT,CCHAVE,BFILTRABRW,OSELECT)
	LOCAL LFIND :=.F.
	LOCAL NCONT
	LOCAL AEMPRESAS	  := ADMABRESM0()
	LOCAL NTAMFIL     := FWSIZEFILIAL()
ENDFILBRW("SRA",AINDEXSRA)
SRA->( DBSETORDER( NAT ) )

IF CCHAVE <> NIL
	CCHAVE := ALLTRIM(CCHAVE)
	NCONT := ASCAN(AEMPRESAS,{|X| SUBSTR(X[1],1,2) == FWGRPCOMPANY() } )
	
	IF NCONT > 0
		FOR NCONT:= NCONT TO LEN(AEMPRESAS)
			IF FWGRPCOMPANY() <> ALLTRIM(AEMPRESAS[NCONT,1])
				EXIT
			ENDIF
			
			LFIND:= SRA->( MSSEEK( SUBSTR(AEMPRESAS[NCONT,2],1,NTAMFIL)+CCHAVE , .F. ) )
			IF LFIND
				EXIT
			ENDIF
		NEXT
	ELSE
		LFIND:= SRA->( MSSEEK(CCHAVE, .F. ))
	ENDIF
	IF !LFIND
		ALERT(OEMTOANSI(STR0017)) //"FUNCIONARIO NAO ENCONTRADO"
	ENDIF
ENDIF

EVAL( BFILTRABRW)
OSELECT:OBROWSE:REFRESH()
RETURN .T.

/*/{PROTHEUS.DOC} PLFILFIL
BUSCA AS FILIAIS POIS ONDE ELA EH CHAMADA NAO ACEITA INFORMAR DIRETO O CONTEUDO. TEM QUE CHAMAR UMA FUNCAO.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLFILFIL(CRET)
RETURN(CRET)

/*/{PROTHEUS.DOC} PLSENDMAIL
ROTINA PARA TRATAR O ENVIO DO E-MAIL APÓS A GERACAO VIA OPRINTER.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 20/10/04
@VERSION 1.0
/*/
FUNCTION PLSENDMAIL(OPRINTA,LDIRETO)
PRIVATE AUSUARIO    := "", ODLGMAIL, NOP:=0
PRIVATE AFILES 		   := {}, LDIRET:=LDIRETO, OPRINT:=OPRINTA
PRIVATE CFROM       := ""
PRIVATE CSERVER     := ALLTRIM(GETNEWPAR("MV_RELSERV"," "))//SERVIDOR DE EMAIL
PRIVATE CACCOUNT    := ALLTRIM(GETNEWPAR("MV_RELACNT"," ")) // CONTA
PRIVATE CPASSWORD   := ALLTRIM(GETNEWPAR("MV_RELPSW" ," ")) // SENHA
PRIVATE NTIMEOUT    := GETMV("MV_RELTIME",,120) //TEMPO DE ESPERA ANTES DE ABORTAR A CONEXÃO
PRIVATE LAUTENTICA  := GETMV("MV_RELAUTH",,.F.) //DETERMINA SE O SERVIDOR DE EMAIL NECESSITA DE AUTENTICAÇÃO
PRIVATE CUSERAUT    := ALLTRIM(GETMV("MV_RELAUSR",,CACCOUNT)) //USUÁRIO PARA AUTENTICAÇÃO NO SERVIDOR DE EMAIL
PRIVATE CPASSAUT    := ALLTRIM(GETMV("MV_RELAPSW",,CPASSWORD)) //SENHA PARA AUTENTICAÇÃO NO SERVIDOR DE EMAIL
PRIVATE CTO         := SPACE(200)
PRIVATE CCC         := SPACE(200)
PRIVATE CSUBJECT    := SPACE(250)
PRIVATE CDOCUMENT   := OPRINT:CDOCUMENT, CDIRETORIO:="", X:=1

IF !LDIRET
	PSWORDER(1)
	PSWSEEK(__CUSERID,.T.)
	AUSUARIO := PSWRET(1)
	CFROM := CUSERNAME
	CCC := CCC + SPACE(200)
	DEFINE MSDIALOG ODLGMAIL OF OMAINWND FROM 0,0 TO 200,544 PIXEL TITLE OEMTOANSI(STR0018)   //"ENVIO DE EMAIL"
	@ 5,4  TO 079,268   OF ODLGMAIL PIXEL
	@ 18,8  SAY OEMTOANSI(STR0019)   SIZE 12,8             OF ODLGMAIL PIXEL //"DE: "
	@ 33,8  SAY OEMTOANSI(STR0020)  SIZE 16,8             OF ODLGMAIL PIXEL //"PARA:"
	@ 48,8  SAY OEMTOANSI(STR0021)    SIZE 16,8             OF ODLGMAIL PIXEL //"CC:"
	@ 63,8  SAY OEMTOANSI(STR0022) SIZE 21,8           OF ODLGMAIL PIXEL //"ASSUNTO:"
	
	@ 18,33  MSGET CFROM    SIZE 233,10  WHEN .F. OF ODLGMAIL PIXEL
	@ 33,33  MSGET CTO      SIZE 233,10  F3 "_EM" OF ODLGMAIL PIXEL
	@ 48,33  MSGET CCC      SIZE 233,10  F3 "_EM" OF ODLGMAIL PIXEL
	@ 63,33  MSGET CSUBJECT SIZE 233,10           OF ODLGMAIL PIXEL
	DEFINE SBUTTON FROM 85,100 TYPE 1 ACTION (IF(!EMPTY(CTO),IF(ODLGMAIL:END(),NOP:=1,),HELP("",1,"AVG0001054"))) ENABLE OF ODLGMAIL PIXEL
	DEFINE SBUTTON FROM 85,140 TYPE 2 ACTION (ODLGMAIL:END()) ENABLE OF ODLGMAIL PIXEL
	
	ACTIVATE MSDIALOG ODLGMAIL CENTERED
ELSE
	NOP:=1
ENDIF

IF NOP = 1
	MSAGUARDE({||PLGERAMAIL()},OEMTOANSI(STR0023),OEMTOANSI(STR0024))      //"AGUARDE......."###" ENVIANDO EMAIL"
ENDIF

RETURN NIL

/*/{PROTHEUS.DOC} PLGERAMAIL
(LONG_DESCRIPTION)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 20/10/04
@VERSION 1.0
/*/
FUNCTION PLGERAMAIL()
LOCAL CSEQUENCIA	:= "", X
LOCAL CANEXOS     	:= ""
LOCAL LOK       	:= .T.
PRIVATE CBODY:=""

CDIRETORIO	:= GETSRVPROFSTRING("STARTPATH","")

CSEQUENCIA := SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)+SUBSTR(TIME(),7,2)

SETMV("MV_SEQAVP",CSEQUENCIA)

IF ! OPRINT:SAVEALLASJPEG( CDIRETORIO+ALLTRIM(CSEQUENCIA),1120,840,140) // PASSAR O DIRETÓRIO ABAIXO DO ROOT PATH + AS 3 PRIMEIRAS LETRAS DO NOME DO ARQUIVO A SER GERADO
	HELP("",1,"AVG0001055")
	RETURN .F.
ENDIF

IF !LDIRET
	MSPROCTXT(OEMTOANSI(STR0025)) //"PROCESSANDO"
	CBODY  := OEMTOANSI(STR0026) + CDOCUMENT //"ARQUIVO "
	
	AFILES := DIRECTORY( CDIRETORIO+ALLTRIM(CSEQUENCIA)+"*.JPG" )
	
	FOR X:= 1 TO LEN(AFILES)
		CANEXOS += CDIRETORIO+AFILES[X,1] + "; "
	NEXT X
	
	CTO := PLLEGRPMAIL(CTO)
	CCC := PLLEGRPMAIL(CCC)
	
	CONNECT SMTP SERVER CSERVER ACCOUNT CACCOUNT PASSWORD CPASSWORD TIMEOUT NTIMEOUT RESULT LOK
	IF LOK
		IF LAUTENTICA
			IF !MAILAUTH(CUSERAUT,CPASSAUT)
				MSGINFO(OEMTOANSI(STR0027),OEMTOANSI(STR0028)) //"FALHA NA AUTENTICAÇÃO DO USUÁRIO"###"ATENÇÃO"
				DISCONNECT SMTP SERVER RESULT LOK
				IF !LOK
					GET MAIL ERROR CERRORMSG
					MSGINFO(OEMTOANSI(STR0029)+CERRORMSG,OEMTOANSI(STR0028)) //"ERRO NA DESCONEXÃO: "###"ATENÇÃO"
				ENDIF
				RETURN .F.
			ENDIF
		ENDIF
		IF !EMPTY(CCC)
			SEND MAIL FROM CFROM TO CTO CC CCC SUBJECT CSUBJECT BODY CBODY ATTACHMENT CANEXOS RESULT LOK
		ELSE
			SEND MAIL FROM CFROM TO CTO SUBJECT CSUBJECT BODY CBODY ATTACHMENT CANEXOS RESULT LOK
		ENDIF
		IF !LOK
			GET MAIL ERROR CERRORMSG
			HELP("",1,"AVG0001056",,"ERROR: "+CERRORMSG,2,0)
		ENDIF
	ELSE
		GET MAIL ERROR CERRORMSG
		HELP("",1,"AVG0001057",,"ERROR: "+CERRORMSG,2,0)
	ENDIF
	DISCONNECT SMTP SERVER RESULT LOK
	IF !LOK
		GET MAIL ERROR CERRORMSG
		MSGINFO(OEMTOANSI(STR0029)+CERRORMSG,OEMTOANSI(STR0028)) //"ERRO NA DESCONEXÃO: "###"ATENÇÃO"
	ENDIF
	
	FOR X:= 1 TO LEN(AFILES)
		FERASE(CDIRETORIO+AFILES[X,1])
	NEXT X
	
ENDIF
	
RETURN .T.

/*/{PROTHEUS.DOC} PLLEGRPMAIL
LEITURA DO GRUPO DE E-MAIL.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 20/10/04
@VERSION 1.0
/*/
FUNCTION PLLEGRPMAIL(CEMAIL)
	LOCAL  CPART,NAT,CSEND:=""
	IF EMPTY(CEMAIL)
		RETURN CEMAIL
	ENDIF
	CEMAIL := ALLTRIM(CEMAIL)
	IF RIGHT(CEMAIL,1) # ";"
		CEMAIL += ";"
	ENDIF
	DO WHILE (NAT := AT(";",CEMAIL)) > 0
		CPART := SUBS(CEMAIL,1,NAT-1)
		IF !EMPTY(CPART)
			IF !EMPTY(CSEND)
				CSEND += ";"
			ENDIF
			IF !("@"$CPART)
				CSEND += LOWER(ALLTRIM(RETPROFDEF(CUSERNAME,"AP5WAB","GROUP",CPART)))
			ELSE
				CSEND += LOWER(CPART)
			ENDIF
		ENDIF
		CEMAIL := SUBS(CEMAIL,NAT+1)
	ENDDO
RETURN CSEND

/*/{PROTHEUS.DOC} PLRELRDA
RETORNA ARRAY COM PRESTADORES CADASTRADOS PARA UTILIZAR DETERMINADO EQUIPAMENTO (POS/CPU)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04/11/04
@VERSION 1.0
/*/
FUNCTION PLRELRDA(CCODUSR)
LOCAL CREGATE 	:= ""
LOCAL CSQL 	  	:= ""
LOCAL ARET    	:= {}
LOCAL AMATESP 	:= {}
LOCAL AAREA   	:= GETAREA()
LOCAL DBLOQUEIO	:= FSDATECONV(DDATABASE,"YYYYMMDD")
LOCAL LCRED		:= !(P813VERCRED())

// INDICES
BAX->( DBSETORDER(1) ) //BAX_FILIAL + BAX_CODIGO + BAX_CODINT + BAX_CODLOC + BAX_CODESP + BAX_CODSUB
BAQ->( DBSETORDER(1) ) //BAQ_FILIAL + BAQ_CODINT + BAQ_CODESP

// NOME DAS TABELAS
CBSO := BSO->(RETSQLNAME("BSO"))
CBAU := BAU->(RETSQLNAME("BAU"))
CBB8 := BB8->(RETSQLNAME("BB8"))
CBC1 := BC1->(RETSQLNAME("BC1"))
CBAX := BAX->(RETSQLNAME("BAX"))
CBC4 := BC4->(RETSQLNAME("BC4"))

CSQL := " SELECT BC4_DTBLQ, BAU_DATBLO, BC4_DATA, BC4_DTBLQ, BB8_DATBLO,BSO_CODINT,BSO_CODLOC,BSO_CODIGO,BSO_CODLOC, "
CSQL += "		 BAU_TIPPRE,BAU_SIGLCR,BAU_CONREG,BAU_ESTCR,BAU_TIPPE,BAU_CODBB0, "
CSQL += "		 BAU_CODIGO,BAU_NOME,BAU_TIPPRE,BAU_CPFCGC,"+CBAU+".R_E_C_N_O_ AS RECNOBAU, "
CSQL += "        BAU_TISVER, BB8_CNES,BB8_TIPLOG,BB8_NR_END,BB8_COMEND,BB8_CARSOL, "
CSQL += "		 BB8_END,BB8_CODMUN,BB8_BAIRRO,BB8_EST,BB8_CODMUN,BB8_CEP,BB8_TEL "

CSQL += "  FROM " + CBSO + "," + CBAU + "," + CBB8 + " ," + CBC4 + " BC4 "

CSQL += " WHERE BSO_FILIAL = '" + XFILIAL("BSO") + "' "
CSQL += "  	AND BSO_CODUSR = '" + CCODUSR + "' "
CSQL += "	AND " + CBSO + ".D_E_L_E_T_ = ' ' "

CSQL += "	AND BAU_FILIAL = '" + XFILIAL("BAU") + "' "
CSQL += "	AND BAU_CODIGO = BSO_CODIGO "

CSQL += "   AND BC4_FILIAL = '" + XFILIAL("BC4") + "' "
CSQL += "   AND BC4_CODCRE = BAU_CODIGO "
CSQL += "	AND BC4.D_E_L_E_T_ = ' ' "

CSQL += " AND BC4.R_E_C_N_O_ = ( SELECT MAX(R_E_C_N_O_)  FROM " + CBC4 + "  WHERE BC4_FILIAL = '" + XFILIAL("BC4") + "' AND BC4_CODCRE = BAU_CODIGO AND BC4_CODCRE = BAU_CODIGO ) "

IF LCRED
	CSQL += " AND (BC4_DTBLQ > '" + DBLOQUEIO + "' AND BC4_TIPO = '0' ) "
ENDIF

CSQL += "	AND " + CBAU + ".D_E_L_E_T_ = ' ' "

CSQL += "	AND BB8_FILIAL = '" + XFILIAL("BB8") + "' "
CSQL += "	AND BB8_CODIGO = BSO_CODIGO "
CSQL += "	AND BB8_CODINT = BSO_CODINT "
CSQL += "	AND BB8_CODLOC = BSO_CODLOC "
IF LCRED
	CSQL += "	AND (BB8_DATBLO = '' OR '" + DBLOQUEIO + "' < BB8_DATBLO )"
ENDIF
CSQL += "	AND " + CBB8 + ".D_E_L_E_T_ = ' ' "

PLRELRDAEXE(CSQL,@ARET)

CSQL := ""

// CHECA SE EXISTE REGISTRO DE RDA LIBERADAS SEM CONSIDERAR A BC4
CSQL := " SELECT BAU_DATBLO, BB8_DATBLO,BSO_CODINT,BSO_CODLOC,BSO_CODIGO,BSO_CODLOC, "
CSQL += "		 BAU_TIPPRE,BAU_SIGLCR,BAU_CONREG,BAU_ESTCR,BAU_TIPPE,BAU_CODBB0, "
CSQL += "		 BAU_CODIGO,BAU_NOME,BAU_TIPPRE,BAU_CPFCGC,"+CBAU+".R_E_C_N_O_ AS RECNOBAU, "
CSQL += "        BAU_TISVER,BB8_CNES,BB8_TIPLOG,BB8_NR_END,BB8_COMEND,BB8_CARSOL, "
CSQL += "		 BB8_END,BB8_CODMUN,BB8_BAIRRO,BB8_EST,BB8_CODMUN,BB8_CEP,BB8_TEL "
CSQL += "  FROM " + CBSO + "," + CBAU + "," + CBB8
CSQL += " WHERE BSO_FILIAL = '" + XFILIAL("BSO") + "' "
CSQL += "  	AND BSO_CODUSR = '" + CCODUSR + "' "
CSQL += "	AND "+CBSO+".D_E_L_E_T_ = ' ' "

CSQL += "	AND BAU_FILIAL = '"+XFILIAL("BAU")+"' "
CSQL += "	AND BAU_CODIGO = BSO_CODIGO "
IF LCRED
	CSQL += " AND (BAU_CODBLO = ' ' OR ('"+ DBLOQUEIO +"' < BAU_DATBLO OR BAU_DATBLO = ' ' )) "
ENDIF

CSQL += "	AND "+CBAU+".D_E_L_E_T_ = ' ' "

CSQL += "	AND BB8_FILIAL = '"+XFILIAL("BB8")+"' "
CSQL += "	AND BB8_CODIGO = BSO_CODIGO "
CSQL += "	AND BB8_CODINT = BSO_CODINT "
CSQL += "	AND BB8_CODLOC = BSO_CODLOC "
IF LCRED
	CSQL += "	AND (BB8_DATBLO = '' OR '" + DBLOQUEIO + "' < BB8_DATBLO )"
ENDIF
CSQL += "	AND "+CBB8+".D_E_L_E_T_ = ' ' "

PLRELRDAEXE(CSQL,@ARET)

RETURN(ARET)

/*/{PROTHEUS.DOC} PLRELCOS
RETORNA ARRAY COM CONTRATO SUBCONTRATO PARA USUARIO WEB
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04/02/12
@VERSION 1.0
/*/
FUNCTION PLRELCOS(CCODUSR)
LOCAL CSQL 	  	:= ""
LOCAL ARETOPE   := {}
LOCAL ARETEMP   := {}
LOCAL ARETCON   := {}
LOCAL ARETSUB   := {}
LOCAL ARETBEN   := {}
LOCAL AAREA   	:= GETAREA()
LOCAL DBLOQUEIO	:= FSDATECONV(DDATABASE,"YYYYMMDD")

// INDICES
B40->( DBSETORDER(1) ) //B40_FILIAL + B40_CODUSR + B40_CODEMP + B40_NUMCON + B40_VERCON + B40_SUBCON + B40_VERSUB + B40_CODINT

// NOME DAS TABELAS
CB40 := B40->(RETSQLNAME("B40"))
CBA0 := BA0->(RETSQLNAME("BA0"))
CBG9 := BG9->(RETSQLNAME("BG9"))
CBT5 := BT5->(RETSQLNAME("BT5"))
CBQC := BQC->(RETSQLNAME("BQC"))

CSQL := " SELECT B40_CODUSR,B40_CODINT,B40_CODEMP,B40_NUMCON,B40_VERCON,B40_SUBCON,B40_VERSUB, "
CSQL += "		 BA0_NOMINT, "
CSQL += "		 BG9_DESCRI, "
CSQL += "		 BT5_CODIGO,BT5_NUMCON,BT5_VERSAO,BT5_NOME,BT5_DATCON,BT5_TIPCON, "
CSQL += "		 BQC_SUBCON,BQC_VERSUB,BQC_DESCRI,BQC_VALID "
CSQL += "  FROM " + CB40 + "," + CBA0 + "," + CBG9 + "," + CBT5 + "," + CBQC

CSQL += " WHERE B40_FILIAL = '" + XFILIAL("B40") + "' "
CSQL += "  	AND B40_CODUSR = '" + CCODUSR + "' "
CSQL += "	AND " + CB40 + ".D_E_L_E_T_ = ' ' "

// OPERADORA
CSQL += "	AND BA0_FILIAL = '" + XFILIAL("BA0") + "' "
CSQL += "	AND BA0_CODIDE||BA0_CODINT = B40_CODINT "
CSQL += "	AND " + CBA0 + ".D_E_L_E_T_ = ' ' "

// EMPRESA
CSQL += "	AND BG9_FILIAL = '" + XFILIAL("BG9") + "' "
CSQL += "	AND BG9_CODINT = B40_CODINT "
CSQL += "	AND BG9_CODIGO = B40_CODEMP "
CSQL += "	AND " + CBG9 + ".D_E_L_E_T_ = ' ' "

// CONTRATO
CSQL += "	AND BT5_FILIAL = '" + XFILIAL("BT5") + "' "
CSQL += "	AND BT5_CODINT = B40_CODINT "
CSQL += "	AND BT5_CODIGO = B40_CODEMP "
CSQL += "	AND BT5_NUMCON = B40_NUMCON "
CSQL += "	AND BT5_VERSAO = B40_VERCON "
CSQL += "	AND " + CBT5 + ".D_E_L_E_T_ = ' ' "

// SUBCONTRATO
CSQL += "	AND BQC_FILIAL = '" + XFILIAL("BQC") + "' "
CSQL += "	AND BQC_CODIGO = BT5_CODINT||BT5_CODIGO "
CSQL += "	AND BQC_NUMCON = BT5_NUMCON "
CSQL += "	AND BQC_VERCON = BT5_VERSAO "
CSQL += "	AND (BQC_CODBLO = '' OR '" + DBLOQUEIO + "' < BQC_DATBLO )"

CSQL += "   AND (B40_SUBCON = '" + SPACE( TAMSX3("B40_SUBCON")[1] ) + "' OR ( B40_SUBCON <> '" + SPACE( TAMSX3("B40_SUBCON")[1] ) + "' AND B40_SUBCON = BQC_SUBCON AND B40_VERSUB = BQC_VERSUB )) "
CSQL += "	AND " + CBQC + ".D_E_L_E_T_ = ' ' "

CSQL += "	ORDER BY B40_CODINT,B40_CODEMP,B40_NUMCON,B40_VERCON,B40_SUBCON,B40_VERSUB "

// EXECUTE
DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"TRBBE",.F.,.T.)

// MONTA MATRIZ DE RETORNO
WHILE !TRBBE->( EOF() )

	// SOMENTE REGISTROS VALIDOS OPERADORA, EMPRESA, CONTRATO, SUBCONTRATO OU TODOS
	IF B40->( MSSEEK( XFILIAL("B40") + TRBBE->(B40_CODUSR + B40_CODINT + BT5_CODIGO + BT5_NUMCON + BT5_VERSAO + B40_SUBCON + B40_VERSUB) ) )

		// MATRIZ OPERADORA
		IF LEN(ARETOPE) == 0 .OR. ASCAN( ARETOPE, {|X| X[2] == TRBBE->B40_CODINT } ) == 0
			
			ARETEMP := {}
			ARETCON := {}
			ARETSUB := {}
			AADD(ARETOPE,{	{}, TRBBE->B40_CODINT, TRBBE->BA0_NOMINT } )
		ENDIF
		
		// MATRIZ EMPRESA
		IF LEN(ARETEMP) == 0 .OR. ASCAN( ARETEMP, {|X| X[2] == TRBBE->(B40_CODINT+B40_CODEMP) } ) == 0
			
			ARETCON := {}
			ARETSUB := {}
			AADD(ARETEMP,{	{}, TRBBE->(B40_CODINT+B40_CODEMP), TRBBE->BG9_DESCRI })
		ENDIF
		
		// MATRIZ CONTRATO
		IF LEN(ARETCON) == 0 .OR. ASCAN( ARETCON, {|X| X[2] == TRBBE->(B40_CODINT+B40_CODEMP+BT5_NUMCON+BT5_VERSAO) } ) == 0
			
			ARETSUB := {}
			AADD(ARETCON,{	{}, TRBBE->(B40_CODINT+B40_CODEMP+BT5_NUMCON+BT5_VERSAO),;		
								TRBBE->B40_CODINT+"."+TRBBE->B40_CODEMP+" ( "+TRBBE->BT5_NUMCON+"-"+TRBBE->BT5_VERSAO+" )",; 					//PARA MONTAGEM DO COMBO NO PORTAL
								TRBBE->BT5_TIPCON,;
								TRBBE->BT5_NUMCON,;
								TRBBE->BT5_VERSAO,;
								ALLTRIM(TRBBE->BT5_NOME),;
								CTOD(TRBBE->BT5_DATCON) })
			
		ENDIF
		
		// MATRIZ SUBCONTRATO
		IF LEN(ARETSUB) == 0 .OR. ASCAN( ARETSUB, {|X| X[2] == TRBBE->(B40_CODINT+B40_CODEMP+BT5_NUMCON+BT5_VERSAO+BQC_SUBCON+BQC_VERSUB) } ) == 0
			
			// FAMILIA IMPLEMENTACAO FUTURA
			AADD(ARETSUB,{	{}, TRBBE->(B40_CODINT+B40_CODEMP+BT5_NUMCON+BT5_VERSAO+BQC_SUBCON+BQC_VERSUB),;			//PARA MONTAGEM DO COMBO NO PORTAL
								TRBBE->B40_CODINT+"."+TRBBE->B40_CODEMP+"."+TRBBE->BT5_NUMCON+"-"+TRBBE->BT5_VERSAO+" ( "+TRBBE->BQC_SUBCON+"-"+TRBBE->BQC_VERSUB+" ) ",; //PARA MONTAGEM DO COMBO NO PORTAL
								TRBBE->BQC_SUBCON,;
								TRBBE->BQC_VERSUB,;
								ALLTRIM(TRBBE->BQC_DESCRI),;
								CTOD(TRBBE->BQC_VALID) })
		ENDIF
		
		// AMARRA SUBCONTRATO, CONTRATO E EMPRESA A OPERADORA
		ARETCON[LEN(ARETCON),1] := ACLONE(ARETSUB)
		ARETEMP[LEN(ARETEMP),1] := ACLONE(ARETCON)
		ARETOPE[LEN(ARETOPE),1] := ACLONE(ARETEMP)
		
	ENDIF
	
TRBBE->( DBSKIP() )
ENDDO

TRBBE->( DBCLOSEAREA() )

RESTAREA(AAREA)

RETURN(ARETOPE)

/*/{PROTHEUS.DOC} PLRELBEN
RETORNA ARRAY COM BENEFICIARIO PARA USUARIO WEB
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04/02/12
@VERSION 1.0
/*/
FUNCTION PLRELBEN(CCODUSR)
	LOCAL CSQL 	  	:= ""
	LOCAL CCODPLA 	:= ""
	LOCAL CVERPLA 	:= ""
	LOCAL CDESPLA 	:= ""
	LOCAL ARETOPE   := {}
	LOCAL ARETEMP   := {}
	LOCAL ARETCON   := {}
	LOCAL ARETSUB   := {}
	LOCAL ARETBEN   := {}
	LOCAL AAREA   	:= GETAREA()
	LOCAL DBLOQUEIO	:= FSDATECONV(DDATABASE,"YYYYMMDD")
	LOCAL LJURIDICO := .T.
	// NOME DAS TABELAS
	CB49 := B49->(RETSQLNAME("B49"))
	CBA1 := BA1->(RETSQLNAME("BA1"))
	CBA3 := BA1->(RETSQLNAME("BA3"))
	CBA0 := BA0->(RETSQLNAME("BA0"))
	CBG9 := BG9->(RETSQLNAME("BG9"))
	CBT5 := BT5->(RETSQLNAME("BT5"))
	CBQC := BQC->(RETSQLNAME("BQC"))
	// VERIFICA SE E PESSOA FISICA OU JURIDICA
	BA1->( DBSETORDER(2) ) //BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO
	B49->( DBSETORDER(1) ) //B49_FILIAL + B49_CODUSR + B49_BENEFI
	
	IF B49->( MSSEEK( XFILIAL("B49") + CCODUSR) )
		LJURIDICO := BA1->( MSSEEK( XFILIAL("BA1") + B49->B49_BENEFI ) ) .AND. !EMPTY(BA1->BA1_CONEMP)
	ENDIF
	// QUERY
	CSQL := " SELECT B49_CODUSR,B49_BENEFI, "
	CSQL += "		 BA1_CODINT,BA1_CODEMP,BA1_MATRIC,BA1_TIPREG,BA1_DIGITO,BA1_CONEMP,BA1_VERCON,BA1_SUBCON,BA1_VERSUB, "
	CSQL += "		 BA1_NOMUSR,BA1_DATNAS,BA1_SEXO,BA1_TIPUSU,BA1_ESTCIV,BA1_GRAUPA,BA1_DATINC, "
	CSQL += "		 BA1_CODPLA,BA1_VERSAO,BA1_DATCAR, "
	IF BA1->(FIELDPOS("BA1_RESFAM")) > 0
		CSQL += "	BA1_RESFAM AS RESFAM, "
	ELSE
		CSQL += "	'0' AS RESFAM, "
	ENDIF
	CSQL += "		 BA3_CODPLA,BA3_VERSAO, "
	CSQL += "		 BA0_NOMINT, "
	CSQL += "		 BG9_DESCRI, "
	
	IF LJURIDICO
		CSQL += "		 BT5_NOME,BT5_DATCON,BT5_TIPCON, "
		CSQL += "		 BQC_DESCRI,BQC_VALID "
	ELSE
		CSQL += "		 '' AS BT5_NOME,'' AS BT5_DATCON,'' AS BT5_TIPCON, "
		CSQL += "		 '' AS BQC_DESCRI,'' AS BQC_VALID "
	ENDIF
	
	CSQL += "  FROM "+CB49+","+CBA1+","+CBA3+","+CBA0+","+CBG9
	
	IF LJURIDICO
		CSQL += ","+CBT5+","+CBQC
	ENDIF
	
	CSQL += " WHERE B49_FILIAL = '"+XFILIAL("B49")+"' "
	CSQL += "  	AND	B49_CODUSR = '"+CCODUSR+"' "
	CSQL += "	AND "+CB49+".D_E_L_E_T_ = ' ' "
	// BENEFICIARIO
	CSQL += "	AND BA1_FILIAL = B49_FILIAL "
	CSQL += "	AND BA1_CODINT||BA1_CODEMP||BA1_MATRIC||BA1_TIPREG||BA1_DIGITO = B49_BENEFI "
	CSQL += "	AND (BA1_DATBLO = ' ' OR BA1_MOTBLO = ' ' OR '" + DBLOQUEIO + "' < BA1_DATBLO )"
	CSQL += "	AND "+CBA1+".D_E_L_E_T_ = ' ' "
	// FAMILIA
	CSQL += "	AND BA3_FILIAL = BA1_FILIAL "
	CSQL += "	AND BA3_CODINT = BA1_CODINT "
	CSQL += "	AND BA3_CODEMP = BA1_CODEMP "
	CSQL += "	AND BA3_MATRIC = BA1_MATRIC "
	CSQL += "	AND (BA3_DATBLO = ' ' OR BA3_MOTBLO = ' ' OR '" + DBLOQUEIO + "' < BA3_DATBLO )"
	CSQL += "	AND "+CBA3+".D_E_L_E_T_ = ' ' "
	// OPERADORA
	CSQL += "	AND BA0_FILIAL = BA1_FILIAL "
	CSQL += "	AND BA0_CODIDE||BA0_CODINT = BA1_CODINT "
	CSQL += "	AND "+CBA0+".D_E_L_E_T_ = ' ' "
	// EMPRESA
	CSQL += "	AND BG9_FILIAL = BA1_FILIAL "
	CSQL += "	AND BG9_CODINT = BA1_CODINT "
	CSQL += "	AND BG9_CODIGO = BA1_CODEMP "
	CSQL += "	AND "+CBG9+".D_E_L_E_T_ = ' ' "
	// VERIFICA SE E FISICA OU JURIDICA
	IF LJURIDICO
		// CONTRATO
		CSQL += "	AND BT5_FILIAL = BA1_FILIAL "
		CSQL += "	AND BT5_CODINT = BA1_CODINT "
		CSQL += "	AND BT5_CODIGO = BA1_CODEMP "
		CSQL += "	AND BT5_NUMCON = BA1_CONEMP "
		CSQL += "	AND BT5_VERSAO = BA1_VERCON "
		CSQL += "	AND "+CBT5+".D_E_L_E_T_ = ' ' "
		// SUBCONTRATO
		CSQL += "	AND BQC_CODIGO = BA1_CODINT||BA1_CODEMP "
		CSQL += "	AND BQC_NUMCON = BA1_CONEMP "
		CSQL += "	AND BQC_VERCON = BA1_VERCON "
		CSQL += "	AND BQC_SUBCON = BA1_SUBCON "
		CSQL += "	AND BQC_VERSUB = BA1_VERSUB "
		CSQL += "	AND (BQC_CODBLO = '' OR '" + DBLOQUEIO + "' < BQC_DATBLO )"
		CSQL += "	AND "+CBQC+".D_E_L_E_T_ = ' ' "
	ENDIF
	// ORDER
	CSQL += " ORDER BY B49_BENEFI "
	// EXECUTE
	CSQL := CHANGEQUERY(CSQL)
	DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQL),"TRBBE",.F.,.T.)
	// MONTA MATRIZ DE RETORNO
	WHILE !TRBBE->( EOF() )
		// MATRIZ OPERADORA
		IF LEN(ARETOPE)==0 .OR. ASCAN( ARETOPE, {|X| X[2] == TRBBE->BA1_CODINT } ) == 0
			
			ARETEMP := {}
			ARETCON := {}
			ARETSUB := {}
			AADD(ARETOPE,{	{},;
				TRBBE->BA1_CODINT,;
				TRBBE->BA0_NOMINT } )
		ENDIF
		// MATRIZ EMPRESA
		IF LEN(ARETEMP)==0 .OR. ASCAN( ARETEMP, {|X| X[2] == TRBBE->(BA1_CODINT+BA1_CODEMP) } ) == 0
			
			ARETCON := {}
			ARETSUB := {}
			AADD(ARETEMP,{	{},;
				TRBBE->(BA1_CODINT+BA1_CODEMP),;
				TRBBE->BG9_DESCRI })
		ENDIF
		// MATRIZ CONTRATO
		IF LEN(ARETCON)==0 .OR. ASCAN( ARETCON, {|X| X[2] == TRBBE->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON) } ) == 0
			
			ARETSUB := {}
			AADD(ARETCON,{	{},;
				TRBBE->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON),;		//PARA MONTAGEM DO COMBO NO PORTAL
			TRBBE->BA1_CODINT+"."+TRBBE->BA1_CODEMP+" ( "+TRBBE->BA1_CONEMP+"-"+TRBBE->BA1_VERCON+" )",; 					//PARA MONTAGEM DO COMBO NO PORTAL
			TRBBE->BT5_TIPCON,;
				TRBBE->BA1_CONEMP,;
				TRBBE->BA1_VERCON,;
				ALLTRIM(TRBBE->BT5_NOME),;
				CTOD(TRBBE->BT5_DATCON) })
			
		ENDIF
		// MATRIZ SUBCONTRATO
		IF LEN(ARETSUB)==0 .OR. ASCAN( ARETSUB, {|X| X[2] == TRBBE->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON+BA1_SUBCON+BA1_VERSUB) } ) == 0
			
			AADD(ARETSUB,{	{},;
				TRBBE->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON+BA1_SUBCON+BA1_VERSUB),;			//PARA MONTAGEM DO COMBO NO PORTAL
			TRBBE->BA1_CODINT+"."+TRBBE->BA1_CODEMP+"."+TRBBE->BA1_CONEMP+"-"+TRBBE->BA1_VERCON+" ( "+TRBBE->BA1_SUBCON+"-"+TRBBE->BA1_VERSUB+" ) ",; //PARA MONTAGEM DO COMBO NO PORTAL
			TRBBE->BA1_SUBCON,;
				TRBBE->BA1_VERSUB,;
				ALLTRIM(TRBBE->BQC_DESCRI),;
				CTOD(TRBBE->BQC_VALID) })
		ENDIF
		// MATRIZ FAMILIA
		IF LEN(ARETBEN)==0 .OR. ASCAN( ARETBEN, {|X| X[2] == TRBBE->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO) } ) == 0
			// SE PEGA DA FAMILIA OU DO USUARIO
			CCODPLA := IIF(EMPTY(TRBBE->BA3_CODPLA),TRBBE->BA1_CODPLA,TRBBE->BA3_CODPLA)
			CVERPLA := IIF(EMPTY(TRBBE->BA3_VERSAO),TRBBE->BA1_VERSAO,TRBBE->BA3_VERSAO)
			CDESPLA := ALLTRIM( POSICIONE("BI3",1,XFILIAL("BI3")+TRBBE->(BA1_CODINT) + CCODPLA + CVERPLA,"BI3_DESCRI") )
			// MATRIZ DE FAMILIA
			AADD(ARETBEN,{	TRBBE->B49_BENEFI,;							//01
							ALLTRIM(TRBBE->BA1_NOMUSR),;				//02
							TRBBE->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC),;//03
							CTOD(TRBBE->BA1_DATNAS),;					//04
							CVALTOCHAR(DATEDIFFYEAR(DDATABASE,BA1->BA1_DATNAS)),;//05
							TRBBE->BA1_SEXO,;							//06
							TRBBE->BA1_TIPUSU,;							//07
							ALLTRIM(POSICIONE("BIH",1,XFILIAL("BIH")+TRBBE->BA1_TIPUSU,"BIH_DESCRI")),;//08
							TRBBE->BA1_ESTCIV,;							//09
							TRBBE->BA1_GRAUPA,;							//10
							CTOD(TRBBE->BA1_DATINC),;					//11
							CCODPLA,;									//12
							CDESPLA,;									//13
							CVERPLA,;									//14
							CTOD(TRBBE->BA1_DATCAR),;					//15
							TRBBE->RESFAM })						//16
		ENDIF
		// AMARRA FAMILIA, SUBCONTRATO, CONTRATO E EMPRESA A OPERADORA
		ARETSUB[LEN(ARETSUB),1] := ACLONE(ARETBEN)
		ARETCON[LEN(ARETCON),1] := ACLONE(ARETSUB)
		ARETEMP[LEN(ARETEMP),1] := ACLONE(ARETCON)
		ARETOPE[LEN(ARETOPE),1] := ACLONE(ARETEMP)
		
		TRBBE->( DBSKIP() )
	ENDDO
	// FECHAMENTO DA AREA DE TRABALHO
	TRBBE->( DBCLOSEAREA() )
	// RETORNA AREA CORRENTE
	RESTAREA(AAREA)
RETURN(ARETOPE)

/*/{PROTHEUS.DOC} PLPROFSAUD
RETORNA ARRAY COM PROFISSIONAIS DE SAUDE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 01/03/07
@VERSION 1.0
/*/
FUNCTION PLPROFSAUD(CCODRDA,CCODLOC,CBUSCA,CTIPOBUSCA,NTP, CTIPGUI)
LOCAL NII		:= 0
LOCAL ARET      := {}
LOCAL CSQL      := ""
LOCAL CNAMEBC1  := BC1->(RETSQLNAME("BC1"))
LOCAL CNAMEBB0  := BB0->(RETSQLNAME("BB0"))
LOCAL COLDALIAS := ALIAS()

LOCAL AAREABAU	:= {}
LOCAL AAREABB0	:= {}

LOCAL CCODPROF  := ""
LOCAL CTIPORDA  := ""
LOCAL LFILTPRFS := GETNEWPAR("MV_PLSPRFS",.T.)// .T. FILTRA SOLICITANTES - .F.  LISTA TODOS
LOCAL NQTDPROF  := GETNEWPAR("MV_PLSQTPF",50)
LOCAL LLSESPBAQ := GETNEWPAR("MV_PLSESPP",.T.) //LISTA AS ESPECIALIDADES DA BAX COM DESC DA BAQ
LOCAL AESPECI   := {}
LOCAL NPOS		:= 0
LOCAL CINTPAD 	:= PLSINTPAD()
LOCAL CSQL1		:= ""
LOCAL CSQL2     := ""
LOCAL AAREABAX := BAX->(GETAREA())
LOCAL AAREABAQ := BAQ->(GETAREA())

DEFAULT CCODLOC 	:= ""
DEFAULT CCODRDA 	:= ""
DEFAULT CBUSCA		:= ""
DEFAULT CTIPOBUSCA 	:= "1"
DEFAULT NTP			:= 1 //DETERMINA SE IRÁ VALIDAR O PARAMETRO MV_PLSPRFS OU O MV_PLSPRFX : 1 - SOLICITANTE 2 - EXECUTANTE
DEFAULT CTIPGUI 	:= ""

IF BAU->BAU_CODIGO <> CCODRDA
	
	AAREABAU := BAU->(GETAREA())
	
	BAU->(DBSETORDER(1))
	IF BAU->(DBSEEK(XFILIAL("BAU")+CCODRDA))
		CTIPORDA := BAU->BAU_TIPPE
		CCODPROF := BAU->BAU_CODBB0
	ENDIF
	
	BAU->(RESTAREA(AAREABAU))
	
ELSE
	CTIPORDA := BAU->BAU_TIPPE
	CCODPROF := BAU->BAU_CODBB0
ENDIF

//PARA GUIA DE SADT POSSO SELECIONAR OUTROS PROFISSIONAIS MESMO QUE SEJA PF
IF CTIPORDA == "J"  .OR. CTIPGUI == "2"
	
	// PEGA OS PROFISSIONAIS DE SAUDE QUE NAO ESTAO BLOQUEADOS
	//VERIFICA SE OS DOIS PARÂMETROS DE FILTRO DE PROFISSIONAIS ESTÃO ATIVOS, SE PELO MENOS 1 DELES ESTIVER .F., CARREGA TODOS OS PROFISSIONAIS NA SESSION PROSAUD.
	LFILTPRFS := IIF((NTP == 2 .AND. GETNEWPAR("MV_PLSPRFX",.T.)), .T., IIF(NTP == 1 .AND. GETNEWPAR("MV_PLSPRFS",.T.), .T., .F.))
	
	// NÃO FAZ SENTIDO FILTRAR CORPO CLINICO PARA RDA PESSOA F
	IF LFILTPRFS .AND. CTIPORDA == "J"
		
		CSQL := " SELECT DISTINCT BB0_FILIAL,BB0_NOME NOME,BB0_CGC CGC,BB0_CODOPE CODOPE,BC1_CODPRF CODPRF,BC1_SIGLCR SIGLCR,BC1_NUMCR NUMCR ,BC1_ESTCR ESTCR"
		CSQL += "   FROM " + CNAMEBB0 + "," + CNAMEBC1
		CSQL += "  WHERE BC1_FILIAL = '" + XFILIAL("BC1") + "' "
		CSQL += "    AND BC1_CODIGO = '" + CCODRDA + "' "
		CSQL += "    AND BC1_CODINT = '" + CINTPAD + "' "
		
		IF ! EMPTY(CCODLOC)
			CSQL += " AND BC1_CODLOC = '" + CCODLOC + "' "
		ENDIF
		
		CSQL += " AND BB0_FILIAL = '" + XFILIAL("BB0") + "' "
		CSQL += " AND BB0_CODIGO = BC1_CODPRF "
		CSQL += " AND (BC1_DATBLO = ''  OR BC1_DATBLO > '" + DTOS(DDATABASE) + "' ) "
		CSQL += " AND " + CNAMEBB0 + ".D_E_L_E_T_ = ' ' "
		CSQL += " AND " + CNAMEBC1 + ".D_E_L_E_T_ = ' ' "
		
		IF EXISTBLOCK("PLFILBC1")
			CSQL += EXECBLOCK("PLFILBC1",.F.,.F.)
		ENDIF
		
		IF ! EMPTY(CBUSCA)
			
			IF CTIPOBUSCA == "1"
				CSQL += " AND BB0_NOME LIKE '" + UPPER(CBUSCA) + "%' "
			ELSEIF CTIPOBUSCA == "2"
				CSQL += " AND BB0_CODIGO = '" + ALLTRIM(CBUSCA) + "' "
			ENDIF
			
		ENDIF
		
		CSQL += " ORDER BY BB0_NOME "
		
	ELSE
		
		CSQL := " SELECT DISTINCT BB0_FILIAL,BB0_NOME NOME,BB0_CGC CGC,BB0_CODOPE CODOPE,BB0_CODIGO CODPRF,BB0_CODSIG SIGLCR ,BB0_NUMCR NUMCR,BB0_ESTADO ESTCR "
		CSQL += "   FROM " + RETSQLNAME("BB0") + "  "
		CSQL += "  WHERE BB0_FILIAL = '" + XFILIAL("BB0") + "' "
		CSQL += "    AND D_E_L_E_T_ = ' ' "
		
		IF ! EMPTY(CBUSCA)
			
			IF CTIPOBUSCA == "1"
				CSQL += " AND BB0_NOME LIKE '" + UPPER(CBUSCA) + "%' "
			ELSEIF CTIPOBUSCA == "2"
				CSQL += " AND BB0_CODIGO = '" + ALLTRIM(CBUSCA) + "' "
			ENDIF
			
		ENDIF
		
		CSQL += " ORDER BY BB0_NOME "
		
	ENDIF
	
	// VERIFICA SE TEM QUERY A SER EXECUTADA
	IF ! EMPTY(CSQL)
		
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"TRBBC1PROF",.T.,.F.)
		
		BQ1->(DBSETORDER(1))
		
		WHILE ! TRBBC1PROF->(EOF())
			
			// CHECA SE ESTA BLOQUEADO
			IF A090CHEBLO(TRBBC1PROF->CODPRF,DDATABASE,.F.)  .AND. ! EMPTY(TRBBC1PROF->CODPRF)
				
				NII++
				// CONTROLA A QUANTIDADE DE REGISTRO QUE DEVE SER RETORNADO
				IF NQTDPROF > 0 .AND. NII > NQTDPROF
					EXIT
				ENDIF
				
				AESPECI := {}
				
				//UTILIZA A MESMA CONSULTA AO BANCO CASO ATENDA AS DUAS CONDIÇÕES.
				IF BQ1->(MSSEEK(XFILIAL("BQ1")+TRBBC1PROF->CODPRF)) .AND. LLSESPBAQ
					
					CSQL1 := "SELECT BAQ_CODESP, BAQ_DESCBO "
					CSQL1 += "  FROM " + RETSQLNAME("BQ1")
					
					CSQL1 += " INNER JOIN " + RETSQLNAME("BAQ")
					CSQL1 += "         ON BAQ_FILIAL = '" + XFILIAL("BAQ")  + "' "
					CSQL1 += "        AND BAQ_CODINT = BQ1_CODINT "
					CSQL1 += "        AND BAQ_CODESP = BQ1_CODESP "
					CSQL1 += "        AND " + RETSQLNAME("BAQ") + ".D_E_L_E_T_ = ' ' "
					
					CSQL1 += " WHERE BQ1_FILIAL = '" + XFILIAL("BQ1")  + "' "
					CSQL1 += "   AND BQ1_CODIGO = '" + TRBBC1PROF->CODPRF + "' "
					CSQL1 += "   AND " + RETSQLNAME("BQ1") + ".D_E_L_E_T_ = ' ' "
					
					IF !LFILTPRFS
						
						BAX->(DBSETORDER(1)) //BAX_FILIAL+BAX_CODIGO+BAX_CODINT+BAX_CODLOC+BAX_CODESP+BAX_CODSUB
						IF BAX->( MSSEEK( XFILIAL("BAX")+ CCODRDA + CINTPAD + CCODLOC ) )
							
							CSQL1 += "UNION ALL "
							
							CSQL1 += "SELECT BAQ_CODESP, BAQ_DESCBO "
							CSQL1 += "  FROM " + RETSQLNAME("BAX")
							
							CSQL1 += " INNER JOIN " + RETSQLNAME("BAQ")
							CSQL1 += "         ON BAQ_FILIAL = '" + XFILIAL("BAQ")  + "' "
							CSQL1 += "        AND BAQ_CODINT = BAX_CODINT "
							CSQL1 += "        AND BAQ_CODESP = BAX_CODESP "
							CSQL1 += "        AND " + RETSQLNAME("BAQ") + ".D_E_L_E_T_ = ' ' "
							
							CSQL1 += "      WHERE BAX_FILIAL = '" + XFILIAL("BAX")  + "' "
							CSQL1 += "        AND BAX_CODIGO = '" + CCODRDA + "' "
							CSQL1 += "        AND BAX_CODINT = '" + CINTPAD + "' "
							CSQL1 += "        AND BAX_CODLOC = '" + CCODLOC + "' "
							CSQL1 += "        AND ( BAX_DATBLO > '" + DTOS(DDATABASE) + "' OR  BAX_DATBLO = '' ) "
							CSQL1 += "        AND " + RETSQLNAME("BAX") + ".D_E_L_E_T_ = ' ' "
							
							CSQL1 += " ORDER BY BAQ_DESCBO "
							
						ENDIF
						
					ENDIF
					
					DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL1)),"TRBBQ1",.T.,.F.)
					
					WHILE !TRBBQ1->(EOF())
						
						NPOS := ASCAN(AESPECI, {|X|ALLTRIM(X[2]) == ALLTRIM(TRBBQ1->BAQ_DESCBO)})
						
						IF NPOS == 0
							AADD(AESPECI,{TRBBQ1->BAQ_CODESP,TRBBQ1->BAQ_DESCBO})
						ENDIF
						
						TRBBQ1->(DBSKIP())
					ENDDO
					
					TRBBQ1->(DBCLOSEAREA())
					
				ELSE
					
					IF LFILTPRFS .AND. LLSESPBAQ
						
						IF BAX->( MSSEEK( XFILIAL("BAX")+ CCODRDA + CINTPAD+ CCODLOC ) )
							
							CSQL2 := "SELECT BAQ_CODESP, BAQ_DESCBO "
							CSQL2 += "  FROM " + RETSQLNAME("BAX")
							
							CSQL2 += "  INNER JOIN " + RETSQLNAME("BAQ")
							CSQL2 += "          ON BAQ_FILIAL = '" + XFILIAL("BAQ")  + "' "
							CSQL2 += "         AND BAQ_CODINT = BAX_CODINT "
							CSQL2 += "         AND BAQ_CODESP = BAX_CODESP "
							CSQL2 += "         AND " + RETSQLNAME("BAQ") + ".D_E_L_E_T_ = ' ' "
							
							CSQL2 += "       WHERE BAX_FILIAL = '" + XFILIAL("BAX")  + "' "
							CSQL2 += "         AND BAX_CODIGO = '" + CCODRDA + "' "
							CSQL2 += "         AND BAX_CODINT = '" + CINTPAD + "' "
							CSQL2 += "         AND BAX_CODLOC = '" + CCODLOC + "' "
							CSQL2 += "         AND (BAX_DATBLO > '" + DTOS(DDATABASE) + "' OR  BAX_DATBLO = '') "
							CSQL2 += "         AND " + RETSQLNAME("BAX") + ".D_E_L_E_T_ = ' ' "
							
							CSQL2 += " ORDER BY BAQ_DESCBO "
							
							DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL2)),"TRBBAX",.T.,.F.)
							
							WHILE !TRBBAX->(EOF())
								
								NPOS := ASCAN(AESPECI, {|X|ALLTRIM(X[2]) == ALLTRIM(TRBBAX->BAQ_DESCBO)})
								
								IF NPOS == 0
									AADD( AESPECI,{TRBBAX->BAQ_CODESP,TRBBAX->BAQ_DESCBO} )
								ENDIF
								
							TRBBAX->(DBSKIP())
							ENDDO
							
							TRBBAX->(DBCLOSEAREA())
						ENDIF
						
					ELSE
						
						BAX->( DBSETORDER(1) ) //BAX_FILIAL + BAX_CODIGO + BAX_CODINT + BAX_CODLOC + BAX_CODESP + BAX_CODSUB
						BAQ->( DBSETORDER(1) ) //BAQ_FILIAL + BAQ_CODINT + BAQ_CODESP
						
						IF BAX->( MSSEEK( XFILIAL("BAX")+ CCODRDA + CINTPAD+ CCODLOC ) )
							
							IF BAQ->( MSSEEK( XFILIAL("BAQ")+BAX->BAX_CODINT) ) .AND. (EMPTY(BAX->BAX_DATBLO) .OR. DDATABASE < BAX->BAX_DATBLO)
								
								WHILE ! BAQ->( EOF() )
									
									IF ! EMPTY(BAQ->BAQ_CBOS)
										
										NPOS := ASCAN( AESPECI, {|X|ALLTRIM(X[2]) == ALLTRIM(BAQ->BAQ_DESCBO)})
										
										IF NPOS == 0
											AADD(AESPECI,{BAQ->BAQ_CODESP,BAQ->BAQ_DESCBO})
											
										ENDIF
									ENDIF
									
								BAQ->( DBSKIP() )
								ENDDO
								
							ENDIF
							
						ENDIF
						
					ENDIF
					
				ENDIF
				
				// MONTA ARRAY DE RETORNO
				AADD( ARET,{ 	TRBBC1PROF->CODPRF,;
								TRBBC1PROF->NOME,;
								TRBBC1PROF->SIGLCR,;
								TRBBC1PROF->NUMCR,;
								TRBBC1PROF->ESTCR,;
								TRBBC1PROF->CGC,;
								TRBBC1PROF->CODOPE,;
								BAU->BAU_CODIGO,;
								BAU->BAU_NREDUZ,;
								BAU->BAU_CPFCGC,;
								BAU->BAU_CNES,;
								AESPECI} )
			ENDIF
			
			TRBBC1PROF->( DBSKIP() )
		ENDDO
		
		TRBBC1PROF->( DBCLOSEAREA() )
	ENDIF
	
ELSE
	
	IF CCODPROF <> BB0->BB0_CODIGO .OR. BB0->BB0_FILIAL <> XFILIAL("BB0")
		
		AAREABB0 := BB0->(GETAREA())
		
		BB0->( DBSETORDER(1) )
		IF ! BB0->( DBSEEK(XFILIAL("BB0") + CCODPROF) )
			FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',STR0050 + CCODPROF + STR0051+CCODRDA , 0, 0, {})//"PROF. DE SAUDE NÃO ENCONTRADO ->"###" RDA -> "
		ENDIF
		
	ENDIF
	
	AESPECI := {}
	
	IF ! LLSESPBAQ
		
		BAQ->( DBSETORDER(1) )
		IF BAQ->( MSSEEK( XFILIAL("BAQ")+CINTPAD) )
			
			WHILE !BAQ->( EOF() )
				
				IF ! EMPTY(BAQ->BAQ_CBOS)
					
					NPOS := ASCAN( AESPECI, {|X|ALLTRIM(X[2]) == ALLTRIM(BAQ->BAQ_DESCBO)})
					
					IF NPOS == 0
						AADD(AESPECI,{BAQ->BAQ_CODESP,BAQ->BAQ_DESCBO})
					ENDIF
					
				ENDIF
				
			BAQ->( DBSKIP() )
			ENDDO
			
		ENDIF
		
	ELSE
		
		// CONFORME PARAMETRO MV_PLSESPP ATIVADO O SISTEMA DEVERA SEGUIR AS TABELAS ABAIXO PARA CARREGAR AS ESPECIALIDADES.
		
		BAX->( DBSETORDER(1) ) //BAX_FILIAL + BAX_CODIGO + BAX_CODINT + BAX_CODLOC + BAX_CODESP + BAX_CODSUB
		BAQ->( DBSETORDER(1) ) //BAQ_FILIAL + BAQ_CODINT + BAQ_CODESP
		BQ1->( DBSETORDER(1) )

		IF  BB0->( DBSEEK(XFILIAL("BB0") + CCODPROF) )
							
			IF BAX->( MSSEEK( XFILIAL("BAX")+ CCODRDA + CINTPAD+ CCODLOC ) )
			
				IF BAQ->( MSSEEK( XFILIAL("BAQ")+BAX->(BAX_CODINT+BAX_CODESP) ) ) .AND. (EMPTY(BAX->BAX_DATBLO) .OR. DDATABASE < BAX->BAX_DATBLO)
					IF ! EMPTY(BAQ->BAQ_CBOS)
											
						NPOS := ASCAN( AESPECI, {|X|ALLTRIM(X[2]) == ALLTRIM(BAQ->BAQ_DESCBO)})
											
						IF NPOS == 0
							AADD(AESPECI,{BAQ->BAQ_CODESP,BAQ->BAQ_DESCBO})
						ENDIF
					ENDIF
									
				ENDIF
								
			ENDIF
		ENDIF
		
	ENDIF
	
	AADD( ARET,{ 	BB0->BB0_CODIGO,;
					BB0->BB0_NOME,;
					BB0->BB0_CODSIG,;
					BB0->BB0_NUMCR,;
					BB0->BB0_ESTADO,;
					BB0->BB0_CGC,;
					BB0->BB0_CODOPE,;
					BAU->BAU_CODIGO,;
					BAU->BAU_NREDUZ,;
					BAU->BAU_CPFCGC,;
					BAU->BAU_CNES,;
					AESPECI} )
	BB0->(RESTAREA(AAREABB0))
	
ENDIF

RESTAREA(AAREABAX)
RESTAREA(AAREABAQ)

RETURN(ARET)

/*/{PROTHEUS.DOC} PROFALL
RETORNA ARRAY COM PROFISSIONAIS DE SAUDE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 30/07/13
@VERSION 1.0
/*/
FUNCTION PROFALL(CBUSCA)
LOCAL NII		:= 0
LOCAL ARET      := {}
LOCAL CSQL      := ""
LOCAL COLDALIAS := ALIAS()
LOCAL NORDBAU   := BAU->(INDEXORD())
LOCAL NRECBAU   := BAU->(RECNO())
LOCAL NORDBB0   := BB0->(INDEXORD())
LOCAL NRECBB0   := BB0->(RECNO())
LOCAL CCODPROF  := ""
LOCAL CTIPORDA  := ""
LOCAL NQTDPROF  := GETNEWPAR("MV_PLSQTPF",50)
LOCAL AESPECI   := {}
DEFAULT CBUSCA	:= ""


CSQL := " SELECT DISTINCT BB0_FILIAL,BB0_NOME NOME,BB0_CGC CGC,BB0_CODOPE CODOPE,BB0_CODIGO CODPRF,BB0_CODSIG SIGLCR ,BB0_NUMCR NUMCR,BB0_ESTADO ESTCR "
CSQL += " FROM "+RETSQLNAME("BB0")+"  "
CSQL += " WHERE BB0_FILIAL = '"+XFILIAL("BB0")+"' "
CSQL += " AND D_E_L_E_T_ = ' ' "

IF !EMPTY(CBUSCA)
	CSQL += " AND BB0_NOME LIKE '" + UPPER(CBUSCA) + "%' "
ENDIF
CSQL += " ORDER BY BB0_FILIAL, BB0_NOME "
// VERIFICA SE TEM QUERY A SER EXECUTADA
IF !EMPTY(CSQL)
	
	PLSQUERY(CSQL,"TRBBC1PROF")
	
	WHILE ! TRBBC1PROF->(EOF())
		// CHECA SE ESTA BLOQUEADO
		IF A090CHEBLO(TRBBC1PROF->CODPRF,DDATABASE,.F.)  .AND. !EMPTY(TRBBC1PROF->CODPRF)
			
			NII++
			// CONTROLA A QUANTIDADE DE REGISTRO QUE DEVE SER RETORNADO
			IF NQTDPROF > 0 .AND. NII > NQTDPROF
				EXIT
			ENDIF
			
			AESPECI := {}
			BQ1->(DBSETORDER(1))
			IF BQ1->(MSSEEK(XFILIAL("BQ1")+TRBBC1PROF->CODPRF))
				WHILE !BQ1->(EOF()) .AND. ALLTRIM(XFILIAL("BQ1")+TRBBC1PROF->CODPRF) == ALLTRIM(BQ1->(BQ1_FILIAL+BQ1_CODIGO))
					AADD(AESPECI,{BQ1->BQ1_CODESP,BQ1->BQ1_DESCRI})
					BQ1->(DBSKIP())
				ENDDO
			ENDIF

			// MONTA ARRAY DE RETORNO
			AADD( ARET,{ TRBBC1PROF->CODPRF,;
				TRBBC1PROF->NOME,;
				TRBBC1PROF->SIGLCR,;
				TRBBC1PROF->NUMCR,;
				TRBBC1PROF->ESTCR,;
				TRBBC1PROF->CGC,;
				TRBBC1PROF->CODOPE,;
				BAU->BAU_CODIGO,;
				BAU->BAU_NREDUZ,;
				BAU->BAU_CPFCGC,;
				BAU->BAU_CNES,;
				AESPECI} )
		ENDIF
		TRBBC1PROF->( DBSKIP() )
	ENDDO
	TRBBC1PROF->( DBCLOSEAREA() )
ENDIF

IF ! EMPTY(COLDALIAS)
	DBSELECTAREA(COLDALIAS)
ENDIF
RETURN(ARET)

/*/{PROTHEUS.DOC} PLVLDREQ
VALIDA O REQUISITANTE. VERIFICA SE O REQUISITANTE ESTA CADASTRADO
EM BB0-PROFISSIONAIS DE SAUDE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04/11/04
@VERSION 1.0
/*/
FUNCTION PLVLDREQ(CNUMREQ)
LOCAL LRET := .T.
LOCAL CMSG := ""
LOCAL CNOM := ""
// VERIFICA PARAMETRO RECEBIDO
IF  CNUMREQ == NIL
	CMSG := STR0038 //"REQUISITANTE NAO INFORMADO"
	LRET := .F.
ELSE
	// PONTO DE ENTRADA PARA VALIDACAO DO REQUISITANTE
	// REGRA ESPECIFICA DO CLIENTE
	IF  EXISTBLOCK("PLVLDREQ")
		RETURN(EXECBLOCK("PLVLDREQ",.F.,.F.,CNUMREQ))
	ELSE
		// VALIDA EQUIPAMENTO X LOCAL X RDA
		BB0->(DBSETORDER(5)) // CODIGO ORIGINAL (ANTERIOR)
		IF  ! BB0->(MSSEEK(XFILIAL("BB0")+CNUMREQ))
			CMSG := STR0039 //"REQUISITANTE NAO CADASTRADO"
			LRET := .F.
		ELSE
			CNOM := BB0->BB0_NOME
			IF BB0->(FIELDPOS("BB0_CODBLO")) > 0
				LRET := A090CHEBLO(BB0->BB0_CODIGO,DATE(),.F.)
				IF ! LRET
					CMSG := STR0040 //"REQUISITANTE BLOQUEADO"
				ENDIF
			ENDIF
		ENDIF
	ENDIF
ENDIF
RETURN({LRET,CMSG,CNOM})

/*/{PROTHEUS.DOC} PLVLDUSRW
VALIDA O USUARIO WEB. VERIFICA SE O USUARIO/SENHA INFORMADOS ESTAO CORRETOS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04/11/04
@VERSION 1.0
/*/
FUNCTION PLVLDUSRW(CLOGUSR,CSENHAPLS)
LOCAL AAREA		:= GETAREA()
LOCAL LRET    	:= .T.
LOCAL CMSG    	:= ""
LOCAL NTAM    	:= TAMSX3("BSW_LOGUSR")[1]
LOCAL NINDDAT 	:= GETNEWPAR("MV_INTDAT",30)
LOCAL NTP		:= 1
LOCAL CCODUSR 	:= ""
LOCAL CCODACE 	:= ""
LOCAL CEMAIL  	:= ""
LOCAL CTIPCAR 	:= "0"
LOCAL CBIOMET	:= "0"
LOCAL CBIOCAD	:= "0|"+GETNEWPAR("MV_BIOVMD","0")
LOCAL LTRET		:= .F.
LOCAL CMODBIO	:= GETNEWPAR("MV_BIOVLDR","1") //1=NITGEN / 2=BIOTOUCH / 3=DIGITALPERSONA / 4=GRIAULE
LOCAL ARET	  	:= {}
LOCAL AATALHOS 	:= {}
LOCAL CCAMINHO	:= ""
LOCAL CCODMNU	:= ""
LOCAL LACHOU 	:= .F.
LOCAL CCODPOR	:= ""

// TIPO DE DRIVE CONFORME PARAMETRO
DO CASE
	CASE CMODBIO == '1'
		CMODBIO = "NITGEN"
	CASE CMODBIO == '2'
		CMODBIO = "BIOTOUCH"
	CASE CMODBIO == '3'
		CMODBIO = "DIGITALPERSONA"
	CASE CMODBIO == '3'
		CMODBIO = "GRIAULE"
ENDCASE

// COMO NAO E GARANTIDO QUE O USUARIO EFETUE O LOGOFF LIMPO AS SESSOES NO LOGIN
HTTPFREESESSION()

// CRIPTOGRAVA A SENHA
IF FINDFUNCTION("PLSCRIDEC")
	CSENHAPLS := PLSCRIDEC(1,ALLTRIM(CSENHAPLS))
ENDIF

// PONTO DE ENTRADA PARA TRATAMENTO DO LOGIN DIFERENCIADO
IF EXISTBLOCK("PLLOGDIF")
	CLOGUSR := EXECBLOCK("PLLOGDIF",.F.,.F.,CLOGUSR)
ENDIF

// ATRIBUI VALOR
CLOGUSR := ALLTRIM(CLOGUSR)
CLOGUSR := CLOGUSR + SPACE( NTAM - LEN(CLOGUSR) )

// VALIDA USUARIO/SENHA
BSW->( DBSETORDER(1) ) //BSW_FILIAL + BSW_LOGUSR
IF  BSW->(MSSEEK(XFILIAL("BSW")+CLOGUSR))

	CCODUSR := BSW->BSW_CODUSR

	// VERIFICA SE A SENHA GRAVADA UTILIZA HASH MD5
	IF LEN(ALLTRIM(BSW->BSW_SENHA)) = 32
		CSENHABSW := BSW->BSW_SENHA
	ELSE
		CSENHABSW := PLSCRIDEC(2,ALLTRIM(BSW->BSW_SENHA))
	ENDIF

	IF ALLTRIM(CSENHABSW) == ALLTRIM(CSENHAPLS)

		LRET := .T.

		ARETSEN := PLVLDSDT()
		
		IF ARETSEN[1]
			CMSG := "SENHA EXPIRADA, FAVOR PROCURAR O ADMINISTRADOR DO SISTEMA PARA CADASTRAR UMA NOVA SENHA"
			LRET := .F.
		ELSE
			
			LTRET	:= PLSVLTNT()
			
			IF 	LTRET
				CMSG	:= "TENTATIVA DE LOGIN ULTRAPASSOU O LIMITE PERMITIDO, FAVOR TENTAR APÓS 5 MINUTOS...!!!"
				LRET    := .F.
			ELSE
				LRET := .T.
			ENDIF
			
		ENDIF
		
	ENDIF
	
	IF  !(ALLTRIM(CSENHABSW) == ALLTRIM(CSENHAPLS))
		
		LTRET := PLSVLTNT()
		
		IF 	LTRET
			CMSG	:= "TENTATIVA DE LOGIN ULTRAPASSOU O LIMITE PERMITIDO, FAVOR TENTAR APÓS 5 MINUTOS...!!!"
			LRET    := .F.
		ELSE
			CMSG    := STR0041 //"SENHA INVALIDA"
			LRET    := .F.
		ENDIF
		
	ELSEIF EMPTY(BSW->BSW_CODACE)
		
		LTRET	:= PLSVLTNT()
		
		IF 	LTRET
			CMSG	:= "TENTATIVA DE LOGIN ULTRAPASSOU O LIMITE PERMITIDO, FAVOR TENTAR APÓS 5 MINUTOS...!!!"
			LRET    := .F.
		ELSE
			CMSG    := STR0050 //"NÃO FOI DEFINIDO DIREITO PARA ESTE USUÁRIO"
			LRET    := .F.
		ENDIF
		
	ELSE
	
		// CODIGO DO USUARIO
		CCODUSR := BSW->BSW_CODUSR
		
		// CODIGO DE ACESSO PARA MONTAR MENUS
		CCODACE := BSW->BSW_CODACE
		
		// E-MAIL PARA O CASO DE ESQUECER A SENHA
		CEMAIL := BSW->BSW_EMAIL
		
		// TIPO DE ACESSO CARTAO OU MATRICULA
		CTIPCAR := BSW->BSW_TIPCAR
		
		// VALIDACAO BIOMETRICA
		CBIOMET := BSW->BSW_BIOMET
		
		// PERMITE CADASTRAR BIOMETRIA VIA PORTAL
		IF BSW->( FIELDPOS("BSW_BIOCAD") ) > 0
			CBIOCAD :=  STRTRAN(CBIOCAD,SUBSTR(CBIOCAD,0,1),BSW->BSW_BIOCAD,1,1)
		ENDIF
		
		// VERIFICA O TIPO DO PORTAL
		NTP := VAL(BSW->BSW_TPPOR)
		
		// MONTA RETORNO CONFORME O TIPO DO PORTAL
		DO CASE
			// VERIFICA SE TEM ALGUM PRESTADOR PARA O USUARIO
			CASE NTP == 1
			
				ARET := PLRELRDA(CCODUSR)
			
				IF EMPTY(ARET)
					CMSG := STR0051 //"NÃO ENCONTRADO PRESTADOR PARA ESTE USUÁRIO"
					LRET := .F.
				ELSEIF !VLDBLQFUT(CCODUSR)
					CMSG := "A REDE DE ATENDIMENTO ESTÁ BLOQUEADA/SUSPENSA"
					LRET := .F.
				ENDIF
				
			// VERIFICA SE TEM OPERADORA EMPRESA CONTRATO SUBCONTRATO PARA O USUARIO
			CASE NTP == 2
			
				ARET := PLRELCOS(CCODUSR)
				
				IF EMPTY(ARET)
					CMSG := "NÃO ENCONTRADO CONTRATO/SUB-CONTRATO PARA ESTE USUÁRIO"
					LRET := .F.
				ENDIF
				
			// VERIFICA SE TEM ALGUM BENEFICIARIO PARA O USUARIO
			CASE NTP == 3
				
				B49->(DBSETORDER(1))
				IF B49->(DBSEEK(XFILIAL("B49")+CCODUSR))
				
					IF !LEN(ALLTRIM(B49->B49_BENEFI)) == 11 //CPF
					
						ARET := PLRELBEN(CCODUSR)
					
						IF EMPTY(ARET)
							CMSG := "NÃO ENCONTRADO BENEFICIÁRIO PARA ESTE USUÁRIO"
							LRET := .F.
						ENDIF
						
					ENDIF
					
				ENDIF	
				
		ENDCASE
		
	ENDIF
	
ELSE
	CMSG := STR0052 //"USUÁRIO NÃO CADASTRADO"
	LRET := .F.
ENDIF

IF LRET .AND. PLSALIASEXI("B95") 
	
	B95->( DBSETORDER(1) )
	B95->(DBGOTOP())
	
	WHILE B95->(! EOF() )
		
		IF(B95->B95_CODUSR == CCODUSR)
		
			CCAMINHO := ALLTRIM(B95->B95_IMG)

			IF !(("HTTP" $ UPPER(CCAMINHO)) .OR. ("WWW." $ UPPER(CCAMINHO)) .OR. (".COM" $ UPPER(CCAMINHO)))
				CCAMINHO := SUBSTR(CCAMINHO, 9)
			ENDIF

			CCODMNU := B95->B95_CODMNU
			CCODPOR := B95->B95_CODPOR
			
			AI8->(DBGOTOP())
			
			WHILE (AI8->( ! EOF() ) .AND. LACHOU == .F.)
				
				IF(AI8->AI8_CODMNU == CCODMNU .AND. AI8->AI8_PORTAL == CCODPOR)
					AADD(AATALHOS, { B95->B95_CODMNU, B95->B95_DESCRI, CCAMINHO, AI8->AI8_WEBSRV, AI8->AI8_ROTINA })
					LACHOU := .T.
				ENDIF
				
			AI8->(DBSKIP())
			ENDDO
			
			LACHOU := .F.
		ENDIF
		
	B95->(DBSKIP())
	ENDDO
	
ENDIF

RESTAREA(AAREA)

RETURN( {LRET,CCODUSR,CMSG,CCODACE,CEMAIL,ARET,NINDDAT,CTIPCAR,CBIOMET,CMODBIO,NTP, AATALHOS, LTRET, CBIOCAD} )

/*/{PROTHEUS.DOC} PLSVLTNT
VALIDA O NUMERO DE TENTATIVA DE ACESSO AO PORTAL
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 16/10/14
@VERSION 1.0
/*/
FUNCTION PLSVLTNT()
LOCAL NQTDS	:= 0
LOCAL LTRET	:= .F.
LOCAL NTENT	:= GETNEWPAR("MV_PLSTENT",5)
LOCAL CSQL	:= ""

CSQL := "SELECT MAX(R_E_C_N_O_) BX1_RECNO"
CSQL += " FROM " + RETSQLNAME("BX1")
CSQL += " WHERE BX1_FILIAL = '" + XFILIAL("BX1") + "' "
CSQL += " AND BX1_CODUSR = '" + BSW->BSW_CODUSR + "' "
CSQL += " AND BX1_ALIAS = 'BSW' "
CSQL += " AND D_E_L_E_T_ = ' '"

DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"BX1MAX",.F.,.T.)

IF BX1MAX->(!EOF()) .AND. BX1MAX->BX1_RECNO > 0

	BX1->(DBGOTO(BX1MAX->BX1_RECNO))

	IF BX1->BX1_QTACES < NTENT

		NQTDS := BX1->BX1_QTACES+1
		
		BX1->(RECLOCK("BX1",.F.))
			BX1->BX1_DATA     := DATE()
			BX1->BX1_HORA     := TIME()
			BX1->BX1_QTACES	  := NQTDS
		BX1->(MSUNLOCK())
	ENDIF
	
	IF  BX1->BX1_QTACES >= NTENT
	
		LTRET 	:= .T.
		NTIME 	:= TIME()
		NRESULHS:= ELAPTIME(BX1->BX1_HORA,NTIME)
		
		IF NRESULHS >= "00:05:00"
		
			CSEQ := PLBX1NEW()
			
			BX1->(RECLOCK("BX1",.T.))
				BX1->BX1_FILIAL   := XFILIAL("BX1")
				BX1->BX1_SEQUEN   := CSEQ
				BX1->BX1_ALIAS    := "BSW"
				BX1->BX1_RECNO    := STRZERO(RECNO(),LEN(BX1->BX1_RECNO))
				BX1->BX1_TIPO     := "W"
				BX1->BX1_USUARI   := BSW->BSW_CODUSR
				BX1->BX1_DATA     := DATE()
				BX1->BX1_HORA     := TIME()
				BX1->BX1_ESTTRB   := GETCOMPUTERNAME()
				BX1->BX1_ROTINA := 'PRTLOGIN'
				BX1->BX1_CODUSR		:= BSW->BSW_CODUSR
				BX1->BX1_QTACES		:= 1
			BX1->(MSUNLOCK())
			
			LTRET := .F.
		ENDIF
		
	ELSE
		LTRET := .F.
	ENDIF
ENDIF

BX1MAX->(DBCLOSEAREA())

RETURN(LTRET)

/*/{PROTHEUS.DOC} PLVLDSDT
VALIDA A DATA DA CRIACAO DE ACESSO AO PORTAL. VERIFICA SE O USUARIO ESTA SEM TROCAR A SENHA A QUASE 1 ANO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 15/10/14
@VERSION 1.0
/*/
FUNCTION PLVLDSDT()
LOCAL NMAXDIAS  := GETNEWPAR("MV_PLMDSEN",365)// QUANTIDADE DIAS PARA TROCA SENHA
LOCAL NDIASAVIS := GETNEWPAR("MV_PLDASEN",30) // QUANTIDADE DE DIAS PARA AVISO EXPIRACAO SENHA
LOCAL CDATA		:= DATE()
LOCAL NDTRESULT	:= 1
LOCAL LBLOQ     := .F.
LOCAL LMENS     := .F.
LOCAL NDIARES   := 0 // DIAS RESTANTE

IF CDATA > BSW->BSW_DTSEN
	NDTRESULT := CDATA - BSW->BSW_DTSEN
ENDIF

// USUARIO BLOQUEADO
IF NDTRESULT >= NMAXDIAS
	LBLOQ := .T.
ENDIF

// USUARIO ENVIA MENSAGEM
IF !LBLOQ .AND. (NDTRESULT >=(NMAXDIAS-NDIASAVIS) .AND. NDTRESULT < NMAXDIAS)
	LMENS := .T.
	NDIARES := NMAXDIAS- NDTRESULT
ENDIF
	
RETURN({LBLOQ,LMENS,NDIARES})

/*/{PROTHEUS.DOC} PLVLDUSRP
VALIDA O USUARIO DO PLANO DE SAUDE (BA1)
VERIFICA SE O USUARIO ESTA CADASTRADO NO BA1
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04/11/04
@VERSION 1.0
/*/
FUNCTION PLVLDUSRP(CCODUSR,CVIACAR,CNOMECAR,CLOCALEXEC,CAREAABR,CTPLOCEXEC,CTIPO, CTIPATD,DATGUIA,BLOQGUI, CTRICAR)
LOCAL NI			:= 0
LOCAL LINTERCAMBIO	:= .F.
LOCAL LRET     		:= .T.
LOCAL CMATRIC   	:= ""
LOCAL CMSG    		:= ""
LOCAL CCODCON 		:= ""
LOCAL DDATA 	    := DDATABASE
LOCAL AMATUSU		:= {}
LOCAL ARETFUN 		:= {}
LOCAL ARETCRI  		:= {}
LOCAL ACODUSUARIO	:= {}
LOCAL ARET			:= {}
LOCAL CALIAS 		:= ""
LOCAL LPACINT		:= .F.

DEFAULT CNOMECAR    := ""
DEFAULT CLOCALEXEC  := ""
DEFAULT CAREAABR	:= ""
DEFAULT CTPLOCEXEC  := ""
DEFAULT CTIPO		:= "0"
DEFAULT CTIPATD 	:= ""
DEFAULT DATGUIA		:= ""
DEFAULT BLOQGUI		:= .F.
DEFAULT CTRICAR	:= ""
// PONTO DE ENTRADA PARA MANIPULAR DADOS ANTES DA VALIDACAO DA CARTEIRINHA NO PORTAL
IF EXISTBLOCK("PLSRDUSR")
	ARET 		:= EXECBLOCK("PLSRDUSR",.F.,.F.,{CCODUSR,CVIACAR,CNOMECAR,CLOCALEXEC,CAREAABR,CTPLOCEXEC,CTIPO,CTIPATD, CTRICAR})
	CCODUSR 	:= ARET[1]
	CVIACAR 	:= ARET[2]
	CNOMECAR 	:= ARET[3]
	CLOCALEXEC	:= ARET[4]
	CAREAABR 	:= ARET[5]
	CTPLOCEXEC	:= ARET[6]
	CTIPO 		:= ARET[7]
	CTIPATD 	:= ARET[8]
	IF (LEN(ARET) > 8)
		CTRICAR:=ARET[9]
	ENDIF
ENDIF

// VALIDA USUARIO/SENHA
BA1->( DBSETORDER(2) ) //BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_MATRIC + BA1_TIPREG + BA1_DIGITO
IF  !BA1->( MSSEEK( XFILIAL("BA1")+ALLTRIM(CCODUSR) ) )
	
	BA1->( DBSETORDER(5) )//BA1_FILIAL + BA1_MATANT + BA1_TIPANT
	IF !BA1->( MSSEEK( XFILIAL("BA1")+ALLTRIM(CCODUSR) ) )
		
		IF  SUBSTR(CCODUSR,1,4) <> PLSINTPAD() .AND. !EMPTY(CNOMECAR)
			LINTERCAMBIO := .T.
		ELSE
			IF SUBSTR(CCODUSR,1,4) <> PLSINTPAD() .AND. ALLTRIM( GETNEWPAR("MV_PLSUNI","0") ) == "1"
				CMSG := STR0057 //"USUARIO DE INTERCAMBIO NAO CADASTRADO"
			ELSE
				CMSG := STR0043 //"USUARIO NAO CADASTRADO"
			ENDIF
			LRET := .F.
		ENDIF
		
	ENDIF
	
ENDIF

// SE ACHOU O USUARIO
IF LRET
	// MATRICULA
	CMATRIC := BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO)
	IF EMPTY(CMATRIC)
		CMATRIC := CCODUSR
	ELSE
		LINTERCAMBIO := PLSINTPAD() <> BA1->BA1_OPEORI
		// SE NAO FOR DE INTERCAMBIO PEGA A DATA DE NASCIMENTO DO USUARIO
		IF !LINTERCAMBIO
			DDATA := BA1->BA1_DATNAS
		ENDIF
	ENDIF
	
	// PONTO DE ENTRADA PARA IDENTIFICAR SE O USUARIO E DE INTERCAMBIO
	// O BA1 TEM QUE ESTAR POSICIONADO
	IF  EXISTBLOCK("PLSUSUINT")
		LINTERCAMBIO := EXECBLOCK("PLSUSUINT",.F.,.F.,CCODUSR)
		IF !LINTERCAMBIO
			DDATA := BA1->BA1_DATNAS
		ENDIF
	ENDIF
	
	// CHECA INTERCAMBIO
	IF !LINTERCAMBIO
		BA3->(DBSETORDER(01)) //BA3_FILIAL + BA3_CODINT + BA3_CODEMP + BA3_MATRIC + BA3_CONEMP + BA3_VERCON + BA3_SUBCON + BA3_VERSUB
		IF !BA3->( MSSEEK( XFILIAL("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) ) )
			CMSG := STR0047 //"FAMILIA NAO CADASTRADA"
			LRET := .F.
		ENDIF
	ENDIF
	
	// PE PARA IDENTIFICAR SE O USUARIO DIGITOU O COGIDO CORRETAMENTE
	// O BA1 TEM QUE ESTAR POSICIONADO
	IF  EXISTBLOCK("PLSUSUCOD")
		ACODUSUARIO := EXECBLOCK("PLSUSUCOD",.F.,.F.,CCODUSR)
		
		IF VALTYPE(ACODUSUARIO)="A"
			LRET 	:= ACODUSUARIO[1]
			CMSG 	:= ACODUSUARIO[2]
			CMATRIC := ACODUSUARIO[3]
		ENDIF
		
	ENDIF
	
	// SE OK
	IF LRET
	
		// REGRAS E INCLUI USUARIO DE INTERCAMBIO SE NAO EXISTIR
		IF LINTERCAMBIO .AND. LEN(CNOMECAR) > 1 .AND. SUBSTR(CNOMECAR,1,1) == "%"
			CNOMECAR := SUBSTR(CNOMECAR,2,LEN(CNOMECAR))
		ENDIF
		
		// VALIDAÇÃO DE ATENDIMENTO PELO PRODUTO DO BENEFICIÁRIO
		IF  CTIPATD == "1" .OR. CTIPATD == "2"

			CALIAS = "BE1"
			
		ELSEIF CTIPATD == "3"

			CALIAS = "BE4"
			
		ELSEIF CTIPATD == "4"

			CALIAS = "B01"
			
		ELSE
			CALIAS = "BE1"
		ENDIF
		
		ARETFUN := PLSA090USR(CMATRIC,DDATABASE,SUBSTR(TIME(),1,5),CALIAS,.F.,.T.,NIL,CLOCALEXEC,NIL,NIL,CVIACAR,"1",.T.,CNOMECAR,DDATA,LINTERCAMBIO,NIL,NIL,NIL,NIL,CTPLOCEXEC,CTIPATD,.F.,BLOQGUI)
		
		IF LEN(ARETFUN) >= 5 .AND. !ARETFUN[5]
			
			IF CTIPATD == "4"
				LRET := .F.
				CMSG := "O BENEFICIÁRIO NÃO POSSUI PLANO ODONTOLÓGICO, VERIFIQUE A SEGMENTAÇÃO DO PRODUTO DO BENEFICIÁRIO."
			ELSEIF CTIPATD == "1" .OR. CTIPATD == "2" .OR. CTIPATD == "3"
				LRET := .F.
				CMSG := "O BENEFICIÁRIO NÃO POSSUI PLANO MÉDICO, VERIFIQUE A SEGMENTAÇÃO DO PRODUTO DO BENEFICIÁRIO."
			ENDIF
			
		ENDIF
		
		// RETORNO
		IF ! ARETFUN[1]
			ARETCRI := ACLONE(ARETFUN[2])
		ENDIF
		
		// RETORNO PACIENTE INTERNADO MAS BLOQUEADO LIBERAR A DIGITAÇÃO
		IF(LEN(ARETFUN) > 5)
			LPACINT := ARETFUN[6]
		ENDIF
		
		// DADOS DO USUARIO
		ADADUSR := PLSGETUSR()
		
		// VERIFICA CARENCIA PARA CONSULTA
		IF CTIPO == '1'
		
			CCODCON := GETMV("MV_PLSCDCO")
			
			ARETFUN := PLSAUTP(	DATE(),;
								STRTRAN(TIME(),":",""),;
								SUBS(CCODCON,1,2),;
								SUBS(CCODCON,3,16),;
								1,;
								ADADUSR,;
								0,;
								{},;
								"1",;
								.F.,;
								"",;
								.T.,;
								"1",;
								.F.,;
								"",;
								"",;
								SUBS(DTOC(DATE()),1,4),;
								SUBS(DTOC(DATE()),5,2))
								
			// VERIFICA SE TEM CRITICAS
			IF !ARETFUN[1]
				
				IF LEN(ARETCRI) == 0
					ARETCRI := ACLONE(ARETFUN[2])
				ELSE
					FOR NI := 1 TO LEN(ARETFUN[2])
						AADD(ARETCRI, ARETFUN[2,NI] )
					NEXT
				ENDIF
				
				LRET := .F.
			ENDIF
			
		ENDIF
		
		// TRATAMENTO DA ABRANGENCIA										   	    |
		PLSABRANG(CAREAABR,CLOCALEXEC,CTPLOCEXEC,"","",ADADUSR,{},@ARETCRI)
		
		// MATRIZ COM INFORMAÇÕES DO USUARIOS
		AADD(AMATUSU,{	IIF(LEN(ADADUSR)>=2,ADADUSR[2],CMATRIC),;			//01-NUMERO DO CARTAO
						IIF(LEN(ADADUSR)>=3,ADADUSR[3],""),;			    //02-MATRICULA ANTIGA
						IIF(LEN(ADADUSR)>=6,ADADUSR[6],""),;				//03-NOME DO USUARIO
						LINTERCAMBIO,;										//04-SE E DE INTERCAMBIO
						IIF(LEN(ADADUSR)>=45,ADADUSR[45],PLSINTPAD()),;	//05-OPERADORA ORIGEM
						IIF(LEN(ADADUSR)>=73,ADADUSR[73],""),;			//06-NOME DO PRODUTO DO USUARIO
						IIF(LEN(ADADUSR)>=74,ADADUSR[74],STOD("")),;		//07-DATA DA VALIDADE CARTEIR.
						IIF(LEN(ADADUSR)>=77,ADADUSR[77],""),;	 		//08-NR CARTAO NACIONAL SAUDE
						IIF(LEN(ADADUSR)>=53,ADADUSR[53],0),;				//09-VIA DO CARTAO
						IIF(LEN(ADADUSR)>=65,ADADUSR[65],""),;    		//10-LOCAL DE COBRANCA
						IIF(LEN(ADADUSR)>=65,ADADUSR[65],""),;			//11-ABRANGENCIA
						IIF(LEN(ADADUSR)>=45,ADADUSR[45],""),;			//12-NATURESA JURIDICA
						IIF(LEN(ADADUSR)>=79,ADADUSR[79],""),;			//13-TELEFONE DO USUARIO
						IIF(LEN(ADADUSR)>=40,ADADUSR[40],""),;			//14-NOME TITULAR
						IIF(LEN(ADADUSR)>=7,ADADUSR[7],""),;				//15-NOME EMPRESA
						IIF(LEN(ADADUSR)>=5,ADADUSR[5],""),;				//16-VIDA DO USUARIO
						IIF(LEN(ADADUSR)>=80,ADADUSR[80],""),;			//17-STRING BIOMETRICA 1
						IIF(LEN(ADADUSR)>=81,ADADUSR[81],""),;			//18-STRING BIOMETRICA 2
						IIF(LEN(ADADUSR)>=17,ADADUSR[17],""),;			//19-TIPO DE ACOMODACAO
						IIF(LEN(ADADUSR)>=20,ADADUSR[20],""),;			//20-PADRAO DE CONFORTO
						IIF(LEN(ADADUSR)>=21,ADADUSR[21],""),;			//21-DESCRICAO DO TIPO DE ACOMODACAO
						IIF(LEN(ADADUSR)>=88,ADADUSR[88],""),;  //22-DATA DE BLOQUEIO
						LPACINT			} )         //PACIENTE BLOQUEADO MAS QUE ESTÁ INTERNADO
	ENDIF
	
ENDIF

IF LPACINT
	CMSG := ARETFUN[7]
ENDIF

RETURN( { LRET,CMSG,AMATUSU,ARETCRI } )

/*/{PROTHEUS.DOC} PLIMPWEB
ROTINA PARA IMPRESSAO DE GUIAS VIA WEB
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 29/03/05
@VERSION 1.0
/*/
FUNCTION PLIMPWEB(LIMPGUI,CGUIA)

// PARAMETROS DE ENTRADA
// 1) LIMPGUI
//    .T. = INDICA QUE DEVE GERAR RELATORIO EM DISCO
//    .F. = INDICA QUE DEVER RETORNAR ARRAY COM DADOS DA GUIA
// 2) CGUIA (NUMERO DA GUIA)
//    SE ESTIVER INFORMADO, INDICA QUE EH PARA PROCESSAR APENAS ESTE
//    NUMERO DE GUIA INFORMADA
//    SE NAO ESTIVER INFORMADO, DEVERA SER ABERTO UMA JANELA DE PERGUNTAS
//    SOLICITANDO OS PARAMETROS PARA PROCESSAMENTO
// PARAMETROS DE SAIDA
// 1) STATUS
//    .T. = PROCESSAMENTO OK   .F. = HOUVE ALGUM ERRO
// 2) MENSAGEM DE ERRO
//    CASO O PARAMETRO 1 SEJA .F., HAVERA MENSAGEM DE ERRO
// 3) ARRAY COM DADOS DA GUIA
// INICIALIZA VARIAVEIS
LOCAL   ARETORNO := {.F.,STR0044,{}} //"PROGRAMA DE IMPRESSAO NAO ENCONTRADO"
DEFAULT LIMPGUI  := .F.
DEFAULT CGUIA    := ""
// CHAMA PONTO DE ENTRADA IMPRESSAO
IF  EXISTBLOCK("PLIMPWEB")
	ARETORNO := EXECBLOCK("PLIMPWEB",.F.,.F.,{LIMPGUI,CGUIA})
ENDIF
RETURN(ARETORNO)

/*/{PROTHEUS.DOC} PLSUSRBKP
FUNCAO PARA ARMAZENAR DADOS DOS USUARIOS EM DIVERSAS TAB.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.05.05
@VERSION 1.0
/*/
FUNCTION PLSUSRBKP(CMATRICULA,DDATA,ATABELAS)
LOCAL AAREA := SGETAREA()
LOCAL NI
LOCAL CALIAS
LOCAL CWHILE
LOCAL NJ
LOCAL NSEQREG
LOCAL NSEQCAM
LOCAL CVAL
LOCAL CHORA := TIME()
FOR NI := 1 TO LEN(ATABELAS)
	SGETAREA(AAREA,ATABELAS[NI,1])
NEXT
FOR NI := 1 TO LEN(ATABELAS)
	CALIAS := ATABELAS[NI,1]
	CWHILE := ATABELAS[NI,4]
	DBSELECTAREA(CALIAS)
	DBSETORDER(ATABELAS[NI,3])
	MSSEEK(XFILIAL()+CMATRICULA)
	NSEQREG := 0
	WHILE (CALIAS)->(!EOF()) .AND. XFILIAL(CALIAS) == (CALIAS)->&(CALIAS+"_FILIAL") .AND. CMATRICULA == (CALIAS)->&CWHILE
		NSEQREG++
		NSEQCAM := 0
		FOR NJ := 1 TO FCOUNT()
			CVAL := CONVDAD((CALIAS)->(FIELDGET(NJ)))
			IF  ! EMPTY(CVAL)
				NSEQCAM++
				BQY->(RECLOCK("BQY",.T.))
				BQY->BQY_FILIAL := XFILIAL("BQY")
				BQY->BQY_MATRIC := CMATRICULA
				BQY->BQY_DATA   := DDATA
				BQY->BQY_HORA   := CHORA
				BQY->BQY_ALIAS  := CALIAS
				BQY->BQY_SEQUEN := STRZERO(NSEQREG,4)+STRZERO(NSEQCAM,3)
				BQY->BQY_CAMPO  := (CALIAS)->(FIELDNAME(NJ))
				BQY->BQY_CONTEU := CVAL
				BQY->(MSUNLOCK())
			ENDIF
		NEXT
		(CALIAS)->(DBSKIP())
	ENDDO
NEXT
SRESTAREA(AAREA)
RETURN .T.

/*/{PROTHEUS.DOC} CONVDAD
FUNCAO QUE CONVERTE QUALQUER TIPO DE VARIAVEL P/ CARACTER
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.05.05
@VERSION 1.0
/*/
STATIC FUNCTION CONVDAD(UVAL)
LOCAL CVAL := ""

IF     VALTYPE(UVAL)=="C"
	CVAL := UVAL
ELSEIF VALTYPE(UVAL)=="N"
	IF  UVAL == 0
		CVAL := ""
	ELSE
		CVAL := ALLTRIM(CVALTOCHAR(UVAL))
	ENDIF
ELSEIF VALTYPE(UVAL)=="D"
	IF  EMPTY(UVAL)
		CVAL := ""
	ELSE
		CVAL := DTOS(UVAL)
	ENDIF
ENDIF
IF  LEN(CVAL) > 250
	CVAL := PADR(CVAL,250)
ENDIF

RETURN CVAL

/*/{PROTHEUS.DOC} PLSHISPAG
GRAVA HISTORICO DE PROCESSAMENTO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSHISGRV(CIDEROT,CCODCHA,CSEQ,CHISTOR,LHIST)

DEFAULT LHIST := .T.

// GRAVA REGISTRO
IF  PLSALIASEX("B03")
	B03->(DBSETORDER(1))
	IF LHIST
		IF  B03->(MSSEEK(XFILIAL("B03")+CIDEROT+CCODCHA+CSEQ))
			B03->(RECLOCK("B03",.F.))
		ELSE
			B03->(RECLOCK("B03",.T.))
			B03->B03_FILIAL := XFILIAL("B03")
			B03->B03_ROTINA := CIDEROT
			B03->B03_CHAVE  := CCODCHA
			B03->B03_SEQ    := CSEQ
		ENDIF
		B03->B03_HISTOR := CHISTOR
		B03->(MSUNLOCK())
	ENDIF
ENDIF
RETURN()

/*/{PROTHEUS.DOC} PLSHISDEL
EXCLUI HISTORICO DE PROCESSAMENTO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSHISDEL(CIDEROT,CCODCHA)
	
// GRAVA REGISTRO
IF  PLSALIASEX("B03")
	B03->(DBSETORDER(1))
	WHILE B03->(MSSEEK(XFILIAL("B03")+CIDEROT+CCODCHA))
		B03->(RECLOCK("B03",.F.))
		B03->(DBDELETE())
		B03->(MSUNLOCK())
	ENDDO
ENDIF
RETURN()

/*/{PROTHEUS.DOC} PLSHISCON
CONSULTA HISTORICO DE PROCESSAMENTO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSHISCON(CIDEROT,CCODCHA,CTITULO)

// INICIALIZA VARIAVEIS
LOCAL AHISTORICO := {}
LOCAL ACABEC     := { {"SEQ","@!",20},{STR0045,"@!",200} } //"DESCRICAO"
LOCAL NTAMANHO
CCODCHA  := ALLTRIM(CCODCHA)
NTAMANHO := LEN(CCODCHA)
IF  ! PLSALIASEX("B03")
	RETURN()
ENDIF
// MONTA ARRAY COM HISTORICO DE PROCESSAMENTO
B03->(DBSETORDER(1))
B03->(MSSEEK(XFILIAL("B03")+CIDEROT+CCODCHA))
WHILE ! B03->(EOF()) .AND. B03->B03_FILIAL+B03->B03_ROTINA+SUBSTR(B03->B03_CHAVE,1,NTAMANHO) == ;
		XFILIAL("B03")+CIDEROT+CCODCHA
	AADD(AHISTORICO,{B03->B03_SEQ,B03->B03_HISTOR})
	B03->(DBSKIP())
ENDDO
// EXIBE TELA COM INCONSISTENCIAS ENCONTRADAS DURANTE O PROCESSO...
IF  LEN(AHISTORICO) > 0
	PLSCRIGEN(AHISTORICO, ACABEC, CTITULO,,,,,,,,,,,,,,,,,,,,TFONT():NEW("COURIER NEW",7,14,,.F.,,,,.F.,.F.))
ELSE
	MSGALERT(STR0046 + CIDEROT + " " + ALLTRIM(CCODCHA)) //"NAO EXISTE HISTORICO PARA ESTA CHAVE: "
ENDIF
RETURN()

/*/{PROTHEUS.DOC} PLVLDPFS
VALIDA PESSOA FISICA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLVLDPFS(CALIAS, CCHAVE, NORDEM, DDATPRO)
	LOCAL LRET
	LOCAL CCAMPO
	IF READVAR() $ "M->BE4_SIGLA" .OR. READVAR() $ "M->BE4_REGSOL"
		IF LEN(M->BE4_SIGLA) == 3
			M->BE4_SIGLA := M->BE4_SIGLA + SPACE(4)
		ENDIF
		CCAMPO := ALLTRIM(M->BE4_REGSOL)
		M->BE4_REGSOL := CCAMPO + (SPACE((TAMSX3("BB0_NUMCR")[1])-(LEN(CCAMPO))))
		IF !EMPTY(BB0->BB0_CODSIG)
			IF M->BE4_SIGLA != BB0->BB0_CODSIG
				M->BE4_SIGLA := BB0->BB0_CODSIG
				CCHAVE := M->BE4_ESTSOL+M->BE4_REGSOL+M->BE4_SIGLA//+M->BE4_OPESOL
			ELSE
				CCHAVE := M->BE4_ESTSOL+M->BE4_REGSOL+M->BE4_SIGLA+M->BE4_OPESOL
			ENDIF
			
			IF M->BE4_ESTSOL != BB0->BB0_ESTADO
				M->BE4_ESTSOL := BB0->BB0_ESTADO
				CCHAVE := M->BE4_ESTSOL+M->BE4_REGSOL+M->BE4_SIGLA//+M->BE4_OPESOL
			ELSE
				CCHAVE := M->BE4_ESTSOL+M->BE4_REGSOL+M->BE4_SIGLA+M->BE4_OPESOL
			ENDIF			

		ELSE
			CCHAVE := M->BE4_ESTSOL+M->BE4_REGSOL+M->BE4_SIGLA+M->BE4_OPESOL
		ENDIF
	ENDIF
	
	IF READVAR() $ "M->BD5_REGSOL"
		IF LEN(M->BD5_SIGLA) == 3
			M->BD5_SIGLA := M->BD5_SIGLA + SPACE(4)
		ENDIF
		IF !EMPTY(BB0->BB0_CODSIG) .AND. M->BD5_SIGLA != BB0->BB0_CODSIG
			M->BD5_SIGLA := BB0->BB0_CODSIG
		ENDIF
		CCAMPO := ALLTRIM(M->BD5_REGSOL)
		M->BD5_REGSOL := CCAMPO + (SPACE((TAMSX3("BB0_NUMCR")[1])-(LEN(CCAMPO))))
		CCHAVE := M->BD5_ESTSOL+M->BD5_REGSOL+M->BD5_SIGLA
	ENDIF

	IF READVAR() $ "M->BE4_REGSOL"
		&(CALIAS + "->(DBSETORDER(4))") //FAZ O SEEK PELA ORDEM 4 PRIMEIRO PARA BUSCAR O SOLICITANTE DE ACORDO COM A CHAVE.
		LRET := &(CALIAS + '->(MSSEEK(XFILIAL("BB0")+"' + CCHAVE + '"))')
		IF LRET	
			M->BE4_ESTSOL := BB0->BB0_ESTADO
			M->BE4_SIGLA  := ALLTRIM(BB0->BB0_CODSIG)
			M->BE4_NOMSOL := BB0->BB0_NOME
			M->BE4_CDPFSO := BB0->BB0_CODIGO
		ENDIF		
		
		&(CALIAS + "->(DBSETORDER(" + STR(NORDEM) + "))") // VOLTA A ORDEM PARA BUSCA PELO NUMERO DO CONSELHO CASO AINDA NÃO TENHA ENCONTRADO.
		
	ELSE
		&(CALIAS + "->(DBSETORDER(" + STR(NORDEM) + "))")
		LRET := &(CALIAS + '->(MSSEEK(XFILIAL("BB0")+"' + CCHAVE + '"))')
	ENDIF
	
	IF READVAR() $ "M->BE4_SIGLA"
		M->BE4_REGSOL := PADR("",LEN(BE4_REGSOL))
		M->BE4_NOMSOL := PADR("",LEN(BE4_NOMSOL))
		LRET = .T.
	ENDIF
	
	IF READVAR() $ "M->BE4_REGSOL" .AND. !LRET
		IF LRET := BB0->( MSSEEK(XFILIAL("BB0")+M->BE4_REGSOL) )
			IF LRET
				M->BE4_ESTSOL := BB0->BB0_ESTADO
				M->BE4_SIGLA := ALLTRIM(BB0->BB0_CODSIG)
				M->BE4_NOMSOL := BB0->BB0_NOME
				M->BE4_CDPFSO := BB0->BB0_CODIGO
				LRET := .T.
			ELSE
				M->BE4_REGSOL := PADR("",LEN(BE4_REGSOL))
				M->BE4_NOMSOL := PADR("",LEN(BE4_NOMSOL))
				M->BE4_CDPFSO := PADR("",LEN(BE4_CDPFSO))
				LRET := .F.
			ENDIF
		ENDIF
	ENDIF
	
	IF !LRET .AND. CALIAS == 'BB0' .AND. READVAR() $ "M->BD5_REGEXE,M->BD7_REGPRE,M->BD5_REGSOL"
		// PARA ESTE CASO IREMOS PREENCHER O ESTADO COMO GATILHO E VALIDAR CORRETAMENTE.
		// NAO BASTA INSERIR NO (SX7) POIS O GATILHO PREENCHE O CAMPO APENAS APÓS A VALIDAÇÃO.
		BB0->( DBSETORDER(7) )
		
		IF READVAR() $ "M->BD5_REGEXE"
			LRET := BB0->( MSSEEK(XFILIAL("BB0")+LTRIM(M->BD5_REGEXE)) )
			IF LRET
				CCAMPO := ALLTRIM(M->BD5_REGEXE)
				M->BD5_REGEXE := CCAMPO + (SPACE((TAMSX3("BB0_NUMCR")[1])-(LEN(CCAMPO))))
				M->BD5_ESTEXE := BB0->BB0_ESTADO
				M->BD5_NOMEXE := BB0->BB0_NOME
				IF M->BD5_SIGEXE != BB0->BB0_CODSIG
					M->BD5_SIGEXE := BB0->BB0_CODSIG
					CCHAVE := M->BD5_ESTEXE+M->BD5_REGEXE+M->BD5_SIGEXE
				ELSE
					CCHAVE := M->BD5_ESTEXE+M->BD5_REGEXE+M->BD5_SIGEXE
				ENDIF
			ENDIF
		ELSEIF READVAR() $ "M->BD5_REGSOL"
			LRET := BB0->( MSSEEK(XFILIAL("BB0")+LTRIM(M->BD5_REGSOL)) )
			IF LRET
				M->BD5_ESTSOL := BB0->BB0_ESTADO
				M->BD5_NOMSOL := BB0->BB0_NOME
				IF M->BD5_SIGLA != BB0->BB0_CODSIG
					M->BD5_SIGLA := BB0->BB0_CODSIG
					CCHAVE := M->BD5_ESTSOL+M->BD5_REGSOL+M->BD5_SIGLA
				ELSE
					CCHAVE := M->BD5_ESTSOL+M->BD5_REGSOL+M->BD5_SIGLA
				ENDIF
			ENDIF
		ELSEIF READVAR() $ "M->BD7_REGPRE"
			CCAMPO := ALLTRIM(M->BD7_REGPRE)
			M->BD7_REGPRE := CCAMPO + (SPACE((TAMSX3("BB0_NUMCR")[1])-(LEN(CCAMPO))))
			LRET := BB0->( MSSEEK(XFILIAL("BB0")+M->BD7_REGPRE) )
			IF LRET
				M->BD7_ESTPRE := BB0->BB0_ESTADO
				IF M->BD7_SIGLA != BB0->BB0_CODSIG
					M->BD7_SIGLA := BB0->BB0_CODSIG
					CCHAVE := M->BD7_ESTPRE+M->BD7_REGPRE+IIF(EMPTY(M->BD7_SIGLA),IIF(BCL->BCL_ALIAS='BD5',M->BD5_SIGLA,M->BE4_SIGLA),M->BD7_SIGLA)
				ELSE
					CCHAVE := M->BD7_ESTPRE+M->BD7_REGPRE+IIF(EMPTY(M->BD7_SIGLA),IIF(BCL->BCL_ALIAS='BD5',M->BD5_SIGLA,M->BE4_SIGLA),M->BD7_SIGLA)
				ENDIF
			ENDIF
		ENDIF
		
		BB0->( DBSETORDER(NORDEM) )
		LRET := BB0->( MSSEEK(XFILIAL("BB0")+CCHAVE) )
		
	ENDIF
	
	IF ! LRET
		HELP("",1,"REGNOIS")
	ELSE
		IF BB0->(FIELDPOS("BB0_CODBLO")) > 0
			LRET := A090CHEBLO(BB0->BB0_CODIGO,DDATPRO)
		ENDIF
	ENDIF
RETURN LRET

/*/{PROTHEUS.DOC} PLVLDPRE
INCLUSAO DO PRE-ATENDIMENTO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLVLDPRE(AMAT, CTPACA, CORDDESC)
LOCAL NCONT	    	:= 0
LOCAL NPERIOD   	:= 0
LOCAL CCODCON   	:= ""
LOCAL CMSG 			:= ""
LOCAL LATU 			:= .T.
LOCAL LCRITPER 		:= .T.
LOCAL LJATAPRE 		:= .F.
LOCAL ARETFUN  		:= {}
LOCAL ARETPER		:= {}
LOCAL ARET 			:= {}
LOCAL ADADUSR		:= {}
LOCAL CCRITXAUT		:= ""
LOCAL LPLSPREAT 	:= EXISTBLOCK("PLSPREAT")
LOCAL LCONTINUA 	:= .T.
LOCAL LABRANG 		:= ""
LOCAL AAREA 		:= {}
LOCAL LPOSICI 		:= .F.
LOCAL LMATRANT  	:= GETNEWPAR("MV_PLMATAP","0") == "1" //MOSTRA MATRICULA ANTIGA PORTAL   
LOCAL NMV_PLDTPRE 	:= GETNEWPAR("MV_PLDTPRE",365)
LOCAL AAREABA1  	:= {} 

DEFAULT CORDDESC := ""

IF CTPACA == 'I'

	LABRANG := PLSA090LOC(AMAT[4],AMAT[5],AMAT[7],DDATABASE,"PORTAL")
	
	IF !LABRANG
	
		CMSG := "O PRODUTO DO BENEFICIÁRIO NÃO ATENDE A ESTA CIDADE OU ESTADO, VERIFIQUE A ÁREA DE ABRANGÊNCIA DO PLANO."
		
		AADD(ARET,{"","","","","",CTOD(""),""} )
		
		RETURN( {CMSG,ARET} )
	ENDIF
	
ENDIF

IF LMATRANT .AND. LEN(AMAT[1]) > 0
 
	AAREABA1 := BA1->(GETAREA())

	BA1->( DBSETORDER(5) )
	IF BA1->( MSSEEK( XFILIAL("BA1")+ALLTRIM(AMAT[1]) ) )

		AMAT[1] := BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC+BA1->BA1_TIPREG+BA1->BA1_DIGITO

	ENDIF
	
	BA1->(RESTAREA(AAREABA1))
	
ENDIF

// SE NAO FOR INFORMADO A RDA MOSTRA TODOS CONFORME USUARIO
IF CTPACA <> 'M'

	// NA INCLUSAO VERIFICA SE O USUARIO JA ESTA NO PRE-ATENDIMENTO
	BZI->( DBSETORDER(2) ) //BZI_FILIAL + BZI_CODINT + BZI_CODEMP + BZI_MATRIC + BZI_TIPREG + BZI_DIGITO + BZI_CODRDA + BZI_CODLOC + BZI_HORTER
	IF CTPACA == 'I' .OR. CTPACA == 'A'
		
		CSQL := " SELECT R_E_C_N_O_ REC FROM " + RETSQLNAME("BZI")
		CSQL += " WHERE BZI_FILIAL = '" + XFILIAL("BZI") + "' "
		CSQL += "   AND BZI_CODINT = '" + SUBSTR(AMAT[1],1,4) + "' "
		CSQL += "   AND BZI_CODEMP = '" + SUBSTR(AMAT[1],5,4) + "' "
		CSQL += "   AND BZI_MATRIC = '" + SUBSTR(AMAT[1],9,6) + "' "
		CSQL += "   AND BZI_TIPREG = '" + SUBSTR(AMAT[1],15,2) + "' "
		CSQL += "   AND BZI_DIGITO = '" + SUBSTR(AMAT[1],17,1) + "' "
		CSQL += "   AND BZI_CODRDA = '" + AMAT[5] + "' "
		CSQL += "   AND BZI_CODLOC = '" + AMAT[7] + "' "
		CSQL += "   AND BZI_HORTER = ' ' "
		CSQL += "   AND BZI_DATCHE >= '" + DTOS(DDATABASE - NMV_PLDTPRE) + "' " //1 ANO
		CSQL += "   AND D_E_L_E_T_ = ' ' "
		
		IF (CORDDESC = "1")
			CSQL += " ORDER BY BZI_FILIAL,BZI_DATCHE DESC,BZI_HORCHE DESC"
		ELSE
			CSQL += " ORDER BY BZI_FILIAL,BZI_DATCHE ,BZI_HORCHE "
		ENDIF
		
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"TRBBZI",.T.,.F.)
		
		IF ! TRBBZI->(EOF())
			
			BZI->( DBGOTO(TRBBZI->REC) )
			
			CMSG := 'USUARIO JÁ ESTA NO PRÉ-ATENDIMENTO'
			
		ELSEIF CTPACA == 'I'
		
			ARETFUN := PLSDADUSR(AMAT[1],"1",.F.,DDATABASE)
		
			IF ! ARETFUN[1]
			
				ARETFUN := PLSDADUSR(AMAT[1],"2",.F.,DDATABASE)
			
				IF ! ARETFUN[1]
					CMSG := "MATRICULA DO BENEFICIÁRIO NÃO RECONHECIDA PELA OPERADORA NESTA DATA"
				ENDIF
				
			ENDIF
			
			IF ARETFUN[1]
			
				ADADUSR := PLSGETUSR()
			
				PLSDADRDA(AMAT[4],AMAT[5],NIL,DDATABASE,AMAT[7])
			
				ARETRDA := PLSVLDRDA()
				
				IF ! ARETRDA[1]
					CMSG := '038 - PRODUTO DO USUARIO NAO PERMITE ATENDIMENTO POR ESTA REDE DE ATENDIMENTO.'
				ENDIF
				
			ENDIF
		ENDIF
		
		TRBBZI->(DBCLOSEAREA())
		
	ENDIF
	
	IF CTPACA <> 'I'
	
		IF CTPACA == 'C'
	
			IF !BZI->( MSSEEK( XFILIAL("BZI")+AMAT[1]+AMAT[5]+AMAT[7]+'     ') )
				CMSG := 'USUARIO NÃO ESTA NO PRÉ-ATENDIMENTO'
			ENDIF
			
		ELSE
			
			BZI->( DBSETORDER(5) ) //BZI_FILIAL + BZI_CODINT + BZI_CODEMP + BZI_MATRIC + BZI_TIPREG + BZI_DIGITO + BZI_CODUSR + BZI_HORTER
			IF !BZI->( MSSEEK( XFILIAL("BZI")+AMAT[1]+AMAT[2]+'     ') )
				CMSG := 'USUARIO NÃO ESTA NO PRÉ-ATENDIMENTO'
			ENDIF
			
		ENDIF
		
		LATU := .F.
		
	ENDIF
	
	// TESTA PERIODICIDADE OU NAO
	IF CTPACA == 'I' .AND. EMPTY(CMSG) .AND. GETNEWPAR('MV_PLVDTPO','1') == '1'
		
		ARETFUN := PLSA090USR(AMAT[1],DATE(),STRTRAN(TIME(),":",""),"BE1",.F.,.T.)
		ADADUSR := PLSGETUSR()
		
		IF VALTYPE(ADADUSR) == "A" .AND. LEN(ADADUSR) >= 1 .AND. ADADUSR[1]
			
			IF LEN(ADADUSR) > 0 .AND. ADADUSR[1]
			
				CCODCON := GETMV("MV_PLSCDCO")
				NPERIOD := GETMV("MV_PLDSCAG")
		
				// VERIFICA O CODIGO DA CONSULTA
				IF ! EMPTY(CCODCON)
					BR8->( DBSETORDER(1) )
					BR8->( MSSEEK( XFILIAL("BR8")+CCODCON ) )
				ELSE

					FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',STR0056 , 0, 0, {})//"CONTEUDO NÃO INFORMADO MV_PLSCDCO"		
					
				ENDIF

				// CHECA ALGUMAS REGRAS
				ARETPER := PLSAUTP(DATE(),;
									STRTRAN(TIME(),":",""),;
									SUBS(CCODCON,1,2),;
									SUBS(CCODCON,3,16),;
									1,;
									ADADUSR,;
									0,;
									{},;
									"1",;
									.F.,;
									"",;
									.T.,;
									"1",;
									.F.,;
									"",;
									"",;
									SUBS(DTOC(DATE()),1,4),;
									SUBS(DTOC(DATE()),5,2))
				
				LCRITPER := ARETPER[1]
				
				IF ! LCRITPER
				
					AAUXCRI := ARETPER[2]
					FOR NCONT := 1 TO LEN(AAUXCRI)
						IF !EMPTY(AAUXCRI[NCONT,1])
							IF !EMPTY(AAUXCRI[NCONT,3])
								CCRITXAUT += "  "+AAUXCRI[NCONT,1]+" - "+AAUXCRI[NCONT,2]+" - "+AAUXCRI[NCONT,3]+CRLF+"  "
							ELSE
								CCRITXAUT += "  "+AAUXCRI[NCONT,1]+" - "+AAUXCRI[NCONT,2]+CRLF+"  "
							ENDIF
							CCRITXAUT += " <BR>"
						ENDIF

					NEXT
					
				ENDIF
				
			ENDIF
			
		ENDIF
		
		IF LPLSPREAT .AND. CTPACA == "I"
		
			ARETPTOENT := EXECBLOCK("PLSPREAT",.F.,.F.,{CCRITXAUT,AMAT[1],AMAT[5],AMAT[7]})
			CMSGESP    := ARETPTOENT[1]
			LCONTINUA  := ARETPTOENT[2]
			
			IF ! LCONTINUA
				CCRITXAUT := CMSGESP
				CMSG      := CMSGESP
			ENDIF
		ENDIF
		
	ENDIF
	
	// GRAVA OU ATUALIZA
	IF CTPACA <> 'I' .AND. CTPACA <> 'C'
	
		AAREA := GETAREA()
	
		//POSICIONO NO REGISTRO QUE SERÁ ALTERADO COM BENEFICIARIO + RDA + LOCAL DE ATENDIMENTO
		BZI->(DBSETORDER(2)) //BZI_FILIAL, BZI_CODINT, BZI_CODEMP, BZI_MATRIC, BZI_TIPREG, BZI_DIGITO, BZI_CODRDA, BZI_CODLOC, BZI_HORTER
		
		IF CTPACA == 'A' .AND. !(EMPTY(AMAT[9]) .AND. EMPTY(AMAT[10]))
		
			LPOSICI := BZI->(MSSEEK(XFILIAL("BZI") + AMAT[1] + AMAT[9] + AMAT[10]))
		
		ELSEIF CTPACA == 'E'
		
			LPOSICI := BZI->(MSSEEK(XFILIAL("BZI") + AMAT[1] + AMAT[5] + AMAT[7]))
		
		ENDIF
		
		RESTAREA(AAREA)
		
	ENDIF
	
	IF EMPTY(CMSG)
	
		BZI->( RECLOCK("BZI",LATU) )
	
		// INCLUSAO
		IF CTPACA == 'I'
	
			BZI->BZI_FILIAL := XFILIAL("BZI")
			BZI->BZI_CODINT := SUBSTR(AMAT[1],1,4)
			BZI->BZI_CODEMP := SUBSTR(AMAT[1],5,4)
			BZI->BZI_MATRIC := SUBSTR(AMAT[1],9,6)
			BZI->BZI_TIPREG := SUBSTR(AMAT[1],15,2)
			BZI->BZI_DIGITO := SUBSTR(AMAT[1],17,1)
			BZI->BZI_CODUSR := AMAT[2]
			BZI->BZI_NOMUSR := AMAT[3]
			BZI->BZI_OPERDA := AMAT[4]
			BZI->BZI_CODRDA := AMAT[5]
			BZI->BZI_NOMRDA := AMAT[6]
			BZI->BZI_CODLOC := AMAT[7]
			
			BZI->BZI_TRILHA := AMAT[8]
			BZI->BZI_DATCHE := DATE()
			BZI->BZI_HORCHE := SUBSTR(TIME(),1,5)
			
			IF !LCRITPER
				CMSG := CCRITXAUT
			ENDIF
			
			// PONTO DE ENTRADA PARA VALIDAR REGRAS ESPECIFICAS NO PRE-ATENDIMENTO
			IF LPLSPREAT .AND. LCONTINUA
				CMSG := CMSGESP
			ENDIF
			
		// ALTERAR
		ELSEIF CTPACA == 'A'
		
			BZI->BZI_OPERDA := AMAT[4]
			BZI->BZI_CODRDA := AMAT[5]
			BZI->BZI_NOMRDA := AMAT[6]
			BZI->BZI_CODLOC := AMAT[7]
			
		// CONCLUIR
		ELSEIF CTPACA == 'C'
		
			BZI->BZI_HORTER := SUBSTR(TIME(),1,5)
		// EXCLUIR
		ELSEIF CTPACA == 'E'
			BZI->( DBDELETE() )
		ENDIF
		
		BZI->( MSUNLOCK() )
		
	ENDIF
	
ENDIF

// MONTA PRE-ATENDIMENTO
CSQL := " SELECT BZI_CODINT, BZI_CODEMP, BZI_MATRIC, BZI_TIPREG, BZI_DIGITO, BZI_NOMUSR, BZI_CODRDA, "
CSQL += "        BZI_NOMRDA, BZI_CODLOC, BZI_DATCHE, BZI_HORCHE "
CSQL += "   FROM " + RETSQLNAME("BZI")
CSQL += "  WHERE BZI_FILIAL = '" + XFILIAL("BZI") + "' "

IF (CTPACA == 'M' .AND. !EMPTY(AMAT[5])) .OR. (CTPACA == 'I' .AND. LEN(AMAT) >=5 .AND. !EMPTY(AMAT[5]) .AND. !EMPTY(AMAT[7]) .AND. LJATAPRE)

	CSQL += "   AND BZI_CODRDA = '" + AMAT[5] + "' "
	CSQL += "   AND BZI_CODLOC = '" + AMAT[7] + "' "

ELSE

	IF ! EMPTY(AMAT[5]) .AND. GETNEWPAR("MV_PLSBZIA","0") == "1"
		CSQL += " AND (BZI_CODUSR = '"+AMAT[2]+"' "
		CSQL += "  OR (BZI_CODRDA = '"+AMAT[5]+"' AND BZI_CODLOC = '"+AMAT[7]+"') ) "
	ELSE
		CSQL += " AND BZI_CODUSR = '"+AMAT[2]+"' "
	ENDIF
	
ENDIF

CSQL += "   AND BZI_HORTER = '' "
CSQL += "   AND BZI_DATCHE >= '" + DTOS(DDATABASE - NMV_PLDTPRE) + "' "//3 ANOS
CSQL += "   AND D_E_L_E_T_ = ' ' "

IF (CORDDESC = "1")
	CSQL += " ORDER BY BZI_FILIAL,BZI_DATCHE DESC,BZI_HORCHE DESC"
ELSE
	CSQL += " ORDER BY BZI_FILIAL,BZI_DATCHE,BZI_HORCHE "
ENDIF

DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"TRBBZI",.T.,.F.)

IF ! TRBBZI->( EOF() )
	PLSTFIELD("TRBBZI",.F.,{ "BZI_DATCHE" } )
ENDIF	

// MONTA RETORNO
DO WHILE !TRBBZI->( EOF() )

	AADD(ARET,{	TRBBZI->(BZI_CODINT+BZI_CODEMP+BZI_MATRIC+BZI_TIPREG+BZI_DIGITO),;//MATRICULA
				TRBBZI->BZI_NOMUSR,;//NOME USUARIO
				TRBBZI->BZI_CODRDA,;//CODIGO DA RDA
				TRBBZI->BZI_NOMRDA,;//NOME DA RDA
				TRBBZI->BZI_CODLOC,;//LOCAL DE ATENDIMENTO
				TRBBZI->BZI_DATCHE,;//DATA DE CHEGADA
				TRBBZI->BZI_HORCHE} )//HORA DE CHEGADA
				
TRBBZI->( DBSKIP() )
ENDDO

IF ! EMPTY(CMSG) .AND. LEN(ARET) == 0

	AADD(ARET,{	"",;
				"",;
				"",;
				"",;
				"",;
				CTOD(""),;
				""} )
				
ENDIF

// FECHA AREA
TRBBZI->( DBCLOSEAREA() )
	
RETURN( {CMSG,ARET} )

/*/{PROTHEUS.DOC} PLSATUSS
ATUALIZA SALDO E STALIB
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 09.10.08
@VERSION 1.0
/*/
FUNCTION PLSATUSS(NAOUSADO,LSALDO,LSTALIB,NSALDO,CSTALIB,LINTER,CCHKLIB,NIDX,LCHKBE2,NRECNO,NIDXBE2,NINCRE,CCODPAD,CCODPRO,CDENTE,CFACE,COFFLINE)
LOCAL AAREABD6 		:= BD6->(GETAREA())
LOCAL AAREABE2 		:= BE2->(GETAREA())
LOCAL CCOMPCHVOD		:= ""
LOCAL LSEQ          := .F.
LOCAL CCHKITENS     := ""
LOCAL CCHKSEQ       := ""
DEFAULT LSALDO 		:= .T.
DEFAULT LSTALIB		:= .T.
DEFAULT LINTER		:= .F.
DEFAULT LCHKBE2 	:= .F.
DEFAULT NSALDO 		:= 0
DEFAULT CSTALIB 	:= "2"
DEFAULT NIDX		:= 1
DEFAULT CCHKLIB		:= ""
DEFAULT NRECNO		:= 0
DEFAULT NIDXBE2		:= NIDX
DEFAULT NINCRE		:= 0
DEFAULT CCODPRO		:= ''
DEFAULT CCODPAD     := ''
DEFAULT CDENTE		:= ''
DEFAULT CFACE			:= ''
DEFAULT COFFLINE    := ''
// AJUSTA O ITEM
IF ! LINTER
	
	//NESTE IF AQUI A VARIAVEL CCHKLIB VEM SEM O SEQUEN
	//O TRATAMENTO DO SALDO TEM Q SER SEMPRE PELO CODPRO E CODPAD
	//IGUAL ESTA DEFINIDO AQUI EMBAIXO
	IF ! EMPTY(CCODPRO) .AND. ! EMPTY(CCODPAD)
		
		IF ! EMPTY(CDENTE)
			CCOMPCHVOD += ALLTRIM(CDENTE)
			IF ! EMPTY(CFACE)
				CCOMPCHVOD += ALLTRIM(CFACE)
			ENDIF
		ENDIF
		
		// NECESSARIO REALIZAR UM TRATAMENTO PARA CONSIDERADO A CHAVE + SEQ DO ITEM NAS EXCLUSÕES DE GUIAS ODONTO QUANDO A ORIGEM SEJA DAS GUIAS OFFILINE.
		// E CONSIDERE UM DENTE QUE TENHA VARIAS REGIÕES DIFERENTE DESSA MANEIRA SEJA ATUALIZADO O SALDO CORRETAMENTE.
        CCHKSEQ := SUBSTR(CCHKLIB,19,22)
		IF(!EMPTY(CCHKSEQ) .AND. !EMPTY(COFFLINE))
		     CCHKLIB := SUBSTR(CCHKLIB,1,22)
		     LSEQ = .T.
		ELSE
			 CCHKLIB := SUBSTR(CCHKLIB,1,18)
		ENDIF
		
			
		BE2->( DBSETORDER(1) ) //BE2_FILIAL+BE2_OPEMOV+BE2_ANOAUT+BE2_MESAUT+BE2_NUMAUT+BE2_SEQUEN
		BD6->( DBSETORDER(1) ) //BD6_FILIAL+BD6_CODOPE+BD6_CODLDP+BD6_CODPEG+BD6_NUMERO+BD6_ORIMOV+BD6_SEQUEN+BD6_CODPAD+BD6_CODPRO
		
		IF BE2->( MSSEEK( XFILIAL("BE2") + CCHKLIB ) )
			
			IIF(LSEQ, CCHKITENS  := BE2->(BE2_FILIAL + BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT + BE2_SEQUEN), CCHKITENS:= BE2->(BE2_FILIAL + BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT))
			
			WHILE !BE2->(EOF()) .AND. XFILIAL("BE2") + CCHKLIB == CCHKITENS
				
				IF ALLTRIM(CCODPAD + CCODPRO) == ALLTRIM(BE2->(BE2_CODPAD + BE2_CODPRO)) .AND. (EMPTY(CCOMPCHVOD) .OR. ALLTRIM(BE2->(BE2_DENREG)) + ALLTRIM(BE2->(BE2_FADENT)) == CCOMPCHVOD)
					
					BE2->( RECLOCK("BE2",.F.) )
					
					IF LSALDO
						
						//SE ELE ENTRAR AQUI SIGNIFICA QUE EXISTEM DUAS OU MAIS VEZES O MESMO PROCEDIMENTO NA GUIA
						IF NSALDO > BE2->BE2_SALDO
							NSALDO -= BE2->BE2_SALDO
							BE2->BE2_SALDO  := 0
						ELSE
							BE2->BE2_SALDO  := NSALDO
							LSALDO := .F.
						ENDIF
						
					ENDIF
					
					IF BE2->BE2_STATUS == "1" .AND. NINCRE > 0
						BE2->BE2_SALDO  += NINCRE
						NINCRE 			:= 0
					ENDIF
					
					IF BE2->BE2_SALDO == 0
						CSTALIB := '2'//FINALIZADA
					ELSEIF BE2->BE2_SALDO >= 0
						CSTALIB := '1'//EM ABERTO
					ENDIF
					
					BE2->BE2_STALIB := CSTALIB
					
					IF BE2->BE2_SALDO > BE2->BE2_QTDPRO
						BE2->BE2_SALDO := BE2->BE2_QTDPRO
					ENDIF
					
					BE2->( MSUNLOCK() )
					
					IF ( BD6->( MSSEEK( XFILIAL("BD6") + BE2->(BE2_OPEMOV+BE2_CODLDP+BE2_CODPEG+BE2_NUMERO) + BEA->BEA_ORIMOV + BE2->(BE2_SEQUEN+BE2_CODPAD+BE2_CODPRO) ) ) )
						
						BD6->( RECLOCK("BD6",.F.) )
						
						BD6->BD6_SALDO  := BE2->BE2_SALDO
						
						BD6->( MSUNLOCK() )
						
					ENDIF
					
				ENDIF
				
			BE2->(DBSKIP())
			ENDDO
			
		ENDIF
		
	ELSE
		
		IF ! EMPTY(CCHKLIB)
			BE2->( DBSETORDER(NIDXBE2) )
			BE2->( MSSEEK( XFILIAL("BE2") + CCHKLIB ) )
		ENDIF
		
		IF BE2->( FOUND() ) .OR. BE2->( RECNO() ) == NRECNO
			
			BE2->( RECLOCK("BE2",.F.) )
			
			IF LSTALIB
				BE2->BE2_STALIB := CSTALIB
			ENDIF
			
			IF LSALDO
				BE2->BE2_SALDO  := NSALDO
			ENDIF
			
			IF NINCRE > 0
				BE2->BE2_SALDO  += NINCRE
			ENDIF
			
			IF BE2->BE2_SALDO > BE2->BE2_QTDPRO
				BE2->BE2_SALDO := BE2->BE2_QTDPRO
				NINCRE := 0
				NSALDO := BE2->BE2_SALDO
			ENDIF			
			 
			BE2->( MSUNLOCK() )
			
			BD6->( DBSETORDER(1) ) //BD6_FILIAL+BD6_CODOPE+BD6_CODLDP+BD6_CODPEG+BD6_NUMERO+BD6_ORIMOV+BD6_SEQUEN+BD6_CODPAD+BD6_CODPRO
			IF ( BD6->( MSSEEK( XFILIAL("BD6") + BE2->(BE2_OPEMOV+BE2_CODLDP+BE2_CODPEG+BE2_NUMERO) + BEA->BEA_ORIMOV + BE2->(BE2_SEQUEN+BE2_CODPAD+BE2_CODPRO) ) ) )
				
				BD6->( RECLOCK("BD6",.F.) )
				IF LSALDO
					BD6->BD6_SALDO := NSALDO
				ENDIF
				IF NINCRE > 0
					BD6->BD6_SALDO  += NINCRE
				ENDIF
				IF BD6->BD6_SALDO > 0
					BD6->BD6_SITUAC := '1'//EM ABERTO
				ENDIF
				BD6->( MSUNLOCK() )
				
			ENDIF
			
		ENDIF
	ENDIF
ENDIF

BE2->( RESTAREA(AAREABE2) )
BD6->( RESTAREA(AAREABD6) )
	
RETURN

/*/{PROTHEUS.DOC} PLSATUCS
ATUALIZA STALIB DO CABECALHO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 09.10.08
@VERSION 1.0
/*/
FUNCTION PLSATUCS(CSTALIB,CALICAB)
	LOCAL NRECBD5 	:= BD5->( RECNO() )
	DEFAULT CSTALIB := "2"
	DEFAULT CALICAB := "BEA"
	
	IF &( CALICAB+"->( FIELDPOS('"+CALICAB+"_STALIB') )" ) > 0
		// AJUSTA CABECALHO DA GUIA BEA
		&(CALICAB+"->(RECLOCK('"+CALICAB+"',.F.))")
		&(CALICAB+"->"+CALICAB+"_STALIB") := CSTALIB
		&( CALICAB+"->( MSUNLOCK() )" )
		// AJUSTA CABECALHO DA GUIA BE5
		IF CALICAB == "BEA"
			IF BD5->( INDEXORD() ) <> 1
				BD5->( DBSETORDER(1) ) //BD5_FILIAL + BD5_CODOPE + BD5_CODLDP + BD5_CODPEG + BD5_NUMERO + BD5_SITUAC + BD5_FASE + DTOS(BD5_DATPRO) + BD5_OPERDA + BD5_CODRDA
			ENDIF
			IF BD5->( MSSEEK(XFILIAL("BD5")+BEA->(BEA_OPEMOV+BEA_CODLDP+BEA_CODPEG+BEA_NUMGUI) ) )
				BD5->( RECLOCK("BD5",.F.) )
				BD5->BD5_STALIB := CSTALIB
				BD5->( MSUNLOCK() )
			ENDIF
			// VOLTA O RECNO
			BD5->( DBGOTO(NRECBD5) )
		ENDIF
	ENDIF
RETURN

/*/{PROTHEUS.DOC} PLIDSALD
RETORNA SALDO DE CONTAS PARA IDADE DE SALDO DIOPS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.06.09
@VERSION 1.0
/*/
FUNCTION PLIDSALD(DDATSLD,CTPPROC)
	LOCAL CQUERY, CFORN, CINDEX, CLOG, CTITULO
	LOCAL NVENC, NCATEG, NDATA, NSALDO, NVEZ, NVLRBM1, NPOS
	LOCAL LPASSIVO	:= .T.
	LOCAL LATIVO	:= .T.
	LOCAL AVLRBM1, AVLRAT	:= {}
	LOCAL CCOD1	:= '104,127,134,137,138,139,140,141,142,143,144,145,116,121,124,147,148,149,150,151,152,153,154,155'		// LANCAMENTOS DE CUSTO OPERACIONAL
	LOCAL CCOD2	:= '117,122,125,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177'	// LANCAMENTO DE FATURAMENTO DE TAXA ADMINISTRATIVA
	LOCAL LDIOLD:= GETNEWPAR('MV_PLDIOLD', .F.)
	LOCAL CDIR  := ALLTRIM(MV_PAR16)
	LOCAL LPLDIOP01  := EXISTBLOCK("PLDIOP01")
	LOCAL LPLDIOP02  := EXISTBLOCK("PLDIOP02")
	/*
	ARRAY ARETATIVO:
	
	VENCIMENTO      				   							CREDITOS DE OPERAÇÕES COM PLANOS DE SAÚDE																																																		OUTROS CRÉDITOS NÃO RELACIONADOS COM PLANOS
	FINANCEIRO
	PF PRECO PRE				PF PRECO POS 					PJ PRECO PRE				PJ PRECO POS				CONVENIOS			TX ADM				PARTICIPACAO				CRD.OPERADORAS				OUTROS CRD PLANO			OUTROS CRD NAO PLANOS
	
	[1,1]	  0 (A VENCER)										[1,2]						[1,3]							[1,4]						[1,5]						[1,6]				[1,7]				[1,8]						[1,9]						[1,10]						[1,11]
	[2,1]	 30 (VENCIDOS DE 1 A 30 DIAS)
	[3,1]	 60 (VENCIDOS DE 31 A 60 DIAS)
	[4,1]	 90 (VENCIDOS DE 61 A 90 DIAS)
	[5,1]	999 (VENCIDOS A MAIS DE 90 DIAS)
	*/
	
	
	LOCAL ARETATIVO		:= {;
		{000,0,0,0,0,0,0,0,0,0,0},;
		{030,0,0,0,0,0,0,0,0,0,0},;
		{060,0,0,0,0,0,0,0,0,0,0},;
		{090,0,0,0,0,0,0,0,0,0,0},;
		{999,0,0,0,0,0,0,0,0,0,0},;
		{120,0,0,0,0,0,0,0,0,0,0},;
		{365,0,0,0,0,0,0,0,0,0,0}}
	
	
	/*
	ARRAY ARETPASSIVO:
	
	VENCIMENTO      				   				DÉBITOS DE OPERAÇÕES COM PLANOS DE SAÚDE																																									OUTROS DÉBITOS NÃO RELACIONADOS COM PLANOS
	FINANCEIRO
	EVENTOS/ SINISTROS A LIQUIDAR		COMERCIALIZAÇÃO SOBRE OPERAÇÕES			DÉBITOS COM OPERADORAS			OUTROS DÉBITOS DE OPERAÇÕES COM PLANOS		DEP.BENEFICIARIO CONTRAP/SEG.RECEBIDOS				PRESTADORES DE SERV. DE ASSISTÊNCIA A SÁUDE			DEB.AQUISICAO CARTEIRA				OUTROS DÉBITOS A PAGAR
	
	[1,1]	  0 (A VENCER)							[1,2]								[1,3]									[1,4]							[1,5]										[1,6]												[1,7]												[1,8]								[1,9]
	[2,1]	 30 (VENCIDOS DE 1 A 30 DIAS)
	[3,1]	 60 (VENCIDOS DE 31 A 60 DIAS)
	[4,1]	 90 (VENCIDOS DE 61 A 90 DIAS)
	[5,1]	120 (VENCIDOS DE 91 A 120 DIAS)
	[6,1]	365 (VENCIDOS A MAIS DE 120 DIAS)
	*/
	LOCAL ARETPASSIVO	:= {;
		{  0,0,0,0,0,0,0,0,0,0,0 },;
		{ 30,0,0,0,0,0,0,0,0,0,0,0},;
		{ 60,0,0,0,0,0,0,0,0,0,0,0},;
		{ 90,0,0,0,0,0,0,0,0,0,0,0},;
		{120,0,0,0,0,0,0,0,0,0,0,0},;
		{999,0,0,0,0,0,0,0,0,0,0,0},;
		{-30,0,0,0,0,0,0,0,0,0,0,0},;
		{-60,0,0,0,0,0,0,0,0,0,0,0}}
	
	
	LOCAL CXFILIAL   := NIL
	LOCAL CPROCEDURE := 'FIN002'
	LOCAL CTIPODATA  := "0"
	LOCAL CALIASTIT
	LOCAL NHANDLE	 := 0
	
	LOCAL LPCCBAIXA := GETNEWPAR("MV_BX10925","2") == "1"  .AND. (!EMPTY( SE5->( FIELDPOS( "E5_VRETPIS" ) ) ) .AND. !EMPTY( SE5->( FIELDPOS( "E5_VRETCOF" ) ) ) .AND. ;
		!EMPTY( SE5->( FIELDPOS( "E5_VRETCSL" ) ) ) .AND. !EMPTY( SE5->( FIELDPOS( "E5_PRETPIS" ) ) ) .AND. ;
		!EMPTY( SE5->( FIELDPOS( "E5_PRETCOF" ) ) ) .AND. !EMPTY( SE5->( FIELDPOS( "E5_PRETCSL" ) ) ) .AND. ;
		!EMPTY( SE2->( FIELDPOS( "E2_SEQBX"   ) ) ) .AND. !EMPTY( SFQ->( FIELDPOS( "FQ_SEQDES"  ) ) ) )
	
	LOCAL CPCCBAIXA   := IIF(LPCCBAIXA,"1","0")
	LOCAL CADIANT	:= ''
	LOCAL NVLRDES		:= 0
	LOCAL	NVLRDESA	:= 0
	
	LOCAL	NVLRPAA		:= 0
	LOCAL	NVLRPA 		:= 0
	LOCAL	NVLRJD 		:= 0
	LOCAL	NVLRBX 		:= 0
	LOCAL	NVLRABERTO	:= 0
	LOCAL	NVLRBXANT	:= 0
	LOCAL	NVLRPAANT	:= 0
	LOCAL	NVLRJDANT	:= 0
	LOCAL	DDATBXANT	:= CTOD('')
	LOCAL	NDTBX		:= CTOD('')
	LOCAL	NVLRBXPAR	:= 0
	LOCAL	NVLRPAPAR 	:= 0
	LOCAL	NVLRJDPAR 	:= 0
	LOCAL CBANCO := ALLTRIM(UPPER(TCGETDB()))
	
	// CHECA SE EXISTE VARIÁVEL PARA LOG
	IF VALTYPE(MV_PAR17) == 'U'
		MV_PAR17	:= 2
	ENDIF
	
	
	NTXMOEDA := 0
	
	// TIPO DE PROCESSAMENTO: 0 - NAO PROCESSA, 1 - ATIVO, 2 - PASSIVO
	DEFAULT CTPPROC	:= '0'
	
	IF CTPPROC == '1'
		//	LATIVO		:= .T.
	ELSEIF CTPPROC == '2'
		LPASSIVO	:= .T.
	ENDIF
	
	// PASSIVO
	IF LPASSIVO
		
		// SELECIONA TODOS OS TITULOS QUE PODERIAM ESTAR ABERTOS NA DATA FINAL DA APURACAO DA DIOPS
		CQUERY	:= "SELECT SE2.R_E_C_N_O_ REGNUM, E2_FILIAL, E2_VENCREA, E2_FORNECE, E2_LOJA, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO, E2_VALOR, E2_SALDO SALDO, "
		CQUERY	+= "SE2.E2_VALOR+SE2.E2_ISS+SE2.E2_IRRF+SE2.E2_COFINS+SE2.E2_PIS+SE2.E2_CSLL+SE2.E2_INSS VALBRUT FROM "
		CQUERY	+= RETSQLNAME("SE2")+" SE2, "+RETSQLNAME("SA2")+" SA2 "
		
		// NOVA QUERY CONFORME INSTRUÇÕES DA CABERJ - PRODUÇÃO
		CQUERY	+= "WHERE SE2.E2_FILIAL = '"+XFILIAL("SE2")+"' AND SA2.A2_FILIAL = '"+XFILIAL("SA2")+"' AND "
		CQUERY	+= "SE2.E2_CODRDA <> ' ' AND "
		CQUERY	+= "SE2.E2_FORNECE = SA2.A2_COD AND SE2.E2_LOJA = SA2.A2_LOJA AND "
		CQUERY	+= "( SE2.E2_BAIXA = ' ' OR SE2.E2_BAIXA > '"+DTOS(MV_PAR03)+"' ) AND "
		CQUERY	+= "(SE2.E2_ANOBASE || SE2.E2_MESBASE) >= ' ' AND (SE2.E2_ANOBASE || SE2.E2_MESBASE) <= '"+STRZERO(YEAR(MV_PAR03),4)+STRZERO(MONTH(MV_PAR03),2)+"' AND "
		CQUERY	+= "SE2.E2_ORIGEM = 'PLSMPAG' AND "
		// DESCONSIDERAR ESTES TIPOS DE TITULOS
		// MVABATIM   AB-|FB-|FC-|IR-|IN-|IS-|PI-|CF-|CS-|FU-|FE-
		// MVPROVIS   PR
		// MVPAGANT   PA
		// MV_CPNEG   NDF
		//	CQUERY	+= "SE2.E2_TIPO NOT IN ('AB-','FB-','FC-','IR-','IN-','IS-','PI-','CF-','CS-','FU-','FE-','PR ','PA ','NDF','TX ','TXA','ISS','INS') AND "
		CQUERY	+= "SE2.E2_TIPO NOT IN ('AB-','FB-','FC-','IR-','IN-','IS-','PI-','CF-','CS-','FU-','FE-','PR ','PA ','NDF','TXA') AND "
		CQUERY	+= "SE2.D_E_L_E_T_ = ' ' AND "
		CQUERY	+= "SA2.D_E_L_E_T_ = ' ' "
		//	CQUERY	+= "ORDER BY E2_FILIAL, E2_FORNECE, E2_LOJA, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO "
		
		
		// NOVA QUERY CONFORME INSTRUÇÕES DA CABERJ - OPME
		CQUERY	+= "UNION "
		
		CQUERY	+= "SELECT SE2.R_E_C_N_O_ REGNUM, E2_FILIAL, E2_VENCREA, E2_FORNECE, E2_LOJA, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO, E2_VALOR, E2_SALDO SALDO, "
		CQUERY	+= "SE2.E2_VALOR+SE2.E2_ISS+SE2.E2_IRRF+SE2.E2_COFINS+SE2.E2_PIS+SE2.E2_CSLL+SE2.E2_INSS VALBRUT "
		CQUERY	+= "FROM "+RETSQLNAME("SE2")+" SE2,"+RETSQLNAME("SF1")+" SF1,"+RETSQLNAME("SA2")+" SA2 WHERE "
		CQUERY	+= "SE2.E2_FILIAL = '"+XFILIAL("SE2")+"' AND "
		CQUERY	+= "SF1.F1_FILIAL = '"+XFILIAL("SF1")+"' AND "
		CQUERY	+= "SA2.A2_FILIAL = '"+XFILIAL("SA2")+"' AND "
		CQUERY	+= "SF1.F1_SERIE = SE2.E2_PREFIXO AND "
		CQUERY	+= "SF1.F1_DOC = SE2.E2_NUM AND "
		CQUERY	+= "SF1.F1_FORNECE = SE2.E2_FORNECE AND "
		//	--OPME
		CQUERY	+= "SE2.E2_NATUREZ = 'OPME' AND "
		CQUERY	+= "SE2.E2_FORNECE = SA2.A2_COD AND "
		CQUERY	+= "SE2.E2_LOJA = SA2.A2_LOJA AND "
		IF CBANCO=="ORACLE"
			CQUERY	+= "SUBSTR(SE2.E2_EMISSAO, 1, 6) <= '"+STRZERO(YEAR(MV_PAR03),4)+STRZERO(MONTH(MV_PAR03),2)+"' AND "
		ELSE
			CQUERY	+= "SUBSTRING(SE2.E2_EMISSAO, 1, 6) <= '"+STRZERO(YEAR(MV_PAR03),4)+STRZERO(MONTH(MV_PAR03),2)+"' AND "
		ENDIF
		CQUERY	+= "( SE2.E2_BAIXA = ' ' OR SE2.E2_BAIXA > '"+DTOS(MV_PAR03)+"' ) AND "
		// DESCONSIDERAR ESTES TIPOS DE TITULOS
		// MVABATIM   AB-|FB-|FC-|IR-|IN-|IS-|PI-|CF-|CS-|FU-|FE-
		// MVPROVIS   PR
		// MVPAGANT   PA
		// MV_CPNEG   NDF
		//	CQUERY	+= "SE2.E2_TIPO NOT IN ('AB-','FB-','FC-','IR-','IN-','IS-','PI-','CF-','CS-','FU-','FE-','PR ','PA ','NDF','TX ','TXA','ISS','INS') AND "
		CQUERY	+= "SE2.E2_TIPO NOT IN ('AB-','FB-','FC-','IR-','IN-','IS-','PI-','CF-','CS-','FU-','FE-','PR ','PA ','NDF','TXA') AND "
		CQUERY	+= "SE2.D_E_L_E_T_ = ' ' AND "
		CQUERY	+= "SF1.D_E_L_E_T_ = ' ' AND "
		CQUERY	+= "SA2.D_E_L_E_T_ = ' ' "
		//	CQUERY	+= "ORDER BY E2_FILIAL, E2_FORNECE, E2_LOJA, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO "
		
		// NOVA QUERY CONFORME INSTRUÇÕES DA CABERJ - REEMBOLSO
		CQUERY	+= "UNION "
		
		CQUERY	+= "SELECT SE2.R_E_C_N_O_ REGNUM, E2_FILIAL, E2_VENCREA, E2_FORNECE, E2_LOJA, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO, E2_VALOR, E2_SALDO SALDO, "
		CQUERY	+= "SE2.E2_VALOR+SE2.E2_ISS+SE2.E2_IRRF+SE2.E2_COFINS+SE2.E2_PIS+SE2.E2_CSLL+SE2.E2_INSS VALBRUT "
		CQUERY	+= "FROM "+RETSQLNAME("SE2")+" SE2,"+RETSQLNAME("SE1")+" SE1 WHERE "
		CQUERY	+= "SE2.E2_FILIAL = '"+XFILIAL("SE2")+"' AND "
		CQUERY	+= "SE1.E1_FILIAL = '"+XFILIAL("SE1")+"' AND "
		CQUERY	+= "SE2.E2_PREFIXO = 'RLE' AND "
		CQUERY	+= "SE1.E1_PREFIXO = SE2.E2_PREFIXO AND "
		CQUERY	+= "SE1.E1_TIPO = 'NCC' AND "
		CQUERY	+= "SE1.E1_NUM = SE2.E2_NUM AND "
		IF CBANCO=="ORACLE"
			CQUERY	+= "SUBSTR(SE1.E1_EMISSAO,1,6) >= ' ' AND SUBSTR(SE1.E1_EMISSAO,1,6) <= '"+STRZERO(YEAR(MV_PAR03),4)+STRZERO(MONTH(MV_PAR03),2)+"' AND "
		ELSE
			CQUERY	+= "SUBSTRING(SE1.E1_EMISSAO,1,6) >= ' ' AND SUBSTRING(SE1.E1_EMISSAO,1,6) <= '"+STRZERO(YEAR(MV_PAR03),4)+STRZERO(MONTH(MV_PAR03),2)+"' AND "
		ENDIF
		//	CQUERY	+= "( SE2.E2_BAIXA = ' ' OR SE2.E2_BAIXA > '"+DTOS(MV_PAR03)+"' ) AND "
		// DESCONSIDERAR ESTES TIPOS DE TITULOS
		// MVABATIM   AB-|FB-|FC-|IR-|IN-|IS-|PI-|CF-|CS-|FU-|FE-
		// MVPROVIS   PR
		// MVPAGANT   PA
		// MV_CPNEG   NDF
		//	CQUERY	+= "SE2.E2_TIPO NOT IN ('AB-','FB-','FC-','IR-','IN-','IS-','PI-','CF-','CS-','FU-','FE-','PR ','PA ','NDF','TX ','TXA','ISS','INS') AND "
		CQUERY	+= "SE2.E2_TIPO NOT IN ('AB-','FB-','FC-','IR-','IN-','IS-','PI-','CF-','CS-','FU-','FE-','PR ','PA ','NDF','TXA') AND "
		CQUERY	+= "SE1.D_E_L_E_T_ = ' ' AND "
		CQUERY	+= "SE2.D_E_L_E_T_ = ' ' "
		//ORDER BY E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO
		
		CQUERY	+= "ORDER BY E2_FILIAL, E2_FORNECE, E2_LOJA, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO "
		
		CALIAS	:= "TRBPAS"
		CQUERY	:= CHANGEQUERY(CQUERY)
		IF SELECT(CALIAS) > 0
			TRBPAS->(DBCLOSEAREA())
		ENDIF
		
		NHANDLE := FCREATE("\QRYDIOP.SQL")
		IF NHANDLE = -1
			FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - LOGQUERY " + STR(FERROR()) , 0, 0, {})	
		ELSE
			FWRITE(NHANDLE, CQUERY + CRLF)
			FCLOSE(NHANDLE)
		ENDIF
		
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CQUERY),CALIAS,.T.,.F.)

		IF TRBPAS->(EOF())
			TRBPAS->(DBCLOSEAREA())
			LPASSIVO	:= .F.
		ELSE
			// SE DEVE GERAR O ARQUIVO ESPEOLHO
			IF MV_PAR15 == 1
				
				// CRIAR ARQUIVO TEXTO VAZIO A PARTIR DO ROOT PATH NO SERVIDOR
				NHANDLE := FCREATE(CDIR+"\TRBPAS.TXT")
				IF NHANDLE = -1

					FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - FERROR " + STR(FERROR()) , 0, 0, {})	
					
				ENDIF
				
			ENDIF
		ENDIF
		
		IF LPASSIVO
			SA2->(DBSETORDER(1))
			
			TRBPAS->(DBGOTOP())
			WHILE TRBPAS->(!EOF())
				CFORN	:= TRBPAS->(E2_FORNECE+E2_LOJA)
				WHILE TRBPAS->(!EOF()) .AND. CFORN == TRBPAS->(E2_FORNECE+E2_LOJA)
					SE2->(DBGOTO(TRBPAS->REGNUM))
					IF SA2->(DBSEEK(XFILIAL("SA2")+TRBPAS->(E2_FORNECE+E2_LOJA), .F.))
						
						// EXECUTA CLASSIFICAÇÃO PADRÃO
						// 2- EVENTOS/ SINISTROS A LIQUIDAR - CONTAS 2111791 / 2111792 / 2112791 / 2112792
						IF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='02').OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,7) $ '2111791/2111792/2112791/2112792'
							NCATEG	:= 2
							// 3- COMERCIALIZAÇÃO SOBRE OPERAÇÕES - CONTA 2134
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='03') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,4) $ '2134'
							NCATEG	:= 3
							// 4- DÉBITOS COM OPERADORAS - CONTA 2135
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='04') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,4) $ '2135'
							NCATEG	:= 4
							// 5- OUTROS DÉBITOS DE OPERAÇÕES COM PLANOS - CONTAS 2131 / 2133 / 2138
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='05') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,4) $ '2131/2133/2138'
							NCATEG	:= 5
							
							// 6 - DEPÓSITOS DE BENEFICIÁRIOS - CONTRAPREST/ SEGUROS RECEBIDOS - CONTA 218519310
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='06') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,9) $ '218519310'
							NCATEG	:= 6
							
							// 7- PRESTADORES DE SERV. DE ASSISTÊNCIA A SÁUDE - SUBGRUPO 214
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='07') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,3) $ '214'
							NCATEG	:= 7
							
							// 8- DÉBITOS COM AQUISIÇÃO DE CARTEIRA - CONTA 2186
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='08') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,4) $ '2186'
							NCATEG	:= 8
							// 10 - EVENTOS SINISTROS A LIQUIDAR SUS
						ELSEIF (SA2->(FIELDPOS("A2_CLASDIO"))> 0 .AND. SA2->A2_CLASDIO=='09') .OR. LDIOLD .AND. SUBS(SA2->A2_CONTA,1,7) $ '2111902/21112902'
							NCATEG	:= 10
							//11- TRIBUTOS E ENCARGOS
						ELSEIF  SE2->E2_TIPO $ MVISS+"/"+MVTAXA+"/"+MVTXA+"/"+MVINSS+"/"+"SES"+"/"+"CID" //SE2->E2_TIPO $"INS/ISS/TX "
							NCATEG	:= 11
						ELSE
							NCATEG	:= 9
							IF  PLSALIASEX("BB1") .AND. SIX->(DBSEEK("BB11",.F.))
								PLGRVLOG('CONTA DO FORNECEDOR '+SA2->A2_COD+'/'+SA2->A2_LOJA+' NAO ATENDEU A CLASSIFICACAO DO DIOPS. VERIFIQUE.', 'DIOPS-IDSLD-P')
							ENDIF
						ENDIF
						
						//PONTO DE ENTRADA PARA REGRA ESPECIFICA DO USUARIO NA
						//CLASSIFICACAO DO PASSIVO NO DIOPS
						IF LPLDIOP01
							NNEWCAT:= EXECBLOCK("PLDIOP01",.F.,.F.,{TRBPAS->REGNUM, TRBPAS->(E2_FORNECE+E2_LOJA), NCATEG } )
							NCATEG := IIF(NNEWCAT >= 2 .AND. NNEWCAT <= 9, NNEWCAT, NCATEG)
						ENDIF
						
						//ANALISA DATA DE VENCIMENTO DO TITULO EM RELACAO A
						//COMPETENCIA EMITIDA PARA CLASSIFICAR NA LINHA CORRETA
						NDATA	:= ( MV_PAR03 - IIF(MV_PAR08==1, SE2->E2_VENCTO, SE2->E2_VENCREA) )
						IF NDATA <= 0
							NVENC	:= 1		// SE AINDA NÃO VENCEU
							/*
							IF NDATA >= -30 .AND. NDATA <=-1
								NVENC:= 7
							ELSEIF NDATA >= -60 .AND. NDATA <=-31
								NVENC:= 8
							ENDIF
							*/
						ELSEIF NDATA <= 30 .AND. NDATA >= 1
							NVENC	:= 2		// VENCIDOS DE 1 A 30 DIAS
						ELSEIF NDATA <= 60 .AND. NDATA >= 31
							NVENC	:= 3		// VENCIDOS DE 31 A 60 DIAS
						ELSEIF NDATA <= 90 .AND. NDATA >= 61
							NVENC	:= 4		// VENCIDOS DE 61 A 90 DIAS
						ELSEIF NDATA <= 120 .AND. NDATA >= 91
							NVENC	:= 5		// VENCIDOS DE 91 A 120 DIAS
						ELSEIF NDATA >= 121
							NVENC 	:= 6		// VENCIDOS A MAIS DE 120 DIAS
						ENDIF
						
						// COLOCAR TRATAMENTO PARA SALDO DO TITULO CFE RELATÓRIO
						
						NVLRDES		:= 0
						NVLRDESA	:= 0
						
						NVLRPAA		:= 0
						NVLRPA 		:= 0
						NVLRJD 		:= 0
						NVLRBX 		:= 0
						NVLRABERTO	:= 0
						NVLRBXANT	:= 0
						NVLRPAANT	:= 0
						NVLRJDANT	:= 0
						DDATBXANT	:= CTOD('')
						NDTBX		:= CTOD('')
						NVLRBXPAR	:= 0
						NVLRPAPAR 	:= 0
						NVLRJDPAR 	:= 0
						
						
						IF SE5->( MSSEEK(XFILIAL("SE5")+SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO+SE2->E2_FORNECE+SE2->E2_LOJA) )
							
							WHILE !SE5->( EOF() ) .AND. SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO+SE5->E5_CLIFOR+SE5->E5_LOJA ==;
									SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO+SE2->E2_FORNECE+SE2->E2_LOJA
								
								// IGNORA DESCONTOS, JUROS, CANCELAMENTOS, RECEBIMENTOS E OUTROS TIPOS...
								IF SE5->E5_RECPAG == 'R' .OR.;
										SE5->E5_SITUACA == 'C' .OR. (SE5->E5_TIPODOC $ "D2, JR, J2, TL, MT, M2, CM, C2, TR, TE")
									//	SE5->E5_MOTBX == GETNEWPAR("MV_PLMOTBC","CAN") .OR.;  EM 06/09/2009 ATENDER AO TITULO 2719 BAXADO POR CAN
									//(SE5->E5_TIPODOC $ "DC, D2, JR, J2, TL, MT, M2, CM, C2, TR, TE") EM 06/09/2009
									
									SE5->( DBSKIP() )
									LOOP
								ENDIF
								
								// PROCESSA OS ESTORNOS DAS BAIXAS... SE HOUVEREM.
								CQUERY := "SELECT SUM(E5_VALOR) ESTORNO FROM "+RETSQLNAME("SE5")+" WHERE "
								CQUERY += "E5_FILIAL='"+XFILIAL("SE5")+"' AND "
								CQUERY += "E5_PREFIXO='"+SE5->E5_PREFIXO+"' AND "
								CQUERY += "E5_NUMERO='"+SE5->E5_NUMERO+"' AND "
								CQUERY += "E5_PARCELA='"+SE5->E5_PARCELA+"' AND "
								CQUERY += "E5_TIPO='"+SE5->E5_TIPO+"' AND "
								CQUERY += "E5_CLIFOR='"+SE5->E5_CLIFOR+"' AND "
								CQUERY += "E5_LOJA='"+SE5->E5_LOJA+"' AND "
								CQUERY += "E5_SEQ='"+SE5->E5_SEQ+"' AND "
								CQUERY += "E5_TIPODOC='ES' AND "
								CQUERY += "E5_DATA < '"+DTOS(DDATAATE)+"' AND "
								CQUERY += "D_E_L_E_T_<>'*'"
								
								DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CQUERY)),"EST",.T.,.F.)
								
								NVLREST := EST->ESTORNO
								
								EST->( DBCLOSEAREA() )
								
								// FILTRA DATAS DOS PARAMETROS...
								IF !(DTOS(SE5->E5_DATA) >=  DTOS(DDATADE) .AND. DTOS(SE5->E5_DATA) <=  DTOS(DDATAATE))
									
									// SE A DATA DA BAIXA FOR POSTERIOR A DATA FINAL DO RELATORIO, O TITULO SERA CONSIDERADO COMO EM ABERTO.
									IF SE5->E5_DATA > DDATAATE //.AND. SE2->E2_EMISSAO <= DDATAATE
										NVLRABERTO += SE5->E5_VALOR
										NVLRABERTO -= NVLREST
									ENDIF
									
									
									//JEAN - CRIADO NOVO TRECHO PARA PERMITIR OBTER VALORES ANTERIORES AS DATAS
									// SE FOR PA, ACUMULAR NA MATRIZ NESTE PONTO E DESCARREGAR DEPOIS...
									IF SE5->E5_DATA < DDATADE
										IF ALLTRIM(SE5->E5_TIPODOC) == 'CP' .AND. ALLTRIM(SE5->E5_MOTBX) == 'CMP'
											NVLRPAANT += SE5->E5_VALOR
											NVLRPAANT -= NVLREST // DIMINUI O VALOR DO ESTORNO SE HOUVER
											NVLRPA    += SE5->E5_VALOR
											//SOMAR VALOR DESCONTO  PARCIAL, CASO OCORRA...
										ELSEIF ALLTRIM(SE5->E5_TIPODOC) == 'DC'
											NVLRDESA += SE5->E5_VALOR
											NVLRDESA -= NVLREST //' DIMINUI O VALOR DO ESTORNO SE HOUVE
											NVLRDES  += SE5->E5_VALOR
											// DESCONTO POR MOTIVO JUDICIAL..
										ELSEIF ALLTRIM(SE5->E5_MOTBX) == 'DPJ'
											NVLRJDANT += SE5->E5_VALOR
											NVLRJDANT -= NVLREST //' DIMINUI O VALOR DO ESTORNO SE HOUVER
											NVLRJD    += SE5->E5_VALOR
											//SOMAR VALOR DESCONTO  PARCIAL, CASO OCORRA...
										ELSEIF ALLTRIM(SE5->E5_MOTBX) == 'DC'
											NVLRDESA += SE5->E5_VALOR
											NVLRDESA -= NVLREST //' DIMINUI O VALOR DO ESTORNO SE HOUVE
											NVLRDES  += SE5->E5_VALOR
											//SOMAR VALOR BAIXADO PARCIAL, CASO OCORRA...
										ELSE
											NVLRBXANT += SE5->E5_VALOR
											NVLRBXANT -= NVLREST
											DDATBXANT := IIF(DDATBXANT <= SE5->E5_DATA .AND. SE5->E5_DATA <= DDATAATE,SE5->E5_DATA,DDATBXANT)
											NVLRBX    += SE5->E5_VALOR
										ENDIF
									ENDIF
									
									SE5->( DBSKIP() )
									NVLREST:=0
									LOOP
									
								ENDIF
								
								// SE FOR PA, ACUMULAR NA MATRIZ NESTE PONTO E DESCARREGAR DEPOIS...
								IF ALLTRIM(SE5->E5_TIPODOC) == 'CP' .AND. ALLTRIM(SE5->E5_MOTBX) == 'CMP'
									NVLRPA += SE5->E5_VALOR
									NVLRPA -= NVLREST // DIMINUI O VALOR DO ESTORNO SE HOUVER
								ELSEIF ALLTRIM(SE5->E5_TIPODOC) == 'DC'
									NVLRDES += SE5->E5_VALOR
									NVLRDES -= NVLREST //' DIMINUI O VALOR DO ESTORNO SE HOUVE
									// DESCONTO POR MOTIVO JUDICIAL..
								ELSEIF ALLTRIM(SE5->E5_MOTBX) == 'DPJ'
									NVLRJD += SE5->E5_VALOR
									NVLRJD -= NVLREST // DIMINUI O VALOR DO ESTORNO SE HOUVER
								ELSE
									NVLRBX += SE5->E5_VALOR
									NVLRBX -= NVLREST // DIMINUI O VALOR DO ESTORNO SE HOUVER
								ENDIF
								IF (NVLRBX <> 0 .OR. NVLRJD <> 0 .OR. NVLRPA <> 0 ) .AND. ;
										((ALLTRIM(SE5->E5_TIPODOC) <> 'CP'  .OR. ALLTRIM(SE5->E5_TIPODOC) <> 'DC')  .AND.;
										ALLTRIM(SE5->E5_MOTBX) <> 'CMP' .AND. ;
										ALLTRIM(SE5->E5_MOTBX)   <> 'BNF' .AND. ALLTRIM(SE5->E5_MOTBX) <> 'DPJ')
									NDTBX := SE5->E5_DATA
									// FGRAVATRB()
									NVLRBX := (NVLRBX + NVLRJD + NVLRPA + NVLRDES )
									IF  (NVLRBX + SE2->E2_DECRESC) < SE2->E2_VALOR
										NVLRPA := (NVLRBX - NVLRJD )
										NVLRBX := 0
										NVLRABERTO := 0
									ENDIF
								ENDIF
								SE5->( DBSKIP() )
								NVLREST:=0
							ENDDO
							
						ELSE
							
							NVLRABERTO += SE2->(E2_VALOR)
							
							
						ENDIF
						NSALDO := NVLRABERTO
						
						//TRIBUTOS E ENCARGOS (VALOR DOS IMPOSTOS)
						
						
						NSALDO := TRBPAS->VALBRUT
						IF NSALDO > 0
							ARETPASSIVO[NVENC,NCATEG] += NSALDO
						ENDIF
						
						
						// SE DEVE ATUALIZAR O ARQUIVO
						IF MV_PAR15 == 1 .AND. NHANDLE > 0
							CSTR := STR(TRBPAS->REGNUM,20,0)+';'+TRBPAS->E2_FILIAL+';'+TRBPAS->E2_VENCREA+';'+TRBPAS->E2_FORNECE+';'+TRBPAS->E2_LOJA+';'+TRBPAS->E2_PREFIXO+';'
							CSTR += TRBPAS->E2_NUM+';'+TRBPAS->E2_PARCELA+';'+TRBPAS->E2_TIPO+';'+STR(TRBPAS->E2_VALOR,20,2)+';'+STR(NCATEG,20,0)+';'+STR(NVENC,20,0)+';'+STR(NSALDO,20,2)
							FWRITE(NHANDLE, CSTR + CRLF)
						ENDIF
						
					ENDIF
					TRBPAS->(DBSKIP())
				ENDDO
			ENDDO
			TRBPAS->(DBCLOSEAREA())
			// SE OPTOU POR GERAR O ARQUIVO ESPELHO
			IF MV_PAR15 == 1 .AND. NHANDLE > 0
				FCLOSE(NHANDLE)
				//			TRBPS2->(DBCLOSEAREA())
			ENDIF
		ENDIF
	ENDIF
	
	
	
	// ATIVO
	IF LATIVO
		
		// SELECIONA TODOS OS TITULOS QUE PODERIAM ESTAR ABERTOS NA DATA FINAL DA APURAÇÃO DA DIOPS
		IF "ORACLE" $ ALLTRIM(TCGETDB())
			CQUERY	:= "SELECT /*+ INDEX_ASC(SE1 "+RETSQLNAME('SE1')+"7)*/ SE1.R_E_C_N_O_ REGNUM, SE1.E1_FILIAL, SE1.E1_VENCREA, SE1.E1_CLIENTE, SE1.E1_LOJA,  "
		ELSE
			CQUERY	:= "SELECT SE1.R_E_C_N_O_ REGNUM, SE1.E1_FILIAL, SE1.E1_VENCREA, SE1.E1_CLIENTE, SE1.E1_LOJA, "
		ENDIF
		CQUERY	+= "SE1.E1_PREFIXO, SE1.E1_NUM, SE1.E1_PARCELA, SE1.E1_TIPO, SE1.E1_ORIGEM, SE1.E1_VALOR FROM "+RETSQLNAME('SE1')+" SE1 WHERE "
		CQUERY	+= "SE1.D_E_L_E_T_ <> '*' AND ( SE1.E1_SALDO > 0 OR SE1.E1_BAIXA >= '"+DTOS(MV_PAR02)+"' ) AND "
		// FILTRO DA EMISSAO
		CQUERY  += "SE1.E1_EMISSAO <= '"+ DTOS(MV_PAR03)+"' AND "
		// SE CONSIDERA O VENCIMENTO NOMINAL DO TITULO
		IF MV_PAR08 == 1
			CQUERY	+= "SE1.E1_VENCTO >= '"+  DTOS(MV_PAR09)+"' AND "
		ELSE
			CQUERY	+= "SE1.E1_VENCREA >= '"+ DTOS(MV_PAR09)+"' AND "
		ENDIF
		CQUERY	+= "SE1.E1_FILIAL = '"+XFILIAL('SE1')+"' "
		CQUERY	+= "ORDER BY E1_FILIAL, E1_CLIENTE, E1_LOJA, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO "
		
		CALIAS	:= "TRBATV"
		CQUERY	:= CHANGEQUERY(CQUERY)
		IF SELECT(CALIAS) > 0
			TRBATV->(DBCLOSEAREA())
		ENDIF
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CQUERY),CALIAS,.T.,.F.)
		//CINDEX	:= CRIATRAB(NIL,.F.)
		//INDREGUA(CALIAS, CINDEX, "E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO", , , , .T. )
		
		IF TRBATV->(EOF())
			TRBATV->(DBCLOSEAREA())
			LATIVO	:= .F.
		ELSE
			IF MV_PAR15 == 1
			
				// CRIAR ARQUIVO TEXTO VAZIO A PARTIR DO ROOT PATH NO SERVIDOR
				NHANDLE := FCREATE(CDIR+"\TRBATF.TXT")
				
				IF NHANDLE = -1
					FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - FERROR " + STR(FERROR()) , 0, 0, {})
				ENDIF
				
			ENDIF
			
		ENDIF
		
		SA1->(DBSETORDER(1))
		BM1->(DBSETORDER(4))
		BI3->(DBSETORDER(1))
		
		IF LATIVO
			TRBATV->(DBGOTOP())
			WHILE TRBATV->(!EOF())
				CFORN	:= TRBATV->(E1_CLIENTE+E1_LOJA)
				IF SA1->(DBSEEK(XFILIAL("SA1")+CFORN, .F.))
					
					WHILE TRBATV->(!EOF()) .AND. CFORN == TRBATV->(E1_CLIENTE+E1_LOJA)
						
						SE1->(DBGOTO(TRBATV->REGNUM))
						CADIANT		:= IIF( (SE1->E1_TIPO $ MVRECANT+"/"+MVPAGANT+"/"+MV_CRNEG+"/"+MV_CPNEG), "1","0")
						
						// NAO CONSIDERA TITULOS COM EMISSAO FUTURA...
						IF SE1->E1_EMISSAO > MV_PAR03
							TRBATV->(DBSKIP())
							LOOP
						ENDIF
						
						//VERIFICO SE O TITULO ESTA TOTALMENTE BAIXADO, E  SE A BAIXA
						//FOI REALIZADA ANTES DA DATA DE COMPETENCIA DO DIOPS
						IF !EMPTY(SE1->E1_BAIXA) .AND. (SE1->E1_SALDO == 0 .AND. SE1->E1_BAIXA <= MV_PAR03)
							TRBATV->(DBSKIP())
							LOOP
						ENDIF
						
						
						// BUSCA O SALDO DO TITULO NA DATA DA COMPETENCIA DA DIOPS
						// NSALDO	:= SALDOTIT( SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_NATUREZ, 'R', SE1->E1_CLIENTE, 1, ,MV_PAR03,SE1->E1_LOJA,,NIL,1)
						// CHAMADA DA FUNCAO SALDOTIT() RESULTOU PROBLEMA DE PERFORMANCE, MODIFICADO PARA EXECUCAO DO CONTEUDO DA FUNCAO NA ROTINA
						// FUNCTION SALDOTIT(CPREFIXO,CNUMERO,CPARCELA,CTIPO,CNATUREZA,CCART,CCLIFOR,NMOEDA,DDATA,DDATABAIXA,CLOJA,CFILTIT,NTXMOEDA,NTIPODATA)
						CPREFIXO	:= SE1->E1_PREFIXO
						CNUMERO		:= SE1->E1_NUM
						CPARCELA	:= SE1->E1_PARCELA
						CTIPO		:= SE1->E1_TIPO
						CNATUREZA	:= SE1->E1_NATUREZ
						CCART		:= 'R'
						CCLIFOR		:= SE1->E1_CLIENTE
						NMOEDA		:= 1
						DDATA       := DDATABASE
						DDATABAIXA	:= MV_PAR03
						CLOJA		:= SE1->E1_LOJA
						// CFILTIT		:=
						// NTXMOEDA	:=
						NTIPODATA	:= 1
						NSALDO     := 0
						
						IF NTIPODATA == 1
							CTIPODATA := "0"  // E5_DATA
						ELSEIF NTIPODATA == 2
							CTIPODATA := "1"  // E5_DTDISPO
						ELSE
							CTIPODATA := "2"  // E5_DTDIGIT
						ENDIF
						
						
						IF EXISTPROC( CPROCEDURE, VERIDPROC() ) .AND. ( TCSRVTYPE() <> "AS/400" )
							ARESULT := {}
							
							CALIASTIT := "SE1"
							DBSELECTAREA("SE1")
							NSALDO    := SE1->E1_VALOR+SE1->E1_SDACRES-SE1->E1_SDDECRE
							NMOEDATIT := SE1->E1_MOEDA
							CCLIFOR   := IIF(EMPTY(CCLIFOR),SE1->E1_CLIENTE,CCLIFOR)
							CLOJA     := IIF(EMPTY(CLOJA  ),SE1->E1_LOJA,CLOJA)
							
							NMOEDA    := ((NMOEDA+1.00)-1.00)
							NMOEDATIT := ((NMOEDATIT+1.00)-1.00)
							
							ARESULT := TCSPEXEC( XPROCEDURES(CPROCEDURE),;
								CPREFIXO,                CNUMERO,;
								CPARCELA,                CTIPO,;
								CCLIFOR,                 DTOS(DDATA),;
								DTOS(DDATABAIXA),        CLOJA,;
								DTOS(DDATABASE),         CFILANT,;
								NSALDO,                  NMOEDATIT,;
								CPAISLOC,                CTIPODATA,;
								CPCCBAIXA,               CCART, CADIANT )
							
							NSALDO := ARESULT[1]
							// ZERA O SALDO DEVIDO PROBLEMA DE ARREDONDAMENTO NOS JUROS, OU SEJA, O VALOR DOS JUROS QUE EH GRAVADO COM
							// 2 CASAS DECIMAIS, GERA DIFERENA NA RECOMPOSICAO DO SALDO NO TITULO
							// EXEMPLO: TITULO COM VALOR DE 24.450, COM E1_PORCJUR DE 0.13 E TRES DIAS DE ATRASO, GRAVA EM E5_JUROS O VALOR
							// DE 95.36, SENDO QUE O VALOR DOS JUROS SERIA 95.355
							// MOVIMENTACAO NO SE5:
							//	      BAIXA	JUROS	       SALDO
							//		 		            24.450,00
							//-------------------------------
							//		4.001,04	95,36 	20.544,32 3 DIAS APOS VENCTO.
							//		2.100,95		      18.443,37 MESMA DATA
							//		3.474,23		      14.969,14 MESMA DATA
							//		6.000,00		       8.969,14 5 DIAS APOS VENCTO
							//		5.060,00		       3.909,14 10 DIAS APOS VENCTO
							//		3.919,29	10,16	        0,01 12 DIAS APOS VENCTO
							IF EMPTY(SE1->E1_SALDO) .AND. ABS(NSALDO) <= 0.009
								NSALDO := 0
							ENDIF
						ELSEIF EXISTPROC( CPROCEDURE, VERIDPROC() ) .AND. ( TCSRVTYPE() == "AS/400" )
							ARESULT := {}
							CXFILIAL := BUILDSTRFIL("SE5")
							
							DBSELECTAREA("SE1")
							NSALDO    := SE1->E1_VALOR+SE1->E1_SDACRES-SE1->E1_SDDECRE
							NMOEDATIT := SE1->E1_MOEDA
							
							NMOEDA    := ((NMOEDA+1.00)-1.00)
							NMOEDATIT := ((NMOEDATIT+1.00)-1.00)
							
							ARESULT := TCSPEXEC( XPROCEDURES(CPROCEDURE), CXFILIAL,;
								CPREFIXO,                CNUMERO,;
								CPARCELA,                CTIPO,;
								CNATUREZA,               CCART,;
								CCLIFOR,                 NMOEDA,;
								DTOS(DDATA),             DTOS(DDATABAIXA),;
								CLOJA,                   DTOS(DDATABASE),;
								CFILANT,                 '',;
								NSALDO,                  NMOEDATIT, CTIPODATA)
							
							NSALDO := ARESULT[1]
							// ZERA O SALDO DEVIDO PROBLEMA DE ARREDONDAMENTO NOS JUROS, OU SEJA, O VALOR DOS JUROS QUE EH GRAVADO COM
							// 2 CASAS DECIMAIS, GERA DIFERENA NA RECOMPOSICAO DO SALDO NO TITULO
							// EXEMPLO: TITULO COM VALOR DE 24.450, COM E1_PORCJUR DE 0.13 E TRES DIAS DE ATRASO, GRAVA EM E5_JUROS O VALOR
							// DE 95.36, SENDO QUE O VALOR DOS JUROS SERIA 95.355
							// MOVIMENTACAO NO SE5:
							//	      BAIXA	JUROS	       SALDO
							//		 		            24.450,00
							//-------------------------------
							//		4.001,04	95,36 	20.544,32 3 DIAS APOS VENCTO.
							//		2.100,95		      18.443,37 MESMA DATA
							//		3.474,23		      14.969,14 MESMA DATA
							//		6.000,00		       8.969,14 5 DIAS APOS VENCTO
							//		5.060,00		       3.909,14 10 DIAS APOS VENCTO
							//		3.919,29	10,16	        0,01 12 DIAS APOS VENCTO
							IF EMPTY(SE1->E1_SALDO) .AND. ABS(NSALDO) <= 0.009
								NSALDO := 0
							ENDIF
						ELSE
							NSALDO	:= XSALDOTIT( SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_NATUREZ, 'R', SE1->E1_CLIENTE, 1, ,MV_PAR03,SE1->E1_LOJA,,NIL,1)
						ENDIF
						
						// FINAL DA FUNCAO SALDOTIT()
						IF NSALDO > 0
							AVLRAT	:= {}
							AVLRBM1	:= {}
							NVLRBM1	:= 0
							
							/*
							CLASSIFICACAO DAS CATEGORIAS CONFORME DIVISAO ABAIXO
							+-----------------------------------------------------------+-----------------------------------------------------------+
							|									CONTRAPRESTACAO PECUNIARIA/PREMIOS A RECEBER                                        |
							|									MENSALIDADES/FATURAS/SEGUROS A RECEBER												|
							+-----------------------------------------------------------+-----------------------------------------------------------+
							|PLANOS INDIVIDUAIS/FAMILIARES MENSALIDADES (PESS. FISICA)	|	PLANOS COLETIVOS FATURAS (PESSOA JURIDICA)				|
							+---------------------------+-------------------------------+-------------------------------+---------------------------+
							|2-PRECO PRE-ESTABELECIDO	| 3-PREÇO POS-ESTABELECIDO		|	4- PRECO PRE-ESTABELECIDO	| 5- PRECO POS-ESTABELECIDO	|
							+-----------------------------------------------------------+-----------------------------------------------------------+
							
							+-----------------------------------------------------------------------------------------------------------------------+
							|6-CONVENIOS A RECEBER / OUTRAS                                        													|
							+-----------------------------------------------------------------------------------------------------------------------+
							+-----------------------------------------------------------------------------------------------------------------------+
							|7-CRÉDITOS DE OPERAÇÕES DE ADMINISTRAÇÃO DE BENEFÍCIOS		            												|
							+-----------------------------------------------------------------------------------------------------------------------+
							+-----------------------------------------------------------------------------------------------------------------------+
							|8-PARTICIPACAO DOS BENEFICIARIOS EM EVENTOS / SINISTROS                      											|
							+-----------------------------------------------------------------------------------------------------------------------+
							+-----------------------------------------------------------------------------------------------------------------------+
							|9-CREDITOS DE OPERADORAS	                                        													|
							+-----------------------------------------------------------------------------------------------------------------------+
							+-----------------------------------------------------------------------------------------------------------------------+
							|10-OUTROS CREDITOS DE OPERACOES COM PLANOS                                        										|
							+-----------------------------------------------------------------------------------------------------------------------+
							+-----------------------------------------------------------------------------------------------------------------------+
							|11-OUTROS CREDITOS NAO RELACIONADOS COM PLANOS                                        									|
							+-----------------------------------------------------------------------------------------------------------------------+
							*/
							
							// 11- OUTROS CREDITOS NAO RELACIONADOS COM PLANOS
							// E1_ORIGEM SEM PREENCHIMENTO EM COMPRAS DE PROCEDIMENTOS PAGAS NO ATO VIA PLS
							IF !SUBS(TRBATV->E1_ORIGEM,1,3) $ 'PLS' .AND. !EMPTY(TRBATV->E1_ORIGEM)
								NCATEG	:= 11
								AADD( AVLRAT, { NCATEG, NSALDO } )
								NVLRBM1	+= NSALDO
								
							ELSE
								
								IF BM1->(DBSEEK(XFILIAL('BM1')+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO),.F.))
									
									CTITULO := SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)
									WHILE !BM1->(EOF()) .AND. BM1->(BM1_PREFIX+BM1_NUMTIT+BM1_PARCEL+BM1_TIPTIT) == CTITULO
										
										IF !(BM1->BM1_TIPO == '1')
											BM1->(DBSKIP())
											LOOP
										ENDIF
										NVLRBM1	+= BM1->BM1_VALOR
										
										// MENSALIDADE / OPCIONAIS / CARTAO / TAXA INSCRICAO
										IF ALLTRIM(BM1->BM1_CODTIP) $ '101,103,107,110,118,102,133,146'
											
											BI3->(DBSEEK(XFILIAL('BI3')+PLSINTPAD()+BM1->BM1_CODEVE))
											// PRECO PRE-ESTABELECIDO
											IF BI3->BI3_MODPAG == '1'
												// 2- PRECO PRE-ESTABELECIDO - PLANO FAMILIAR
												IF !EMPTY(BM1->BM1_MATUSU) .AND. EMPTY(BM1->(BM1_CONEMP+BM1_VERCON+BM1_SUBCON+BM1_VERSUB))
													NCATEG	:= 2
													// 4- PRECO PRE-ESTABELECIDO - PLANO COLETIVO
												ELSE
													NCATEG	:= 4
												ENDIF
												// PRECO POS-ESTABELECIDO
											ELSE
												// 3- PRECO POS-ESTABELECIDO - PLANO FAMILIAR
												IF !EMPTY(BM1->BM1_MATUSU) .AND. EMPTY(BM1->(BM1_CONEMP+BM1_VERCON+BM1_SUBCON+BM1_VERSUB))
													NCATEG	:= 3
													// 5- PRECO POS-ESTABELECIDO - PLANO COLETIVO
												ELSE
													NCATEG	:= 5
												ENDIF
											ENDIF
											
											// 6- CONVENIOS A RECEBER / OUTRAS
										ELSEIF ALLTRIM(BM1->BM1_CODTIP) $ ''
											NCATEG	:= 6
											// 7- TAXA DE ADMINISTRACAO DE PLANOS
										ELSEIF ALLTRIM(BM1->BM1_CODTIP) $ CCOD2
											NCATEG	:= 7
											// 8- PARTICIPACAO DOS BENEFICIARIOS EM EVENTOS / SINISTROS
										ELSEIF ALLTRIM(BM1->BM1_CODTIP) $ CCOD1
											NCATEG	:= 8
											// 10- OUTROS CREDITOS DE OPERACOES COM PLANOS
										ELSEIF ALLTRIM(BM1->BM1_CODTIP) $ '111,113,128,129,130,131,132,135,136,180'  .OR. SUBS(BM1->BM1_CODTIP,1,1) = '9'
											NCATEG	:= 10
											
											// 9- CREDITOS DE OPERADORAS
										ELSEIF 1==2
											NCATEG	:= 9
											// SE NAO ACHOU, CLASSIFICA EM 10- OUTROS CREDITOS DE OPERACOES COM PLANOS
										ELSE
											NCATEG	:= 10
											IF  PLSALIASEX("BB1") .AND. SIX->(DBSEEK("BB11",.F.))
												CLOG	:= 'CLIENTE '+TRBATV->E1_CLIENTE+'/'+TRBATV->E1_LOJA+'- COMPOSICAO DO TITULO'+TRBATV->E1_PREFIXO+'-'
												CLOG	+= TRBATV->E1_NUM+'-'+TRBATV->E1_PARCELA+'-'+TRBATV->E1_TIPO+' COM ERRO NA CLASSIFICACAO. VERIFIQUE.'
												PLGRVLOG(CLOG, 'DIOPS-IDSLD-A')
											ENDIF
										ENDIF
										
										NPOS := ASCAN( AVLRAT, { |X| X[1] == NCATEG } )
										IF NPOS > 0
											AVLRAT[NPOS,2] += BM1->BM1_VALOR
										ELSE
											AADD(AVLRAT, { NCATEG, BM1->BM1_VALOR } )
										ENDIF
										
										BM1->(DBSKIP())
									ENDDO
									
								ELSE
									NCATEG	:= 10
									IF  PLSALIASEX("BB1") .AND. SIX->(DBSEEK("BB11",.F.))
										CLOG	:= 'CLIENTE '+TRBATV->E1_CLIENTE+'/'+TRBATV->E1_LOJA+'- COMPOSICAO DO TITULO'+TRBATV->E1_PREFIXO+'-'
										CLOG	+= TRBATV->E1_NUM+'-'+TRBATV->E1_PARCELA+'-'+TRBATV->E1_TIPO+' NAO ENCONTRADO. VERIFIQUE.'
										PLGRVLOG(CLOG, 'DIOPS-IDSLD-A')
									ENDIF
									AADD( AVLRAT, { NCATEG, NSALDO } )
									NVLRBM1	+= NSALDO
									
								ENDIF
								
							ENDIF
							
							//PONTO DE ENTRADA PARA REGRA ESPECIFICA DO USUARIO NA
							//CLASSIFICACAO DO ATIVO NO DIOPS
							IF LPLDIOP02

								AVLRAT := EXECBLOCK("PLDIOP02",.F.,.F.,{TRBATV->REGNUM, TRBATV->(E1_CLIENTE+E1_LOJA), NCATEG, AVLRAT } )

								IF !VALTYPE('AVLRAT') == 'A'
									
									FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01','RETORNO INVALIDO NO PONTO DE ENTRADA PLDIOP02, CAUSANDO ERRO NO VALOR DO DIOPS.' , 0, 0, {})
									
									AVLRAT	:= { 11, NSALDO }

									IF  PLSALIASEX("BB1") .AND. SIX->(DBSEEK("BB11",.F.))
										CLOG	:= 'CLIENTE '+TRBATV->E1_CLIENTE+'/'+TRBATV->E1_LOJA+'- TITULO'+TRBATV->E1_PREFIXO+'-'
										CLOG	+= TRBATV->E1_NUM+'-'+TRBATV->E1_PARCELA+'-'+TRBATV->E1_TIPO+' - RETORNO INVALIDO P.E. PLDIOP02. VERIFIQUE.'
										PLGRVLOG(CLOG, 'DIOPS-IDSLD-A')
									ENDIF

								ELSE
									FOR NVEZ:= 1 TO LEN(AVLRAT)
										IF AVLRAT[NVEZ,1] < 2 .OR. AVLRAT[NVEZ,1] > 11
											AVLRAT[NVEZ,1] := 11
											IF  PLSALIASEX("BB1") .AND. SIX->(DBSEEK("BB11",.F.))
												CLOG	:= 'CLIENTE '+TRBATV->E1_CLIENTE+'/'+TRBATV->E1_LOJA+'- TITULO'+TRBATV->E1_PREFIXO+'-'
												CLOG	+= TRBATV->E1_NUM+'-'+TRBATV->E1_PARCELA+'-'+TRBATV->E1_TIPO+' - RETORNO INVALIDO P.E. PLDIOP02. VERIFIQUE.'
												PLGRVLOG(CLOG, 'DIOPS-IDSLD-A')
											ENDIF
										ENDIF
									NEXT
								ENDIF
							ENDIF
							
							//ANALISA DATA DE VENCIMENTO DO TITULO EM RELACAO A
							//COMPETENCIA EMITIDA PARA CLASSIFICAR NA LINHA CORRETA
							NDATA	:= ( MV_PAR03 - IIF(MV_PAR08==1, SE1->E1_VENCTO, SE1->E1_VENCREA) )
							IF NDATA <= 0
								NVENC	:= 1		// SE AINDA NÃO VENCEU
							ELSEIF NDATA <= 30 .AND. NDATA >= 1
								NVENC	:= 2		// VENCIDOS DE 1 A 30 DIAS
							ELSEIF NDATA <= 60 .AND. NDATA >= 31
								NVENC	:= 3		// VENCIDOS DE 31 A 60 DIAS
							ELSEIF NDATA <= 90 .AND. NDATA >= 61
								NVENC	:= 4		// VENCIDOS DE 61 A 90 DIAS
							ELSEIF NDATA >= 91.AND. NDATA <= 120
								NVENC	:= 6		// VENCIDOS DE 91 A 120  DIAS
							ELSEIF NDATA >= 121.AND. NDATA <= 365
								NVENC	:= 7		// VENCIDOS A 121 A 365 DIAS
							ELSEIF NDATA >= 365//.AND. NDATA <= 365
								NVENC   := 5
								
							ENDIF
							
							FOR NVEZ := 1 TO LEN(AVLRAT)
								ARETATIVO[ NVENC, AVLRAT[NVEZ,1] ] += ( ( AVLRAT[NVEZ,2] / NVLRBM1 ) * NSALDO )
							NEXT
							
						ENDIF
						
						// SE DEVE ATUALIZAR O ARQUIVO
						IF MV_PAR15 == 1 .AND. NHANDLE > 0
							CSTR := STR(TRBATV->REGNUM,20,0)+';'+TRBATV->E1_FILIAL+';'+TRBATV->E1_VENCREA+';'+TRBATV->E1_CLIENTE+';'+TRBATV->E1_LOJA+';'+TRBATV->E1_PREFIXO+';'
							CSTR += TRBATV->E1_NUM+';'+TRBATV->E1_PARCELA+';'+TRBATV->E1_TIPO+';'+STR(TRBATV->E1_VALOR,20,2)+';'+STR(NCATEG,20,0)+';'+STR(NVENC,20,0)+';'+STR(NSALDO,20,2)
							FWRITE(NHANDLE, CSTR + CRLF)
						ENDIF
						
						TRBATV->(DBSKIP())
					ENDDO
					
				ELSE
					IF  PLSALIASEX("BB1") .AND. SIX->(DBSEEK("BB11",.F.))
						PLGRVLOG('CODIGO DO CLIENTE '+TRBATV->E1_CLIENTE+'/'+TRBATV->E1_LOJA+' NAO ENCONTRADO. VERIFIQUE.', 'DIOPS-IDSLD-A')
					ENDIF
					
					TRBATV->(DBSKIP())
				ENDIF
			ENDDO
			TRBATV->(DBCLOSEAREA())
			
			// SE OPTOU POR GERAR O ARQUIVO ESPELHO
			IF MV_PAR15 == 1 .AND. NHANDLE > 0
				FCLOSE(NHANDLE)
			ENDIF
			
		ENDIF
	ENDIF
	
	// PONTO DE ENTRADA PARA MANIPULAR DADOS DO SALDO DE CONTAS PARA GERAÇÃO DO DIOPS
	IF EXISTBLOCK("PLSIDSALDO")
		ARET := EXECBLOCK("PLSIDSALDO", .F., .F., {ARETPASSIVO, ARETATIVO})
		ARETPASSIVO := ARET[1]
		ARETATIVO   := ARET[2]
	ENDIF
RETURN({ARETPASSIVO,ARETATIVO})

/*/{PROTHEUS.DOC} PLSSOLV
RETORNA MARGEM DE SOLVENCIA DIOPS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.06.09
@VERSION 1.0
/*/
FUNCTION PLSSOLV(CCODINT,DDATSLD)
	LOCAL NFOR 		:= 0
	LOCAL ACPLPRE 	:= {"311111","311121","311181","311191","311311","311321","311381","311391","311411","311421",;
		"311481","311491","311511","311521","311531","311541","311581","311591","311611","311621",;
		"311631","311641","311681","311691","311711","311721","311731","311781","311791","311811",;
		"311821","311831","311881","311891","311911","311921","311931","311951","311961","311971",;
		"311991"}
	LOCAL ACPLPOS 	:= {"311112","311122","311182","311192","311312","311322","311382","311392","311412","311422",;
		"311482","311492","311512","311522","311532","311542","311582","311592","311612","311622",;
		"311632","311642","311682","311692","311712","311722","311732","311782","311792","311812",;
		"311822","311832","311882","311892","311912","311922","311932","311952","311962","311972",;
		"311992"}
	LOCAL AEILPRE	:= {"411111","411121","411131","411141","411151","411161","411171","411181","411191","411211",;
		"411221","411231","411261","411271","411281","411291","411311","411361","411371","411381",;
		"411391","411411","411461","411471","411481","411491","411511","411521","411531","411541",;
		"411551","411561","411571","411581","411591","411611","411621","411631","411661","411671",;
		"411681","411691","411711","411761","411771","411781","411791","411811","411861","411871",;
		"411881","411891","412111","412112","412121","412131","412141","412151","412161","412171",;
		"412181","412191","412211","412221","412231","412261","412271","412281","412291","412311",;
		"412321","412331","412341","412351","412361","412371","412381","412391","412411","412421",;
		"412431","412461","412471","412481","412491","412511","412521","412531","412541","412551",;
		"412561","412571","412581","412591","412611","412621","412631","412661","412671","412681",;
		"412691","412711","412721","412731","412741","412751","412761","412771","412781","412791",;
		"412811","412821","412831","412861","412871","412881","412891","413111","413171","413181",;
		"413191","413211","413271","413281","413291","413811","413891","413911","413991"}
	LOCAL AEILPOS	:= {"411112","411122","411132","411142","411152","411162","411172","411182","411192","411212",;
		"411222","411232","411262","411272","411282","411292","411312","411362","411372","411382",;
		"411392","411412","411462","411472","411482","411492","411512","411522","411532","411542",;
		"411552","411562","411572","411582","411592","411612","411622","411632","411662","411672",;
		"411682","411692","411712","411762","411772","411782","411792","411812","411862","411872",;
		"411882","411892","412112","412112","412122","412132","412142","412152","412162","412172",;
		"412182","412192","412212","412222","412232","412262","412272","412282","412292","412312",;
		"412322","412332","412342","412352","412362","412372","412382","412392","412412","412422",;
		"412432","412462","412472","412482","412492","412512","412522","412532","412542","412552",;
		"412562","412572","412582","412592","412612","412622","412632","412662","412672","412682",;
		"412692","412712","412722","412732","412742","412752","412762","412772","412782","412792",;
		"412812","412822","412832","412862","412872","412882","412892","413112","413172","413182",;
		"413192","413212","413272","413282","413292","413812","413892","413912","413992"}
	LOCAL NSOMA 	:= 0
	DEFAULT DDATSLD	:= DDATABASE
	DEFAULT CCODINT := ""
	
	FOR NFOR := 1 TO LEN(ACPLPRE)
		NSOMA += SALDOCONTA(ACPLPRE[NFOR],DDATSLD,"01")
	NEXT
	ACPLPRE := NSOMA
	
	NSOMA := 0
	FOR NFOR := 1 TO LEN(ACPLPOS)
		NSOMA += SALDOCONTA(ACPLPOS[NFOR],DDATSLD,"01")
	NEXT
	ACPLPOS := NSOMA
	
	NSOMA := 0
	FOR NFOR := 1 TO LEN(AEILPRE)
		NSOMA += SALDOCONTA(AEILPRE[NFOR],DDATSLD,"01")
	NEXT
	AEILPRE := NSOMA
	
	NSOMA := 0
	FOR NFOR := 1 TO LEN(AEILPOS)
		NSOMA += SALDOCONTA(AEILPOS[NFOR],DDATSLD,"01")
	NEXT
	AEILPOS := NSOMA
	
RETURN({ACPLPRE,ACPLPOS,AEILPRE,AEILPOS})

/*/{PROTHEUS.DOC} PLSTRBDIOP
RETORNA ALIAS DE TRABALHO DIOPS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.06.09
@VERSION 1.0
/*/
FUNCTION PLSTRBDIOP(CTIPO,CCODINT)
	LOCAL CSQL 		:= ""
	LOCAL ASTRU		:= {}
	LOCAL CARQTEMP	:= ""
	LOCAL OTEMPTRB
	DEFAULT CTIPO	:= ""
	DEFAULT CCODINT := ""
	
	IF CTIPO = "1"
		CSQL := "SELECT SUM(B07_VLRPAR) VLRPAR FROM "+RETSQLNAME("B07")+" "
	ELSE
		CSQL := "SELECT B07_NUMDOC NUMDOC, B07_VLRPAR VLRPAR FROM "+RETSQLNAME("B07")+" "
	ENDIF
	CSQL += "WHERE B07_FILIAL = '"+XFILIAL("B07")+"' AND "
	CSQL += "B07_CODINT = '"+CCODINT+"' AND "
	CSQL += "B07_TIPO = '3' AND D_E_L_E_T_ = ' '"
	
	CSQL := CHANGEQUERY(CSQL)
	
	IF SELECT("TRB") > 0
		TRB->(DBCLOSEAREA())
	ENDIF
	
	DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQL),"TRB",.F.,.T.)
	
	DBSELECTAREA("TRB")
	TRB->(DBGOTOP())
	
	// CASO A QUERY NÃO RETORNE VALOR PREENCHO AS TAGS COM VALOR DEFAULT
	IF TRB->(EOF())  // .AND. CTIPO == "2"
		
		TRB->(DBCLOSEAREA())
		
		AADD(ASTRU,{"CHAVE" ,"C",001,0})
		AADD(ASTRU,{"NUMDOC","C",014,0})
		AADD(ASTRU,{"VLRPAR","N",013,0})
		
		//--< CRIAÇÃO DO OBJETO FWTEMPORARYTABLE >---
		OTEMPTRB := FWTEMPORARYTABLE():NEW( "TRB" )
		OTEMPTRB:SETFIELDS( ASTRU )
		OTEMPTRB:ADDINDEX( "INDTRB",{ "CHAVE" } )
		
		IF( SELECT( "TRB" ) > 0 )
			TRB->( DBCLOSEAREA() )
		ENDIF
		
		OTEMPTRB:CREATE()

		DBSELECTAREA("TRB")
		TRB->( DBSETORDER( 1 ) )

		TRB->(RECLOCK("TRB",.T.))
		TRB->NUMDOC := "00000000000000"
		TRB->VLRPAR := 0
		TRB->(MSUNLOCK())
		
	ENDIF
	
RETURN

/*/{PROTHEUS.DOC} MASKDIOPS
RETORNA O VALOR COM A MASCARA DEFINIDA PELA ANS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.06.09
@VERSION 1.0
/*/
FUNCTION MASKDIOPS(CVLR)
	LOCAL CVLRINT	:= ""
	LOCAL CVLRDEC	:= ""
	LOCAL LNEGAT    := .F.
	DEFAULT CVLR 	:= 0
	
	CVLR 	:= ALLTRIM(CVLR)
	//CVLR    := VAL(CVLR)
	
	IF VAL(CVLR) < 0
		CVLR:=ALLTRIM(STR(VAL(CVLR)*(-1)))
		LNEGAT := .T.
	ENDIF
	
	CVLRINT := ALLTRIM(STR(INT(VAL(CVLR))))
	
	
	IF CVLRINT == CVLR
		CVLR += ".0"
	ELSE
		CVLRDEC := SUBSTR(CVLR,LEN(CVLRINT)+2,2)
		IF SUBSTR(CVLRDEC,2,1) == "0"
			CVLR := CVLRINT +"."+ SUBSTR(CVLRDEC,1,1)
		ELSE
			CVLR := CVLRINT +"."+ CVLRDEC
		ENDIF
	ENDIF
	
	IF LNEGAT
		CVLR:= VAL(CVLR)
		CVLR:= CVLR*(-1)
		CVLR:= ALLTRIM(STR(CVLR))
	ENDIF
RETURN(CVLR)

/*/{PROTHEUS.DOC} PLGRVLOG
GRAVA LOG CONTABIL
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28/01/10
@VERSION 1.0
/*/
FUNCTION PLGRVLOG(CMSG, CTPLOG , NTP)
LOCAL CLOG      := '' 
LOCAL CLOG1     := ''

DEFAULT CMSG	:= ''
DEFAULT CTPLOG	:= ''
DEFAULT NTP     := 1

IF ! EMPTY(CMSG) .AND. ! EMPTY(CTPLOG)

    CLOG	:= SUBS(CTPLOG+'|'+CMSG,001,254)
    CLOG1	:= SUBS(CTPLOG+'|'+CMSG,255,254)
    
    //NAO PROCESSADOS    
    IF NTP == 1

        BB1->( RECLOCK('BB1',.T.) )
            BB1->BB1_FILIAL	:= BB1->( XFILIAL('BB1') )
            BB1->BB1_DATA	:= DATE()
            BB1->BB1_HORA	:= SUBS(ALLTRIM(TIME()),1,8)
            BB1->BB1_LOG	:= CLOG
            BB1->BB1_LOG1	:= CLOG1
        BB1->( MSUNLOCK() )

    ELSE

        BAD->( RECLOCK('BAD',.T.) )
            BAD->BAD_FILIAL	:= BAD->( XFILIAL('BB1') )
            BAD->BAD_DATA	:= DATE()
            BAD->BAD_HORA	:= SUBS(ALLTRIM(TIME()),1,8)
            BAD->BAD_LOG	:= CLOG
            BAD->BAD_LOG1	:= CLOG1
        BAD->( MSUNLOCK() )

    ENDIF

ENDIF
	
RETURN

/*/{PROTHEUS.DOC} PLGRVLGB
GRAVA LOG CONTABIL
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 13/06/11
@VERSION 1.0
/*/
FUNCTION PLGRVLGB(CMSG,CTPLOG)
	LOCAL CLOG, CLOG1
	DEFAULT CMSG	:= ''
	DEFAULT CTPLOG	:= ''

	IF !EMPTY(CMSG) .AND. !EMPTY(CTPLOG)

		CLOG	:= SUBS(CTPLOG+'|'+CMSG,001,254)
		CLOG1	:= SUBS(CTPLOG+'|'+CMSG,255,254)
		RECLOCK('BAD',.T.)
		BAD->BAD_FILIAL	:= XFILIAL('BAD')
		BAD->BAD_DATA	:= DATE()
		BAD->BAD_HORA	:= SUBS(ALLTRIM(TIME()),1,8)
		BAD->BAD_LOG	:= CLOG
		BAD->BAD_LOG1	:= CLOG1
		MSUNLOCK()
	ENDIF
	
RETURN

/*/{PROTHEUS.DOC} PLRELRDA
RETORNA RDA POR TIPO (BAU_TIPRE)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 20/02/10
@VERSION 1.0
/*/
FUNCTION PLRDATP()
	LOCAL CSQL	:= ""
	LOCAL CTPPRE:= GETNEWPAR("MV_PLSTPPR","HOS")
	LOCAL ARET	:= {}

	// PEGA AS ESPECIALIDADES DO CORPO CLINICO
	CSQL := " SELECT BAU_CODIGO,BAU_CPFCGC,BAU_NOME,BAU_CNES,BAU_CODBB0, BAU_CODOPE"
	CSQL += "   FROM "+BAU->( RETSQLNAME("BAU") )
	CSQL += "  WHERE BAU_FILIAL = '"+XFILIAL("BAU")+"' "
	CSQL += "    AND BAU_CODBLO = '"+SPACE( TAMSX3("BAU_CODBLO")[1] )+"' "
	CSQL += "    AND BAU_TIPPRE IN('"+CTPPRE+"') "
	CSQL += "	 AND D_E_L_E_T_ = ' ' "

	PLSQUERY(CSQL,"TRBBAU")

	// MONTA MATRIZ DE RETORNO
	WHILE !TRBBAU->( EOF() )
		AADD( ARET,{TRBBAU->BAU_CODIGO,TRBBAU->BAU_NOME,TRBBAU->BAU_CPFCGC,TRBBAU->BAU_CNES,TRBBAU->BAU_CODBB0,IIF( EMPTY(TRBBAU->BAU_CODOPE),PLSINTPAD(),TRBBAU->BAU_CODOPE) } )
		TRBBAU->( DBSKIP() )
	ENDDO
	TRBBAU->( DBCLOSEAREA() )

RETURN(ARET)

/*/{PROTHEUS.DOC} PLSCARBD6
CARREGA DADOS DO BD6
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 14.03.2010
@VERSION 1.0
/*/
FUNCTION PLSCARBD6(CNUMPEG)
	LOCAL LFINDBD7	:= .F.
	LOCAL AMATBD6 	:= {}
	LOCAL AUNMED  	:= PLSXBKC()

	// CARREGA DADOS DO BD6
	BD7->( DBSETORDER(1) ) //BD7_FILIAL + BD7_CODOPE + BD7_CODLDP + BD7_CODPEG + BD7_NUMERO + BD7_ORIMOV + BD7_SEQUEN + BD7_CODUNM + BD7_NLANC
	BD6->( DBSETORDER(6) ) //BD6_FILIAL + BD6_CODOPE + BD6_CODLDP + BD6_CODPEG + BD6_NUMERO + BD6_ORIMOV + BD6_CODPAD + BD6_CODPRO
	BD6->( MSSEEK(XFILIAL("BD6")+CNUMPEG+"2") )

	WHILE !BD6->( EOF() ) .AND. XFILIAL("BD6")+CNUMPEG+"2" == XFILIAL("BD6")+BD6->( BD6_CODOPE+BD6_CODLDP+BD6_CODPEG+BD6_NUMERO+BD6_ORIMOV )

		// PROCURA PARTICIPACAO DISPONIVIEL
		LFINDBD7 := .F.
		BD7->( MSSEEK( XFILIAL("BD7")+CNUMPEG+"2"+BD6->BD6_SEQUEN ) )

		WHILE !BD7->( EOF() ) .AND. XFILIAL("BD7")+CNUMPEG+"2"+BD7->BD7_SEQUEN == XFILIAL("BD6")+CNUMPEG+"2"+BD6->BD6_SEQUEN
			
			IF ( EMPTY(BD7->BD7_CODTPA) .OR. ( BD7->(FIELDPOS("BD7_SALDO")) > 0 .AND. BD7->BD7_SALDO > 0) ) .AND. ASCAN( AUNMED,{ |X| ALLTRIM(X[2]) == ALLTRIM(BD7->BD7_CODUNM) } ) > 0
				LFINDBD7 := .T.
			EXIT
			ENDIF
			
			BD7->( DBSKIP() )
		ENDDO
	
		// SE EXISTIR PARTICIPACAO
		IF LFINDBD7
	
			AADD(AMATBD6,{"",BD6->BD6_SEQUEN,BD6->BD6_CODPAD,BD6->BD6_CODPRO,BD6->BD6_QTDPRO,;
				BD6->BD6_ORIMOV,BD6->BD6_PROCCI,BD6->( RECNO() ),BD6->BD6_DENREG,;
				BD6->BD6_FADENT,BD6->BD6_DATPRO })
			
		ENDIF
		
		BD6->( DBSKIP() )
	ENDDO

RETURN AMATBD6

/*/{PROTHEUS.DOC} PLSXBKC
CARGA INICIAL DE DADOS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 08.11.2007
@VERSION 1.0
/*/
FUNCTION PLSXBKC()
LOCAL NFOR
LOCAL NAUX
LOCAL AUNIDADES := {}
LOCAL ALISTA    := {}
// QUANDO FOR IMPORTACAO XML, CARREGA TAMBEM, TAXAS E DIARIAS
IF ISINCALLSTACK("PLSA973")
	AUNIDADES := { {"AUX","AUR"},{"HM ","HMR","PPM","RCC","CIR"},{"PA ","PAP","PAR"},{"DOP,CRR,INC"},{"VDI","VTX","COP"} }
ELSE
	AUNIDADES := { {"AUX","AUR"},{"HM ","HMR","PPM","RCC","CIR"},{"PA ","PAP","PAR"},{"DOP,CRR,INC"} }
ENDIF
// FOR
BKC->(DBSETORDER(1)) //BKC_FILIAL+BKC_CODIGO+BKC_CODOPE+BKC_CODPAR
FOR NFOR := 1 TO LEN(AUNIDADES)
	FOR NAUX := 1 TO LEN(AUNIDADES[NFOR])
		IF BKC->(DBSEEK(XFILIAL("BKC")+AUNIDADES[NFOR,NAUX]+PLSINTPAD()))
			WHILE ! BKC->(EOF()) .AND. BKC->(BKC_FILIAL+BKC_CODIGO+BKC_CODOPE) == XFILIAL("BKC")+AUNIDADES[NFOR,NAUX]+PLSINTPAD()
				AADD(ALISTA,{ ALLTRIM(BKC->BKC_CODIGO)+ALLTRIM(BKC->BKC_CODPAR),ALLTRIM(BKC->BKC_CODIGO) } )
				BKC->(DBSKIP())
			ENDDO
		ENDIF
	NEXT
NEXT

RETURN(ALISTA)

/*/{PROTHEUS.DOC} PLSNEGCOM
EXCLUI COMPOSICAO DO PROCEDIMENTO (POSIBILITA NEGAR PARTE DA COMPOSICAO DO PROCEDIMENTO)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 24.08.2010
@VERSION 1.0
/*/
FUNCTION PLSNEGCOM(CSEQUEN,CCODPAD,CCODPRO,CSTATUS,DDATPRO,NOPC,CCHAVE,LVISITENS,CCODRDA,CCODESP,CCODLOCAL,CMATRUS,CALIAS,LTELA,LBD7)
	LOCAL NPOS,NPOS2	:= 0
	LOCAL NY			:= 0
	LOCAL NI			:= 0
	LOCAL BSTRING		:= ""
	LOCAL CCODPLA       := ""
	LOCAL CTIPPRE       := ""
	LOCAL ACOMEVE		:= {}
	LOCAL AVETTAB 		:= {}
	LOCAL AMATCOL		:= {}
	LOCAL AMATLIN  		:= {}
	LOCAL ARET			:= {}
	LOCAL OGEN			:= NIL
	DEFAULT NOPC		:= K_INCLUIR
	DEFAULT CCHAVE		:= ""
	DEFAULT LVISITENS	:= .F.// SOMENTE VISUAL
	DEFAULT CCODRDA     := ""
	DEFAULT CCODESP     := ""
	DEFAULT CCODLOCAL   := ""
	DEFAULT CMATRUS   	:= ""
	DEFAULT CALIAS		:= ""
	DEFAULT LTELA		:= .T.
	DEFAULT LBD7		:= .F.
	// COLUNAS
	AADD(AMATCOL,{STR0068,'@!',80})//"PARTICIPAÇÃO"
	AADD(AMATCOL,{STR0065,'@!',30})//'UNIDADE'
	AADD(AMATCOL,{STR0066,'@!',40})//"DESCRIÇÃO"
	// VERIFICA SE O PROCEDIMENTO FOI AUTORIZADO
	IF CSTATUS == '0'
		LVISITENS := .T.
	ENDIF
	// DEVOLVE A COMPOSICAO
	ACOMEVE	:= PLSRETCP( CMATRUS,CCODRDA,CCODPAD,CCODPRO,DDATPRO,SUBS(CMATRUS,1,4),CCODLOCAL,CCODESP)
	// VERIFICA SE TEM COMPOSICAO
	IF LEN(ACOMEVE) == 0 .AND. LTELA
		AVISO( 	STR0063,;//"PROCEDIMENTO"
		STR0064,;//"NÃO É POSSIVEL MOSTRAR A COMPOSIÇÃO DO PROCEDIMENTO INFORMADO."
		{ "OK" }, 2 )
	ELSE
		// MONTA MATRIZ DE LINHAS CONFORME AS COLUNAS
		FOR NY:= 1 TO LEN(ACOMEVE)
			BSTRING := "AADD(AMATLIN,{"
			BSTRING += "'" + ALLTRIM(POSICIONE("BWT",1,XFILIAL("BWT") + SUBS(CMATRUS,1,4) + ACOMEVE[NY,16],"BWT_CODEDI")) + " - " + ALLTRIM(BWT->BWT_DESCRI) + "',"
			
			FOR NI:=1 TO LEN(AMATCOL)
				
				DO CASE
				CASE VALTYPE(ACOMEVE[NY,NI])=='N'
					BSTRING += "'" + ALLTRIM( STR(ACOMEVE[NY,NI]) ) + "',"
				CASE VALTYPE(ACOMEVE[NY,NI])=='D'
					BSTRING += "'" + DTOS(ACOMEVE[NY,NI]) + "',"
				OTHERWISE
					BSTRING += "'" + OEMTOANSI( ACOMEVE[NY,NI] ) + "',"
				ENDCASE
				// DESCRICAO APOS COLUNA SELECIONADA
				IF NI == 1
					BSTRING += "'" + OEMTOANSI( POSICIONE("BD3",1,XFILIAL("BD3")+ACOMEVE[NY,NI],"BD3_DESCRI") ) + "',"
					NI++
				ENDIF
			NEXT
			BSTRING := "{||" + BSTRING + ".F.}) }"
			EVAL( &BSTRING )
			// SELECIONA OS ITENS MARCADOS ANTERIORMENTE
			IF LEN(__AMATCOM) > 0
				IF (NPOS := ASCAN(__AMATCOM,{|X| X[1] == CSEQUEN+CCODPAD+CCODPRO}) ) > 0
					
					IF (NPOS2 := ASCAN( __AMATCOM[NPOS,2],{|X| X[2] + ALLTRIM( LEFT( X[1], AT('-',X[1]) -1) ) == AMATLIN[LEN(AMATLIN),2] + ALLTRIM(LEFT(AMATLIN[LEN(AMATLIN),1],AT('-',AMATLIN[LEN(AMATLIN),1])-1)) } ) ) > 0
						AMATLIN[ LEN(AMATLIN),LEN( AMATLIN[LEN(AMATLIN)] ) ] := __AMATCOM[NPOS,2,NPOS2,LEN(__AMATCOM[NPOS,2,NPOS2])]
					ENDIF
				ENDIF
			ELSEIF !EMPTY(CALIAS) .AND. (CALIAS)->( FIELDPOS(CALIAS+"_COMPAR") ) > 0 .AND. TYPE(CALIAS+"_COMPAR") <> "U"
				
				IF !EMPTY( M->&(CALIAS+"_COMPAR") )
					OGEN := PLSCONTR():NEW()
					ARET := OGEN:SPLIT(',', M->&( CALIAS+"_COMPAR" ) )
					OGEN:DESTROY()
					
					IF ASCAN( ARET,{|X| STRTRAN(X,'-','') == AMATLIN[LEN(AMATLIN),2] + ALLTRIM(LEFT(AMATLIN[LEN(AMATLIN),1],AT('-',AMATLIN[LEN(AMATLIN),1])-1)) } ) == 0
						AMATLIN[ LEN(AMATLIN),LEN( AMATLIN[LEN(AMATLIN)] ) ] := .T.
					ENDIF
					
				ENDIF
			ENDIF
		NEXT
	ENDIF
	// MOSTRA A COMPOSICAO
	IF (!EMPTY(CCHAVE) .AND.  NOPC != K_INCLUIR) .OR. ( LBD7 .AND. !EMPTY(CCHAVE) )
		
		BD7->( DBSETORDER(1) ) //BD7_FILIAL + BD7_CODOPE + BD7_CODLDP + BD7_CODPEG + BD7_NUMERO + BD7_ORIMOV + BD7_SEQUEN + BD7_CODUNM + BD7_NLANC
		IF BD7->( MSSEEK( CCHAVE ) )
			
			AMATLIN := {}
			
			WHILE !BD7->( EOF() ) .AND. CCHAVE == BD7->(BD7_FILIAL + BD7_CODOPE + BD7_CODLDP + BD7_CODPEG + BD7_NUMERO + BD7_ORIMOV + BD7_SEQUEN)
				AADD(AMATLIN,{BD7->BD7_CODTPA + " - " + OEMTOANSI( ALLTRIM(POSICIONE("BWT",1,XFILIAL("BWT")+ SUBS(CMATRUS,1,4) + BD7->BD7_CODTPA,"BWT_DESCRI") ) ) ,BD7->BD7_CODUNM,OEMTOANSI( ALLTRIM(POSICIONE("BD3",1,XFILIAL("BD3")+BD7->BD7_CODUNM,"BD3_DESCRI")) ), (BD7->BD7_BLOPAG == '1') })
				BD7->( DBSKIP() )
			ENDDO
		ELSE
			IF ( NPOS := ASCAN(__AMATCOM,{|X| X[1] == CSEQUEN+CCODPAD+CCODPRO} ) ) > 0
				
				AMATLIN := {}
				
				FOR NI:=1 TO LEN(__AMATCOM[NPOS,2])
					IF !__AMATCOM[NPOS,2,NI,LEN(__AMATCOM[NPOS,2,NI])]
						AADD(AMATLIN,{__AMATCOM[NPOS,2,NI,1],__AMATCOM[NPOS,2,NI,2],__AMATCOM[NPOS,2,NI,3],.F.})
					ENDIF
				NEXT
			ENDIF
		ENDIF
		
	ENDIF
	// MONTA TELA
	IF LEN(AMATLIN) > 0
		// MONTA TELA E PEGA O RETORNO DA COMPOSICAO
		IF LTELA
			PLSSELOPT(STR0061,STR0062,AMATLIN,AMATCOL,NOPC,.T.,NIL,LVISITENS) //"COMPOSIÇÃO DO PROCEDIMENTO" //"MARCA E DESMARCA TODOS"
		ENDIF
		// MONTA MATRIZ PARA ENVIO DA COMPOSICAO
		IF ( NPOS := ASCAN(__AMATCOM,{|X| X[1] == CSEQUEN+CCODPAD+CCODPRO} ) ) == 0
			AADD(__AMATCOM,{ CSEQUEN+CCODPAD+CCODPRO, AMATLIN } )
		ELSE
			__AMATCOM[NPOS,2] := AMATLIN
		ENDIF
	ENDIF
	// SE FOI INFORMADO O ALIAS DE GRAVACAO E O CAMPO EXISTE GRAVA A COMPOSICAO
	IF !EMPTY(CALIAS) .AND. (CALIAS)->( FIELDPOS(CALIAS+"_COMPAR") ) > 0 .AND. TYPE(CALIAS+"_COMPAR") <> "U"
		// MONTA COMPOSICAO AUTORIZADA
		CCOMPAR := ""
		FOR NI:=1 TO LEN(AMATLIN)
			IF !AMATLIN[NI,5]
				CCOMPAR += AMATLIN[NI,2] + "-" + ALLTRIM(LEFT(AMATLIN[NI,1],AT('-',AMATLIN[NI,1])-1))+","
			ENDIF
		NEXT
		// ALIMENTA O M PARA GRAVACAO
		M->&(CALIAS+"_COMPAR") := LEFT(CCOMPAR,LEN(CCOMPAR)-1)
	ENDIF
RETURN( __AMATCOM )

/*/{PROTHEUS.DOC} PLSSELOPT
MOSTRA LINHAS COM POSSIBILIDADE DE SELECIONAR ITENS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 24.08.2010
@VERSION 1.0
/*/
FUNCTION PLSSELOPT(CTEXTIT,CTEXCHK,AMATLIN,AMATCOL,NOPC,LCHKQT,LMOSMT,LVISITENS,ODLGTB,NLINI,NCOLI,NLINF,NCOLF)
	LOCAL NI		 := 0
	LOCAL NOPCA      := 0
	LOCAL NPOSCHK	 := 0
	LOCAL CTIPOPES	 := ""
	LOCAL CCHAVE	 := SPACE(100)
	LOCAL BCOL		 := ""
	LOCAL BOK        := {|| LOK :=.T.,ODLGTB:END() }
	LOCAL BCANCEL    := {|| LOK :=.F.,ODLGTB:END() }
	LOCAL LOK		 := .F.
	LOCAL LCHECK	 := .F.
	LOCAL LPES		 := .F.
	LOCAL LDLG		 := .F.
	LOCAL APESORD  	 := {}
	LOCAL OPES		 := NIL
	LOCAL OCHECK	 := NIL
	LOCAL OOBJGRID	 := NIL
	LOCAL NTAM		 := 20
	DEFAULT ODLGTB	 := NIL
	DEFAULT NLINI	 := 0
	DEFAULT NCOLI	 := 0
	DEFAULT NLINF	 := 0
	DEFAULT NCOLF	 := 0
	DEFAULT CTEXTIT  := STR0059	//"TITULO"
	DEFAULT CTEXCHK	 := STR0060	//"MARCA E DESMARCA TODOS"
	DEFAULT LMOSMT	 := .F.
	DEFAULT LCHKQT	 := .F.
	DEFAULT LVISITENS:= .F. 	//SOMENTE VISUAL
	// PARA NAO ABRIR A TELA VARIAS VEZES QUANDO FOR K_INCLUIR
	INCLUI := .F.
	
	// VERIFICA SE FOI DEFINIDO NA MATRIZ DE COLUNA ITENS PARA PESQUISA
	IF LEN(AMATCOL[1])>=4
		FOR NI:=1 TO LEN(AMATCOL)
			IF AMATCOL[NI,4]
				AADD(APESORD,AMATCOL[NI,1])
				LPES := .T.
			ENDIF
		NEXT
	ENDIF
	// SOMENTE VISUALIZAR OS ITENS
	IF LVISITENS
		LMOSMT := .F.
	ENDIF
	// INICIA CONTROLE A ULTIMA POSICAO SEMPRE DEVE SER UM VALOR LOGICO
	IF LEN(AMATLIN)>0
		NPOSCHK := LEN(AMATLIN[1])
		// VERIFICA SE A ULTIMA POSICAO E UM LOGICO E ABORTA CASO NAO SEJA
		IF VALTYPE(AMATLIN[1,NPOSCHK]) <> 'L'
			MSGALERT(STR0058) //"MATRIZ COM CONTEUDO DE LINHAS NÃO CONTEM A ULTIMA POSIÇÃO CORRETA (VALOR LOGICO)"
			RETURN({})
		ENDIF
	ENDIF
	//SE A DEFINICAO DE TELA FOI NA PROPRIA FUNCAO OU NAO
	IF VALTYPE(ODLGTB) <> 'O'
		DEFINE MSDIALOG ODLGTB TITLE CTEXTIT FROM NDLININI,NDCOLINI TO NDLINFIN,NDCOLFIN OF GETWNDDEFAULT()
		NLINI := NDLININI
		NCOLI := NDCOLINI
		NLINF := NDLINFIN
		NCOLF := NDCOLFIN
		LDLG  := .T.
	ENDIF
	// MARCA/DESMARCA
	IF LMOSMT
		@ NLINI+10+NTAM,NCOLI-IIF(LDLG,6,5) CHECKBOX OCHECK VAR LCHECK PROMPT CTEXCHK OF ODLGTB SIZE 100,8
		OCHECK:BCHANGE := {|| MSAGUARDE( {|| PLSMD(AMATLIN,LCHECK) ,OOBJGRID:REFRESH() } ) }
	ENDIF
	// PESQUISA GENERICA
	IF LPES
		@ NLINI+7+NTAM,140 COMBOBOX OTIPOPES VAR CTIPOPES ITEMS APESORD SIZE 070,010 OF ODLGTB PIXEL COLOR CLR_HBLUE
		@ NLINI+7+NTAM,210 GET OPES VAR CCHAVE SIZE 145,08 OF ODLGTB PIXEL VALID {|| PLSPE(OOBJGRID,AMATLIN,CCHAVE,AMATCOL,CTIPOPES), CCHAVE := SPACE(100) }
	ENDIF
	// TABELAS
	OOBJGRID 			:= TCBROWSE():NEW(NLINI+20+NTAM-(IIF(LMOSMT,0,7)),NCOLI-6,IIF(LDLG,NCOLF*3.5,NCOLF),IIF(LDLG,NLINF*4.8+(IIF(LMOSMT,0,7)),NLINF),,,,ODLGTB,,,,,,,,,,,,.F.,,.T.,,.F.)
	OOBJGRID:LHSCROLL 	:= .T.
	OOBJGRID:LVSCROLL 	:= .T.
	
	OOBJGRID:ADDCOLUMN(TCCOLUMN():NEW(" ",IIF(LMOSMT,{|| LOADBITMAP( GETRESOURCES(), IIF(AMATLIN[OOBJGRID:NAT,NPOSCHK],"LBOK","LBNO") ) },{||}),"@C",NIL,NIL,NIL,010,.T.,.T.,NIL,NIL,NIL,.T.,NIL))
	
	FOR NI:=1 TO LEN(AMATCOL)
		BCOL :=  "{|| OOBJGRID:ADDCOLUMN(TCCOLUMN():NEW(AMATCOL["+ALLTRIM(STR(NI))+",1],{||OEMTOANSI( AMATLIN[OOBJGRID:NAT,"+ALLTRIM(STR(NI))+"] )},+AMATCOL["+ALLTRIM(STR(NI))+",2],NIL,NIL,NIL,AMATCOL["+ALLTRIM(STR(NI))+",3],.F.,.F.,NIL,NIL,NIL,.F.,NIL) ) }"
		EVAL( &BCOL )
	NEXT
	// ATUALIZA BROWSE
	PLSSELATU(OOBJGRID,AMATLIN)
	
	IF LMOSMT
		OOBJGRID:BLDBLCLICK := {|| PLSCHKBOX(AMATLIN,OOBJGRID:NAT) }
	ENDIF
	//SE A DEFINICAO DE TELA FOI NA PROPRIA FUNCAO OU NAO
	IF LEN(AMATLIN) == 0  //CASO NAO TENHA DADOS DESABILITA AS FUNCIONALIDADES DO OBJ PARA NAO OCORRER ERRORLOG
		OOBJGRID:DISABLE()
	ENDIF
	IF LDLG
		ACTIVATE MSDIALOG ODLGTB CENTERED ON INIT ENCHOICEBAR(ODLGTB,BOK,BCANCEL,.F.,{})
	ENDIF
RETURN(IIF(LDLG,LOK,OOBJGRID))

/*/{PROTHEUS.DOC} PLSCHKBOX
MARCA E DESMARCA LINHA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
STATIC FUNCTION PLSCHKBOX(AMATLIN,NLIN)
	LOCAL NPOS := 0
	
	IF LEN(AMATLIN) == 0
		RETURN()
	ENDIF
	NPOS := LEN(AMATLIN[1])
	// VERIFICA SE E REGISTRO VALIDO PARA SELECAO
	IF AMATLIN[NLIN,NPOS]
		AMATLIN[NLIN,NPOS] := .F.
	ELSE
		AMATLIN[NLIN,NPOS] := .T.
	ENDIF
RETURN(NIL)

/*/{PROTHEUS.DOC} PLSSELATU
ATUALIZA O BROWSE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 24.08.2010
@VERSION 1.0
/*/
FUNCTION PLSSELATU(OOBJGRID,AMATLIN)
	OOBJGRID:SETARRAY(AMATLIN)
	OOBJGRID:GOTOP()
	OOBJGRID:REFRESH()
RETURN(NIL)

/*/{PROTHEUS.DOC} PLSLIMSTA
LIMPA MATRIZ STATICA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 24.08.2010
@VERSION 1.0
/*/
FUNCTION PLSLIMSTA(CCHAVE)
	DEFAULT CCHAVE 	:= SPACE(100)
	//ZERA MATRIZ STATICA
	IF EMPTY(CCHAVE)
		__AMATCOM := {}
	ENDIF
RETURN()

/*/{PROTHEUS.DOC} PLSMD
MARCA CAMPOS SELECIONADOS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 24.08.2010
@VERSION 1.0
/*/
FUNCTION PLSMD(AMAT,LCHECK)
	LOCAL NI 	:= 0
	LOCAL NTAM	:= IIF( LEN(AMAT)>0 , LEN(AMAT[1]) ,0)
	//MARCA LINHAS
	FOR NI := 1 TO LEN(AMAT)
		IF AMAT[NI,NTAM] != LCHECK
			AMAT[NI,NTAM] := LCHECK
		ENDIF
	NEXT
RETURN

/*/{PROTHEUS.DOC} PLSPE
PESQUISA DO BROWSE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 02.05.2011
@VERSION 1.0
/*/
FUNCTION PLSPE(OOBJGRID,AMATLIN,CCHAVE,AMATCOL,CTIPOPES)
LOCAL NPOS 		:= 0
LOCAL NPESCOL 	:= ASCAN(AMATCOL,{|X| X[1] == CTIPOPES})

// MARCA OS ITENS JA SELECIONADOS
IF (NPOS := ASCAN(AMATLIN,{|X| UPPER(ALLTRIM(X[NPESCOL])) == UPPER(ALLTRIM(CCHAVE))})) > 0

	AMATLIN[NPOS,LEN(AMATLIN[NPOS])] := .T.
	
	OOBJGRID:NAT := NPOS
	OOBJGRID:REFRESH()
ENDIF

RETURN

/*/{PROTHEUS.DOC} PLSGRAUUM
MARCA CAMPOS SELECIONADOS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 24.08.2010
@VERSION 1.0
/*/
FUNCTION PLSGRAUUM(CCDPADP,CCODPRO,CCODIGO,CDATPRO,CTIPO)
LOCAL AAREA 	:= GETAREA()
LOCAL LRET		:= .F.
LOCAL CRET		:= ""
LOCAL AVETTAB 	:= {}
LOCAL CCODTAB	:= ""

DEFAULT CCDPADP	:= ""
DEFAULT CCODPRO := ""
DEFAULT CCODIGO := ""
DEFAULT CTIPO	:= ""

//CTIPO == "1" - INFORMA BD4_CODTPA E RETORNA BD4_CODIGO
//CTIPO == "2" - INFORMA BD4_CODIGO E RETORNA BD4_CODTPA

AVETTAB := PLSRETTAB(CCDPADP,CCODPRO,CDATPRO,PLSINTPAD(),"","","","")

IF AVETTAB[1]
	CCODTAB := AVETTAB[3]
ENDIF

IF CTIPO == "1"
	BD4->(DBSETORDER(3)) //BD4_FILIAL + BD4_CODTAB + BD4_CDPADP + BD4_CODPRO + BD4_CODTPA
	IF BD4->(DBSEEK(XFILIAL("BD4")+PLSINTPAD()+CCODTAB+CCDPADP+CCODPRO+CCODIGO))
		CRET := BD4->BD4_CODIGO
		LRET := .T.
	ENDIF
ELSE
	BD4->(DBSETORDER(1)) //BD4_FILIAL + BD4_CODTAB + BD4_CDPADP + BD4_CODPRO + BD4_CODIGO + DTOS(BD4_VIGINI)
	IF BD4->(DBSEEK(XFILIAL("BD4")+PLSINTPAD()+CCODTAB+CCDPADP+CCODPRO+CCODIGO))
		CRET := BD4->BD4_CODTPA
		LRET := .T.
	ENDIF
ENDIF

RESTAREA(AAREA)

RETURN {LRET,CRET}

/*/{PROTHEUS.DOC} PLSTXTSX3
RETORNA O TEXTO DO ITEM DO SX3
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 20.02.2011
@VERSION 1.0
/*/
FUNCTION PLSTXTSX3(CCAMPO,CCONTEUDO)
LOCAL NPOS	 := 0
LOCAL CTEXTO := ""
LOCAL ARET 	 := {}

// MONTA MATRIZ COM CONTEUDO DO SX3
ARET := RETSX3BOX( X3CBOX( POSICIONE('SX3',2,CCAMPO,'X3_CBOX') ),,,1 )

// ALIMENTA A ESTRUTURA
IF LEN(ARET) > 0
	IF ( NPOS := ASCAN(ARET,{ |X| X[2] == CCONTEUDO }) ) > 0
		CTEXTO := ALLTRIM(ARET[NPOS,3])
	ENDIF
ENDIF

RETURN OEMTOANSI(CTEXTO)

/*/{PROTHEUS.DOC} PLSHTML
RETORNA UM TEXTO NO FORMATO HTML
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 08/02/11
@VERSION 1.0
/*/
FUNCTION PLSHTML(CTEXTO,CTAMANHO,CCOLOR,CTYPE)
DEFAULT CTAMANHO := '4'
DEFAULT CCOLOR   := 'BLACK'
DEFAULT CTYPE	 := 'COURIER NEW'

CRET := '<FONT STYLE="FONT-SIZE:'+CTAMANHO+'PX; FONT-FAMILY:'+CTYPE+'; COLOR:'+CCOLOR+'; FONT-WEIGHT: BOLD" >'+CTEXTO+'</FONT>'

RETURN CRET

/*/{PROTHEUS.DOC} B72LIMPA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION B72LIMPA()

M->B72_OBS := ""

RETURN .T.

/*/{PROTHEUS.DOC} PLSAJUMAT
AJUSTA MATRIZ DE CRITICAS NA GRAVACAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 08/02/11
@VERSION 1.0
/*/
FUNCTION PLSAJUMAT(ACABCRI,ADADCRI,CCAMPO)
LOCAL NI		:=	1
LOCAL NPOS		:= 0
LOCAL AMATAUX 	:= {}
LOCAL CALIAS	:= SUBSTR(CCAMPO,1,3)
LOCAL CCODGLO	:= ""
LOCAL CCODAUX	:= ""

FOR NI := 1 TO LEN(ADADCRI)

	IF PLRETPOS( CCAMPO,ACABCRI ) !=  0 
		
		IF ! EMPTY( ADADCRI[ NI,PLRETPOS( CCAMPO,ACABCRI ) ] )
		
			//VERIFICA SE O CAMPO EXISTE
			IF (NPOS := PLRETPOS( CALIAS + "_TIPO",ACABCRI ) ) > 0
				
				CCODGLO := ADADCRI[ NI,PLRETPOS( CALIAS + "_CODGLO",ACABCRI ) ]
				
				IF CCODAUX <> CCODGLO
					IF EMPTY(CCODGLO)
						CCODGLO := CCODAUX
					ELSE
						CCODAUX := CCODGLO
					ENDIF
				ENDIF
				
				ADADCRI[NI,NPOS] := POSICIONE("BCT",1, XFILIAL("BCT") + PLSINTPAD() + CCODGLO ,"BCT_TIPO")
			ENDIF
			
			//MATRIZ AJUSTADA
			AADD( AMATAUX, ADADCRI[NI] )
			
		ENDIF
		
	ELSE
		EXIT	
	ENDIF
	
NEXT

ADADCRI := ACLONE(AMATAUX)

RETURN

/*/{PROTHEUS.DOC} PLSRETCP
RETORNA A COMPOSICAO DE UM PROCEDIMENTO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03/04/11
@VERSION 1.0
/*/
FUNCTION PLSRETCP(CMATRUS,CCODRDA,CCODPAD,CCODPRO,DDATPRO,CCODINT,CCODLOCAL,CCODESP,LANESTE)
LOCAL CCODPLA := ""
LOCAL CTIPPRE := ""
LOCAL AVETTAB := {}
LOCAL ACOMEVE := {}

DEFAULT LANESTE := .F.

// VERIFICA O PRODUTO DO USUARIO
IF ! EMPTY(CMATRUS)
	BA1->(DBSETORDER(2))//BA1_FILIAL, BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO
	BA3->(DBSETORDER(1))//BA3_FILIAL, BA3_CODINT, BA3_CODEMP, BA3_MATRIC, BA3_CONEMP, BA3_VERCON, BA3_SUBCON, BA3_VERSUB
	
	IF BA1->(MSSEEK(XFILIAL("BA1")+CMATRUS)) .AND. !EMPTY(BA1->BA1_CODPLA)
		CCODPLA := BA1->BA1_CODPLA
	ELSEIF BA3->(MSSEEK(XFILIAL("BA3")+SUBSTR(CMATRUS,1,14))).AND. !EMPTY(BA3->BA3_CODPLA)
		CCODPLA := BA3->BA3_CODPLA
	ENDIF
	
ENDIF

// VERIFICA O TIPO DO PRESTADOR
IF ! EMPTY(CCODRDA)
	BAU->(DBSETORDER(1))//BAU_FILIAL, BAU_CODIGO
	IF BAU->(MSSEEK(XFILIAL("BAU")+CCODRDA))
		CTIPPRE := BAU->BAU_TIPPRE
	ENDIF
ENDIF

// TABELA
IF ! EMPTY(CCODPRO)
	
	AVETTAB := PLSRETTAB(CCODPAD,CCODPRO,DDATPRO,CCODINT,CCODRDA,CCODESP,"",CCODLOCAL,DDATPRO,"1",CCODINT,CCODPLA,,,,CTIPPRE)
	
	IF AVETTAB[1]
		ACOMEVE	:= PLSCOMEVE(AVETTAB[3],CCODPAD,CCODPRO,CCODINT,DDATPRO,,,,,,,,,,LANESTE)
	ENDIF
	
ENDIF

RETURN(ACOMEVE)

/*/{PROTHEUS.DOC} PLSCHKPAC
VERIFICA A TABELA E SE O PROCEDIMENTO PRINCIPAL ESTA NO PAC
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03/04/11
@VERSION 1.0
/*/
FUNCTION PLSCHKPAC(CALIASITE,CCODRDA,DDATPRO)
LOCAL AAREA 	 := GETAREA()
LOCAL CCODPAD	 := &( "M->"+CALIASITE+"_CODPAD" )
LOCAL CCODPRO 	 := ""
LOCAL CCPAUX	 := ""
LOCAL NPOS		 := 0
LOCAL LEXISPAC 	 := .F.
LOCAL LRET		 := .F.
// SIX
SIX->( DBSETORDER(1) )
// CHECA SE DEVE PROCURAR NO PACOTE
IF SIX->( MSSEEK("BR88") )
	// VERIFICA SE O PROCEDIMENTO INFORMADO E PACOTE
	BR8->( DBSETORDER(8) ) //BR8_FILIAL + BR8_CODPSA + BR8_TPPROC + BR8_CODPAD
	// ANTES DE VERIFICAR SE EXISTE PACOTE
	CCODPRO := &("M->"+CALIASITE+"_CODPRO")
	// NAO FAZ A PROCURA DE PACOTE NO REEMBOLSO E NO HONORARIO
	IF !PLSRETAUT()[1] $ "04,03"
		LRET := BR8->( MSSEEK( XFILIAL("BR8") + CCODPRO + '6' + ALLTRIM(CCODPAD) ) )
	ENDIF
	// VERIFICA SE O PROCEDIMENTO DE PACOTES ESTA NA COMPOSICAO DE PACOTE
	IF LRET
		// MONTA A COMPOSICAO DO PACOTE
		AITENSPAC := PLRETPAC(PLSINTPAD(),CCODRDA,BR8->BR8_CODPAD,BR8->BR8_CODPSA,NIL,DDATPRO)
		
		IF LEN(AITENSPAC) > 0
			// TABELA DO PACOTE
			CCODPAD := BR8->BR8_CODPAD
			// VERFICA QUAL PROCEDIMENTO DEVE SER INSERIDO AUTOMATICAMENTE
			LEXISPAC := ( NPOS := ASCAN( AITENSPAC,{ |X| X[2] == BR8->BR8_CODPSA } ) ) > 0
			// NAO ESTA NO PACOTE
			IF LEXISPAC
				CCPAUX := AITENSPAC[NPOS,1]
			ENDIF
		ELSE
			LRET := .F.
		ENDIF
	ENDIF
	// SE NAO ACHOU PROCURA NA BR8
	IF !LRET .AND. EMPTY(CCODPAD)
		LRET := BR8->( MSSEEK( XFILIAL("BR8") + CCODPRO ) )
		IF LRET
			CCODPAD := IIF( !EMPTY(CCODPAD) , CCODPAD , BR8->BR8_CODPAD )
		ENDIF
	ENDIF
	
	IF EMPTY(CCPAUX)
		CCPAUX := CCODPAD
	ENDIF
	// COLOCA O CODPAD NO CAMPO
ENDIF

RESTAREA(AAREA)
RETURN( {CCPAUX + ALLTRIM(CCODPRO), CCODPAD } )

/*/{PROTHEUS.DOC} PLSVLDINP
INCLUI PROCEDIMENTO NAO RELACIONADO NO PACOTE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 11.04.11
@VERSION 1.0
/*/
FUNCTION PLSVLDINP(__CTIPO,CCODPP,OENCA,OBRWP,OBRWC,CALIASCAB,CALIASITE,CALIASCRI,ADADB43,ACABB43,ATRBB43)
LOCAL NI         := 1
LOCAL NPOSII	 := 1
LOCAL NQTDCON  	 := 1
LOCAL NPOSLINDEL := 0
LOCAL NPOSCODPAD := 0
LOCAL NPOSCODPRO := 0
LOCAL CSEQUEN	 := ""
LOCAL CCODPAD  	 := ""
LOCAL CCODPRO  	 := ""
LOCAL LNEGPROPAC := .F.
LOCAL LEXISBRW 	 := .F.
LOCAL ACODCRI	 := {}

PRIVATE AGETS
PRIVATE ATELA

DEFAULT CALIASCAB := "BE1"
DEFAULT CALIASITE := "BE2"
DEFAULT CALIASCRI := "BEG"
DEFAULT CCODPP    := CPADPRO
DEFAULT ADADB43	  := {}
DEFAULT ACABB43	  := {}
DEFAULT ATRBB43	  := {}
// POSICAO
NPOSLINDEL := LEN(OBRWP:AHEADER)+1
NPOSCODPAD := ASCAN( OBRWP:AHEADER,{ |X| X[2] == CALIASITE+"_CODPAD"} )
NPOSCODPRO := ASCAN( OBRWP:AHEADER,{ |X| X[2] == CALIASITE+"_CODPRO"} )
// TABELA E O PROCEDIMENTO
CSEQUEN := STRZERO( LEN(OBRWP:ACOLS)+1,3 )
CCODPAD := SUBS(CCODPP,1,2)
CCODPRO := SUBS(CCODPP,3,16)
CCODPRO := CCODPRO + SPACE( 16-LEN(CCODPRO) )
// VERIFICA A TABELA E SE O PROCEDIMENTO PRINCIPAL ESTA NO PACOTE
LEXISBRW := ( NPOSII := ASCAN( OBRWP:ACOLS ,{ |X| X[NPOSCODPRO] == CCODPRO .AND. X[NPOSCODPAD] == CCODPAD .AND. !X[NPOSLINDEL] } ) ) > 0

IF LEXISBRW
	CSEQUEN	:= OBRWP:FIELDGET(CALIASITE+"_SEQUEN",NPOSII)
ENDIF

LNEGPROPAC 	:= PLSCHKPRI(CSEQUEN,CCODPAD,CCODPRO,CALIASITE,OBRWP,CALIASCRI,OBRWC,&("M->"+CALIASCAB+"_CODRDA"),&("M->" + CALIASCAB + IIF(CALIASCAB=="BE4","_DTDIGI","_DATPRO") ),&("M->"+CALIASCAB+"_USUARI"),&("M->"+CALIASCAB+"_CODESP"),&("M->"+CALIASCAB+"_CODLOC") )
// JA EXISTE NO BROWSE E DEVE SER NEGADO POIS O PACOTE FOI INFORMADO DEPOIS
IF LNEGPROPAC .AND. LEXISBRW
	// FICA COM .F. PARA NAO CHECAR NOVAMENTE NO 090AUT
	LNEGPROPAC := .F.
	// SEQUENCIA E PROCEDIMENTO
	CCODPAD := OBRWP:FIELDGET(CALIASITE+"_CODPAD",NPOSII)
	
	PLSPOSGLO(PLSINTPAD(),__ACDCRI186[1],__ACDCRI186[2],,"0")
	AADD(ACODCRI,{__ACDCRI186[1],PLSBCTDESC(), CCODPAD + "-" + CCODPRO,BCT->BCT_NIVEL,BCT->BCT_TIPO,CCODPAD,CCODPRO} )
	
	// ALIAS E CAMINHO DA CRITICA.
	PLSCOMPCRI(ACODCRI,CALIASCRI)
	
	// AJUSTA PROCEDIMENTO JA AUTORIZADO
	OBRWP:FIELDPUT(CALIASITE+"_STATUS","0",NPOSII)
	OBRWP:FIELDPUT(CALIASITE+"_IMGSTA","DISABLE",NPOSII)
	OBRWP:FIELDPUT(CALIASITE+"_AUDITO",BCT->BCT_AUDITO,NPOSII)
	OBRWP:FIELDPUT(CALIASITE+"_NIVCRI","BLY",NPOSII)
	OBRWP:FIELDPUT(CALIASITE+"_CHVNIV",CSEQUEN+CCODPAD+CCODPRO,NPOSII)
	// CRITICA O PROCEDIMENTO JA AUTORIZADO
	PLSA090ACR(,,,ACODCRI,OBRWC,CSEQUEN,CALIASCRI,OBRWP)
	
	OBRWP:LATUSVCOL := .F.
	// SE FOR INCLUSAO DE PACOTE ONDE O PROCEDIMENTO E NEGADO AJUSTA PARA .F. PARA NAO CONSIDERAR NA 090AUT
ELSEIF LNEGPROPAC .AND. !LEXISBRW .AND. CCODPAD <> M->&( CALIASITE+"_CODPAD" )
	LNEGPROPAC := .F.
	
ELSEIF LNEGPROPAC .AND. LEXISBRW .AND. CCODPAD == M->&( CALIASITE+"_CODPAD" )
	LNEGPROPAC := .F.
	// SE VAI INCLUIR PROCEDIMENTO NAO COMPOSTO NO PACOTE
ELSEIF !LNEGPROPAC .AND. !LEXISBRW .AND. CCODPAD <> M->&( CALIASITE+"_CODPAD" )
	// INCLUI A LINHA
	AGETS := ACLONE(OENCA:AGETS)
	ATELA := ACLONE(OENCA:ATELA)
	// PROCEDIMENTO
	OBRWP:ADDBLANK()
	OBRWP:FORCEREFRESH(OBRWP)
	// CRITICAS
	OBRWC:ADDBLANK()
	OBRWC:FORCEREFRESH(OBRWC)
	
	OBRWC:SETPOS( LEN(OBRWC:ACOLS) )
	OBRWP:SETPOS( LEN(OBRWP:ACOLS) )
	
	CSEQUEN	:= OBRWP:FIELDGET(CALIASITE+"_SEQUEN" )
	OBRWP:FIELDPUT(CALIASITE+"_SEQUEN",CSEQUEN )
	// SE OK
	BR8->( DBSETORDER(1) )
	BR8->( MSSEEK( XFILIAL("BR8")+CCODPAD+CCODPRO ) )
	// VALIDA O PROCEDIMENTO
	IF CALIASCAB <> "BE4"
		LRET := PLSA090AUT(CSEQUEN,CCODPAD,CCODPRO,NQTDCON,"2",;
			CALIASITE,CALIASCAB,CALIASCRI,OBRWP,OBRWC,&("M->"+CALIASCAB+"_CDPFRE"),NIL,NIL,NIL,NIL,NIL,;
			NIL,NIL,NIL,ADADB43,ACABB43,ATRBB43,NIL,IF(__CTIPO=="2","S","E"),;
			NIL,NIL,.F.)
	ELSE
		LRET := PLSA092AUT(CSEQUEN,CCODPAD,CCODPRO,NQTDCON,"2",CALIASITE,CALIASCAB,CALIASCRI,,.F.)
	ENDIF
	// VERFICACAO FINAL
	IF LRET
		// TRIGGER
		RUNTRIGGER(1)
		SX7->( DBSETORDER(1) )
		IF SX7->( MSSEEK( CALIASITE+"_CODPRO" ) )
			
			WHILE ! SX7->(EOF()) .AND. SX7->X7_CAMPO == CALIASITE+"_CODPRO"
				
				IF OBRWP:FIELDPOS(SX7->X7_CDOMIN) > 0 .AND. TYPE("M->"+SX7->X7_CDOMIN) <> "U"
					OBRWP:FIELDPUT(SX7->X7_CDOMIN,&("M->"+SX7->X7_CDOMIN))
				ENDIF
				
				SX7->( DBSKIP() )
			ENDDO
		ENDIF
		// ATUALIZA
		OBRWP:REFRESH()
		OBRWC:ATUALIZA()
		OBRWP:ATUALIZA()
	ENDIF
ENDIF
RETURN( LNEGPROPAC )

/*/{PROTHEUS.DOC} PLSCHKPRI
VERIFICA A TABELA E SE O PROCEDIMENTO PRINCIPAL ESTA NO PACOTE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03/04/11
@VERSION 1.0
/*/
FUNCTION PLSCHKPRI(CSEQUEN,CCODPAD,CCODPRO,CALIASITE,OBRWPRO,CALIASCRI,OBRWCRI,CCODRDA,DDATPRO,CMATRUS,CCODESP,CCODLOCAL)
LOCAL AAREA   	  	:= GETAREA()
LOCAL NPOS		  	:= 0
LOCAL NPOSII	  	:= 0
LOCAL NI		  	:= 1
LOCAL LRET 	  	  	:= .F.
LOCAL LEXISPAC	  	:= .F.
LOCAL LEXISPACBRW  	:= .F.
LOCAL LPARAUT		:= .F.
LOCAL LNEGPROPAC	:= .F.
LOCAL CCOMPAR	  	:= ""
LOCAL CCODPADDIG    := ""
LOCAL NPOSLINDEL  	:= LEN(OBRWPRO:AHEADER)+1
LOCAL NPOSCODPAD  	:= ASCAN(OBRWPRO:AHEADER,{ |X| X[2] == CALIASITE+"_CODPAD"})
LOCAL NPOSCODPRO  	:= ASCAN(OBRWPRO:AHEADER,{ |X| X[2] == CALIASITE+"_CODPRO"})
LOCAL AITENSPAC	  	:= {}
LOCAL AMATCOM 	  	:= {}
LOCAL ARET		  	:= {}
LOCAL ACODCRI		:= {}
LOCAL OGEN		  	:= NIL
DEFAULT CMATRUS	  	:= ""
DEFAULT CCODRDA	  	:= ""
DEFAULT CCODESP	  	:= ""
DEFAULT CCODLOCAL 	:= ""
// VERIFICA SE JA EXISTE UM PROCEDIMENTO DE PACOTE NO BROWSE
LEXISPACBRW := ( NPOSII := ASCAN( OBRWPRO:ACOLS ,{ |X| X[NPOSCODPRO] == CCODPRO .AND. X[NPOSCODPAD] <> CCODPAD .AND. !X[NPOSLINDEL] } ) ) > 0
// SE EXISTE PEGA DO BROWSE
IF LEXISPACBRW
	CCODPADDIG := OBRWPRO:FIELDGET(CALIASITE+"_CODPAD",NPOSII)
ELSE
	CCODPADDIG := M->&( CALIASITE+"_CODPAD" )
ENDIF
// CHECA SE O PROCEDIMENTO ENCONTRADO E UM PACOTE
AITENSPAC := PLRETPAC(PLSINTPAD(),CCODRDA,CCODPADDIG,CCODPRO,NIL,DDATPRO)
// SE TEM COMPOSICAO
IF LEN(AITENSPAC) > 0
	// SE O PROCEDIMENTO DE PACOTE ESTA NA COMPOSICAO DO PACOTE
	LEXISPAC := ( NPOS := ASCAN( AITENSPAC,{ |X| X[2] == CCODPRO } ) ) > 0
	
	IF LEXISPAC
		// PEGA A PARTICIPACAO DO PROCEDIMENTO DENTRO DO PACOTE
		CCOMPAR := AITENSPAC[NPOS,9]
		// PARTICIPACAO DO PROCEDIMENTO INFORMADO NA GETDADOS
		AMATCOM := PLSNEGCOM(CSEQUEN,CCODPAD,CCODPRO,'0',DDATPRO,K_INCLUIR,"",.T.,CCODRDA,CCODESP,CCODLOCAL,CMATRUS,"",.F.)
		// SE O PROCEDIMENTO TEM COMPOSICAO
		IF !EMPTY(CCOMPAR) .AND. LEN(AMATCOM) > 0
			// MATRIZ DA COMPOSICAO DO PROCEDIMENTO DO PACOTE
			OGEN := PLSCONTR():NEW()
			ARET := OGEN:SPLIT(',', CCOMPAR )
			OGEN:DESTROY()
			// POSICIONA NO PROCEDIMENTO
			IF ( NPOS := ASCAN(AMATCOM,{|X| X[1] == CSEQUEN+CCODPAD+CCODPRO} ) ) > 0
				
				FOR NI:=1 TO LEN(AMATCOM[NPOS,2])
					IF !AMATCOM[NPOS,2,NI,5]
						AMATCOM[NPOS,2,NI,5] := ASCAN( ARET,{|X| STRTRAN(X,'-','') == AMATCOM[NPOS,2,NI,2] + ALLTRIM(LEFT(AMATCOM[NPOS,2,NI,1],AT('-',AMATCOM[NPOS,2,NI,1])-1)) } ) > 0
					ENDIF
				NEXT
				
			ENDIF
			// SE EXISTE AO MENOS UMA PARTICIPACAO LIBERADA
			LPARAUT := ASCAN( AMATCOM[NPOS,2],{|X| !X[5] } ) > 0
		ENDIF
		// SE EXISTE AO MENOS UMA PARTICIPACAO LIBERADA
		IF !LPARAUT
			LNEGPROPAC := .T.
		ENDIF
	ENDIF
ENDIF

RESTAREA(AAREA)
RETURN( LNEGPROPAC )

/*/{PROTHEUS.DOC} PLSNACOM
NEGAR A COMPOSICAO DO PROCEDIMENTO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03/04/11
@VERSION 1.0
/*/
FUNCTION PLSNACOM(CSEQUEN,CCODPAD,CCODPRO,CSTATUS,DDATPRO,NOPC,CCHAVE,CCODRDA,LBD7,CMATRUS)
LOCAL AAREA		:= GETAREA()
LOCAL NY		:= 0
LOCAL NPOS		:= 0
LOCAL NPOS2		:= 0
LOCAL AMATCOM 	:= {}
DEFAULT CMATRUS	:= ""

// SE A CRITICA ESTA ATIVA E SE EH PERMITIDA PARA A RDA
IF PLSPOSGLO( PLSINTPAD(),__ACDCRI178[1],__ACDCRI178[2] ) .AND. PLSCHKCRI( {'BAU',CCODRDA,__ACDCRI178[1]} )

	// SETA O IDX
	BD7->( DBSETORDER(1) ) //BD7_FILIAL + BD7_CODOPE + BD7_CODLDP + BD7_CODPEG + BD7_NUMERO + BD7_ORIMOV + BD7_SEQUEN + BD7_CODUNM + BD7_NLANC

	// NEGAR A PARTICIPACAO
	AMATCOM := PLSNEGCOM(CSEQUEN,CCODPAD,CCODPRO,CSTATUS,DDATPRO,NOPC,CCHAVE,,CCODRDA,,,CMATRUS,,,LBD7)

	// POSICIONA NO PROCEDIMENTO CORRETO
	IF ( NPOS := ASCAN(AMATCOM,{|X| X[1] == CSEQUEN+CCODPAD+CCODPRO } ) ) > 0
		// VERIFICA TODAS AS PARTICIPACOES

		FOR NY:=1 TO LEN(AMATCOM[NPOS,2])

			// POSICIONA NO BD7 CORRESPONDENTE E BLOQUEIA A PARTICIPACAO
			IF BD7->( MSSEEK( XFILIAL("B53") + B53->(B53_CODOPE + B53_CODLDP + B53_CODPEG + B53_NUMERO + B53_ORIMOV + CSEQUEN + AMATCOM[NPOS,2,NY,2] ) ) )
				
				IF BD7->( FIELDPOS("BD7_BLOPAG") ) > 0

					PLSPOSGLO(PLSINTPAD(),__ACDCRI179[1],__ACDCRI179[2])

					// SE ESTA NEGADA OU NAO
					BD7->( RECLOCK("BD7",.F.) )
						PLBLOPC('BD7', AMATCOM[NPOS,2,NY,LEN(AMATCOM[NPOS,2,NY])], __ACDCRI179[1], PLSBCTDESC())
					BD7->( MSUNLOCK() )
					
				ENDIF
				
			ENDIF
		NEXT
	ENDIF
ENDIF

// REST NAS LINHAS DO BROWSE E NA AREA
RESTAREA( AAREA )

RETURN(AMATCOM)

/*/{PROTHEUS.DOC} PLSSALDO
VERIFICA SE AINDA TEM SALDO NO BD7
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03/04/11
@VERSION 1.0
/*/
FUNCTION PLSSALDO(CCHAVE,CCHAVLIB)
LOCAL AAREA	:= GETAREA()
LOCAL LSALDO:= .F.
DEFAULT CCHAVLIB := ""
// POSICIONA NO PRIMEIRO ITEM E VERIFICA SE AINDA TEM SALDO
IF !EMPTY(CCHAVLIB)
	BE2->( DBSETORDER(1) )//BE2_FILIAL + BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT + BE2_SEQUEN
	IF BE2->(MSSEEK(XFILIAL("BE2")+ CCHAVLIB))
		WHILE !BE2->(EOF()) .AND. XFILIAL("BE2")+CCHAVLIB == BE2->(BE2_FILIAL+BE2_OPEMOV+BE2_ANOAUT+BE2_MESAUT+BE2_NUMAUT)
			IF BE2->BE2_SALDO > 0
				LSALDO := .T.
				EXIT
			ENDIF
			BE2->(DBSKIP())
		ENDDO
	ENDIF
ENDIF
// RETORNO A AREA
RESTAREA( AAREA )
RETURN(LSALDO)

/*/{PROTHEUS.DOC} PLSGETCRI
RETORNA CRITICA VALIDADA NA AUTORIZACAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 11/08/11
@VERSION 1.0
/*/
FUNCTION PLSGETCRI(CALIASCAB,CCHAVGUI,CSEQUEN,CCODPAD,CCODPRO,NQTDPRO)
LOCAL AAREA		:= GETAREA()
LOCAL AAREACAB	:= {}
LOCAL AAREACRI	:= {}
LOCAL CCHAVE	:= ""
LOCAL COPEMOV	:= ""
LOCAL CCODCRI 	:= ""
LOCAL CDESCRI 	:= ""
LOCAL CINFCRI 	:= ""
LOCAL CALIASCRI := ""
LOCAL CCODTPA	:= ""
LOCAL ACODCRI 	:= {}

// SATD - COBRANCA (CONSULTA OU EXAME)
IF CALIASCAB == 'BEA'

	CALIASCRI := 'BEG'
	
	AAREACAB  := (CALIASCAB)->(GETAREA())
	AAREACRI  := (CALIASCRI)->(GETAREA())
	
	BEA->( DBSETORDER(12) ) //BEA_FILIAL + BEA_OPEMOV + BEA_CODLDP + BEA_CODPEG + BEA_NUMGUI + BEA_ORIMOV

// HONORARIO
ELSEIF CALIASCAB == 'B0D'

	CALIASCRI := 'B2D'
	
	AAREACAB  := (CALIASCAB)->(GETAREA())
	AAREACRI  := (CALIASCRI)->(GETAREA())
	
	B0D->( DBSETORDER(5) ) //B0D_FILIAL + B0D_OPEMOV + B0D_CODLDP + B0D_CODPEG + B0D_NUMGUI
	
	SIX->(DBSETORDER(1))
	IF !SIX->( MSSEEK("B0D5") )

		FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"INDICE NAO ENCONTRADO [5] ALIAS ["+CALIASCAB+"]" , 0, 0, {})
		
		RETURN(ACODCRI)
	ENDIF

// RESUMO
ELSEIF CALIASCAB == 'B0I'

	CALIASCRI := 'B0L'
	
	AAREACAB  := (CALIASCAB)->(GETAREA())
	AAREACRI  := (CALIASCRI)->(GETAREA())
	
	B0I->( DBSETORDER(3) ) //B0I_FILIAL + B0I_OPEMOV + B0I_CODLDP + B0I_CODPEG + B0I_NUMGUI
	
ENDIF

// POSICIONA NO CABECALHO PARA MONTAR A CHAVE DA CRITICA
IF !EMPTY(CALIASCRI)

	IF (CALIASCAB)->( MSSEEK(XFILIAL(CALIASCAB) + CCHAVGUI ) )
		CCHAVE := &(CALIASCAB+"->("+CALIASCAB+"_OPEMOV+"+CALIASCAB+"_ANOAUT+"+CALIASCAB+"_MESAUT+"+CALIASCAB+"_NUMAUT)")
	ENDIF
	
ENDIF

BCT->(DBSETORDER(1)) //BCT_FILIAL + BCT_CODOPE + BCT_PROPRI + BCT_CODGLO

// POSICIONA NA CRITICA
IF !EMPTY(CCHAVE)
	
	(CALIASCRI)->( DBSETORDER(1) ) //???_FILIAL + ???_OPEMOV + ???_ANOAUT + ???_MESAUT + ???_NUMAUT + ???_SEQUEN
	IF (CALIASCRI)->( MSSEEK(XFILIAL(CALIASCRI)+CCHAVE+CSEQUEN) )
		
		// WHILE DE CRITICA CONFORME CHAVE
		WHILE !(CALIASCRI)->(EOF()) .AND. &(CALIASCRI+"->("+CALIASCRI+"_OPEMOV+"+CALIASCRI+"_ANOAUT+"+CALIASCRI+"_MESAUT+"+CALIASCRI+"_NUMAUT+"+CALIASCRI+"_SEQUEN)") == CCHAVE+CSEQUEN
		
			// DADOS DA CRITICA
			COPEMOV	:= (CALIASCRI)->&(CALIASCRI+"_OPEMOV")
			CCODCRI := (CALIASCRI)->&(CALIASCRI+"_CODGLO")
			CDESCRI := (CALIASCRI)->&(CALIASCRI+"_DESGLO")
			CINFCRI := (CALIASCRI)->&(CALIASCRI+"_INFGLO")
			CCODTPA := (CALIASCRI)->&(CALIASCRI+"_PARTIC")
		
			// POSICIONA NA TABELA DE CRITICA
			IF !EMPTY(CCODCRI)
		
				IF BCT->(MSSEEK( XFILIAL("BCT") + COPEMOV + CCODCRI ) )
					AADD(ACODCRI,{CCODCRI,CDESCRI,"",BCT->BCT_NIVEL,BCT->BCT_TIPO,CCODPAD,CCODPRO,CSEQUEN,CCODTPA,NQTDPRO,0,"1"})
				ENDIF
				
			ELSE
				AADD(ACODCRI,{"",CDESCRI,CINFCRI,BCT->BCT_NIVEL,BCT->BCT_TIPO,CCODPAD,CCODPRO,CSEQUEN})
			ENDIF
			
			(CALIASCRI)->(DBSKIP())
		ENDDO
		
	ENDIF
	
ENDIF

// RETORNO A AREA
RESTAREA( AAREA )

(CALIASCAB)->( RESTAREA( AAREACAB ) )
(CALIASCRI)->( RESTAREA( AAREACRI ) )

RETURN(ACODCRI)

/*/{PROTHEUS.DOC} PLSORDFIE
MATRIZ DE CAMPOS ORDENADOS PARA USO NA MSGET OU PLSBRW. A MATRIZ ACAMPOS PODE TER O CONTEUDO DA BCM POR EXEMPLO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 11/08/11
@VERSION 1.0
/*/
FUNCTION PLSORDFIE(CALIAS, ACAMPOS, ACAMPOSEDT, LFOLDER, LCOPYGUI)
LOCAL AAREA  	:= GETAREA()
LOCAL LMSMAT  	:= GETNEWPAR("MV_PLSLSX3",.F.)
LOCAL NI	  	:= 1
LOCAL AFIELDS 	:= NIL
LOCAL AFOLDERS	:= NIL
LOCAL CDFOLDER	:= ""
LOCAL LPLSA094B := FUNNAME() == "PLSA094B"

DEFAULT LFOLDER  := .T.
DEFAULT LCOPYGUI := .F.     // ORIUNDAS DE ROTINAS DE COPAS DE GUIAS

// SE MONTA A MSMGET POR SX3 OU MATRIZ
IF LMSMAT .OR. LCOPYGUI

	SX3->( DBSETORDER(2) )

	// FOR DE CAMPOS
	AFIELDS := {}
	
	FOR NI := 1 TO LEN(ACAMPOS)
	
		// POSICIONA NO REGISTRO
		IF SX3->( MSSEEK( ACAMPOS[NI] ) )
	
			// MONTA MATRIZ DE CAMPOS
			IF X3USO(SX3->X3_USADO)
			
				AADD( AFIELDS, {SX3->X3_TITULO,;		//01
								SX3->X3_CAMPO,;			//02
								SX3->X3_TIPO,;			//03
								SX3->X3_TAMANHO,;		//04
								SX3->X3_DECIMAL,;		//05
								SX3->X3_PICTURE,;		//06
								IIF(!EMPTY(SX3->X3_VALID),&("{||"+SX3->X3_VALID+"}"),""),;//07
								X3OBRIGAT(SX3->X3_CAMPO),;	//08
								SX3->X3_NIVEL,;				//09
								SX3->X3_RELACAO,;			//10
								SX3->X3_F3,;				//11
								IIF(!EMPTY(SX3->X3_WHEN),&("{||"+SX3->X3_WHEN+"}"),""),;			//12
								IIF(ASCAN(ACAMPOSEDT,ACAMPOS[NI])>0,.F.,SX3->X3_VISUAL == "V"),;	//13
								.F.,; //LCHAVE								//14
								SX3->X3_CBOX,; // TEM QUE VALIDAR PAISES.	//15
								VAL(SX3->X3_FOLDER),; // NFOLDER			//16
								.F.,;//LNALTERA								//17
								SX3->X3_PICTVAR,;//LPICTVAR  				//18
								SX3->X3_TRIGGER,;//GATILHO					//19
								NI} )//ORDEM								//20
				
				// COPIANDO UMA LIBERAÇÃO DEVEMO HABILITAR SOMENTE O CAMPO SOLICITAÇÃO O CAMPO RELAIZADO NÃO, POIS AINDA NÃO FOI REALIZADO NADA
				IF LCOPYGUI .AND. LPLSA094B
				
					IF ALLTRIM(SX3->X3_CAMPO) == "BE2_QTDPRO"
					
						SX3->( MSSEEK("BE2_QTDSOL"))
						AFIELDS[LEN(AFIELDS),1] := SX3->X3_TITULO
						
						IF LCOPYGUI
							AFIELDS[LEN(AFIELDS),10] := ''
						ENDIF
						
					ELSEIF ALLTRIM(SX3->X3_CAMPO) == "BE2_QTDSOL"
					
						SX3->( MSSEEK("BE2_QTDPRO") )
						AFIELDS[LEN(AFIELDS),1]	:= SX3->X3_TITULO
						AFIELDS[LEN(AFIELDS),13]:= .T.
						
						IF LCOPYGUI
							AFIELDS[LEN(AFIELDS),10]:= ''
						ENDIF
						
					ENDIF
					
				ENDIF
				
			ENDIF
			
		ENDIF
		
	NEXT
	
	// ORDER DE CAMPO E FOLDER
	IF LFOLDER
		AFIELDS := ASORT(AFIELDS,,,{|X,Y| X[20]+X[16] < Y[20]+Y[16] } )
	ENDIF
	
	// MONTA FOLDER
	IF LEN(AFIELDS) > 0
	
		SXA->(DBSETORDER(1))
	
		IF SXA->(MSSEEK(CALIAS)) .AND. LFOLDER
		
			AFOLDERS := {}
		
			WHILE !SXA->(EOF()) .AND. (SXA->XA_ALIAS == CALIAS)
			
				#IFDEF SPANISH
					CDFOLDER := SXA->XA_DESCSPA
				#ELSE
					#IFDEF ENGLISH
						CDFOLDER := SXA->XA_DESCENG
					#ELSE
						CDFOLDER := SXA->XA_DESCRIC
					#ENDIF
				#ENDIF
				AADD(AFOLDERS,CAPITAL(ALLTRIM(CDFOLDER)))
				
			SXA->(DBSKIP())
			ENDDO
			
		ELSE
			AFOLDERS := NIL
		ENDIF
		
	ELSE
		AFIELDS := NIL
	ENDIF
	
ENDIF

RESTAREA(AAREA)

RETURN( {AFIELDS,AFOLDERS} )

/*/{PROTHEUS.DOC} PLSXB11
ATUALIZA SEQUEN OU VALIDA QTD
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 06/05/11
@VERSION 1.0
/*/
FUNCTION PLSXB11(NTP)
LOCAL XRET

IF TYPE('OBRWBD6')=='O'
	N := OBRWBD6:LINHA()
	
	IF NTP == 1
		XRET := OBRWBD6:ACOLS[N,PLRETPOS("BD6_SEQUEN",OBRWBD6:AHEADER)]
	ELSE
		XRET := M->B11_QTDGLO <= OBRWBD6:ACOLS[N,PLRETPOS("BD6_QTDPRO",OBRWBD6:AHEADER)]
	ENDIF
ELSE
	IF NTP == 1
		XRET := '001'
	ELSE
		XRET := M->B11_QTDGLO <= 1
	ENDIF
ENDIF
RETURN XRET

/*/{PROTHEUS.DOC} PLSVLDGP
VERIFICA SE O NUMERO DA GUIA PRINCIPAL DO BD5 E BE4 E VALIDO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 06/05/11
@VERSION 1.0
/*/
FUNCTION PLSVLDGP(CNUMERO,NTP)
LOCAL AAREA := BEA->(GETAREA())
LOCAL LRET  := .T.
DEFAULT NTP	:= 2
//| VERIFICA SE A GUIA DE AUTORIZACAO EXISTE (SADT OU INTERNACAO)
IF !EMPTY(CNUMERO)
	IF NTP == 1
		BEA->(DBSETORDER(1))//BEA_FILIAL + BEA_OPEMOV + BEA_ANOAUT + BEA_MESAUT + BEA_NUMAUT + DTOS(BEA_DATPRO) + BEA_HORPRO
		IF !BEA->( MSSEEK(XFILIAL("BEA")+CNUMERO) )
			BEA->(DBSETORDER(6))//BEA_FILIAL + BEA_OPEINT + BEA_ANOINT + BEA_MESINT + BEA_NUMINT + DTOS(BEA_DATPRO) + BEA_HORPRO
			IF !BEA->(MSSEEK(XFILIAL("BEA")+CNUMERO))
				LRET := .F.
			ENDIF
		ENDIF
	ELSE
		BEA->(DBSETORDER(6))//BEA_FILIAL + BEA_OPEINT + BEA_ANOINT + BEA_MESINT + BEA_NUMINT + DTOS(BEA_DATPRO) + BEA_HORPRO
		IF !BEA->(MSSEEK(XFILIAL("BEA")+CNUMERO))
			LRET := .F.
		ENDIF
	ENDIF
ENDIF
//| VERIFICA SE ENCONTROU
IF !LRET
	AVISO( 	"ATENÇÃO",;
		"NÃO EXISTE ESTA GUIA DE AUTORIZAÇÃO",;
		{ "OK" }, 2 )
ENDIF

BEA->(RESTAREA(AAREA))
RETURN LRET

/*/{PROTHEUS.DOC} PLSHISGLO
HISTORICO DE GLOSAS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSHISGLO(CALIAS)
LOCAL NI		 := 1
LOCAL CCHAVEGUI	 := ( CALIAS )->&( CALIAS + "_CODOPE" ) + ( CALIAS )->&( CALIAS + "_CODLDP" ) + ( CALIAS )->&( CALIAS + "_CODPEG" ) + ( CALIAS )->&( CALIAS + "_NUMERO" ) + ( CALIAS )->&( CALIAS + "_ORIMOV" )
LOCAL AHISTORICO := {}
LOCAL ATITCAMPO  := {}
LOCAL ACABEC     := {}
LOCAL ARETGLO	 := {}
LOCAL ARETACAO	 := {}

// ARRAY DE CAMPOS
AADD(ATITCAMPO,'BDX_ACAO')  //01
AADD(ATITCAMPO,'BDX_TIPGLO')//02
AADD(ATITCAMPO,'BDX_DTACAO')//03
AADD(ATITCAMPO,'BDX_CODPRO')//04
AADD(ATITCAMPO,'BDX_DESPRO')//05
AADD(ATITCAMPO,'BDX_CODGLO')//06
AADD(ATITCAMPO,'BDX_DESGLO')//07
AADD(ATITCAMPO,'BDX_VLRMAN')//08
AADD(ATITCAMPO,'BDX_VLRPAG')//09
AADD(ATITCAMPO,'BDX_VLRGLO')//10
AADD(ATITCAMPO,'BDX_PERGL2')//11
AADD(ATITCAMPO,'BDX_QTDREC')//12
AADD(ATITCAMPO,'BDX_VLRREC')//13
AADD(ATITCAMPO,'BDX_VLRINF')//14
AADD(ATITCAMPO,'BDX_QTDINF')//15
AADD(ATITCAMPO,'BDX_RESPAL')//16
AADD(ATITCAMPO,'BDX_OBS')	//17


//MONTA MATRIZ DE HISTORICO
BDX->(DBSETORDER(1))//BDX_FILIAL+BDX_CODOPE+BDX_CODLDP+BDX_CODPEG+BDX_NUMERO+BDX_ORIMOV+BDX_CODPAD+BDX_CODPRO+BDX_SEQUEN+BDX_CODGLO
IF BDX->( MSSEEK( XFILIAL("BDX") + CCHAVEGUI) )
	
	//PEGA O TITULO DOS CAMPOS
	SX3->( DBSETORDER(2) )
	
	FOR NI := 1 TO LEN(ATITCAMPO)
		
		IF SX3->( MSSEEK( ATITCAMPO[NI] ) )
			AADD(ACABEC,{ ALLTRIM(SX3->X3_TITULO),SX3->X3_PICTURE,IIF(SX3->X3_TIPO == 'M',200,SX3->X3_TAMANHO)} )
		ENDIF
		
	NEXT
	
	//MONTA MATRIZ DE HISTORICO
	WHILE ! BDX->(EOF()) .AND. BDX->(BDX_FILIAL+BDX_CODOPE+BDX_CODLDP+BDX_CODPEG+BDX_NUMERO+BDX_ORIMOV) == XFILIAL("BDX") + CCHAVEGUI
	
 		IF BDX->BDX_TIPREG == '3' .OR. (BDX->BDX_TIPREG == '1' .AND. !EMPTY(BDX->BDX_ACAO))
			
			AADD(AHISTORICO,{ 	PLRDESBOX(@ARETACAO,'BDX_ACAO',BDX->BDX_ACAO),;
								PLRDESBOX(@ARETGLO,'BDX_TIPGLO',BDX->BDX_TIPGLO),;
								BDX->BDX_DTACAO,;
								ALLTRIM(BDX->BDX_CODPRO),;
								ALLTRIM(BDX->BDX_DESPRO),;
								ALLTRIM(BDX->BDX_CODGLO),;
								ALLTRIM(BDX->BDX_DESGLO),;
								BDX->BDX_VLRMAN,;
								BDX->BDX_VLRPAG,;
								BDX->BDX_VLRGLO,;
								BDX->BDX_PERGL2,;
								BDX->BDX_QTDREC,;
								BDX->BDX_VLRREC,;
								BDX->BDX_VLRINF,;
								BDX->BDX_QTDINF,;
								ALLTRIM(BDX->BDX_RESPAL),;
								ALLTRIM(BDX->BDX_OBS) } )
		ENDIF
		
	BDX->( DBSKIP() )
	ENDDO
	
ENDIF

//EXIBE TELA
IF LEN(AHISTORICO) > 0
	PLSCRIGEN(AHISTORICO, ACABEC,"GLOSAS",,,,,,,,,,,,,,,,,,,,TFONT():NEW("COURIER NEW",7,14,,.F.,,,,.F.,.F.))
ELSE
	AVISO( "ATENÇÃO","NÃO EXISTEM GLOSAS PARA ESTA GUIA",{ 'OK' } )
ENDIF

RETURN()

/*/{PROTHEUS.DOC} PLSVLCOC
VALIDA SE O PROCEDIMENTO E DE CONSULTA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSVLCOC(CCODPAD,CCODPRO)
LOCAL AAREA := GETAREA()
LOCAL LRET	:=.T.
// VERIFICA SE O PROCEDIMENTO E UMA CONSULTA
IF BR8->( FIELDPOS(BR8->BR8_CONSUL) ) > 0
	BR8->(DBSETORDER(1))
	IF BR8->( MSSEEK(XFILIAL("BR8")+CCODPAD+CCODPRO) )
		
		IF BR8->BR8_CONSUL<>"1"
			LRET := .F.
		ENDIF
		
	ENDIF
ENDIF

RESTAREA(AAREA)

RETURN(LRET)

/*/{PROTHEUS.DOC} PLSVINTS
VALIDA SE E POSSIVEL ALTERAR O OBSERVACAO DA INTERNA SAUDE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSVINTS()
LOCAL AAREA 	:= GETAREA()
LOCAL LRET		:= .T.

// VERIFICA SE TEM RESPOSTA DO AUDITOR PARA O QUESTIONAMENTO DA INT SAUDE
B73->( DBSETORDER(1) )//B73_FILIAL + B73_ALIMOV + B73_RECMOV + B73_SEQPRO + B73_CODGLO + B73_SEQUEN
LRET := B73->( MSSEEK( XFILIAL("B73") + B72->( B72_ALIMOV + B72_RECMOV + B72_SEQPRO + B72_CODGLO ) ) )

RESTAREA(AAREA)
	
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSCLSOP
LIMPA __COPEUSR SE FOR NECESSARIO PARA FORCAR UMA NA SAUDE REINICIZALIZAÇAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 26.10.05
@VERSION 1.0
/*/
FUNCTION PLSCLSOP()

__COPEUSR := ""

RETURN

/*/{PROTHEUS.DOC} PLSJAVA
EXECUTA .JAR EXTERNO VIA LINHA DE COMANDO.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 10.08.2011
@VERSION 1.0
/*/
FUNCTION PLSJAVA(CPATH, CJARNAME, APARMS, CLIB)
LOCAL CCOMANDO
LOCAL CRESPOSTA
LOCAL NX

CCOMANDO := "JAVAW -JAR "

IF EXISTDIR(CPATH)
	CCOMANDO += '"' + CPATH
ELSE
	RETURN(STR0069 + CHR(13) + CHR(10) + CPATH)//"ERRO: CAMINHO NÃO EXISTE!"
ENDIF

IF FILE(CPATH+"\"+CJARNAME)
	CCOMANDO += '\' + CJARNAME + '"'
ELSE
	RETURN(STR0070 + CHR(13) + CHR(10) + CPATH+"\"+CJARNAME)//"ERRO: ARQUIVO .JAR NÃO ENCONTRADO!"
ENDIF

IF VALTYPE(CLIB) == "C" .AND. !EMPTY(CLIB) .AND. !FILE(CPATH+"\"+CLIB)
	RETURN(STR0071 + CHR(13) + CHR(10) + CPATH+"\"+CLIB)//"ERRO: ARQUIVO DE BIBLIOTECA DO .JAR NÃO ENCONTRADO!"
ENDIF

IF VALTYPE(APARMS) == "A"
	
	FOR NX := 1 TO LEN(APARMS)
		
		CCOMANDO += ' "' + APARMS[NX] + '"'
		
	NEXT
	
ENDIF

CCOMANDO := STRTRAN(CCOMANDO,'"','')
CRESPOSTA := WINEXEC(CCOMANDO)

IF VALTYPE(CRESPOSTA) == "N"
	CRESPOSTA := CVALTOCHAR(CRESPOSTA)
ENDIF
	
RETURN(CRESPOSTA)

/*/{PROTHEUS.DOC} PLSBAUOPE
VALIDA RDA X OPERADORA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 10.08.2011
@VERSION 1.0
/*/
FUNCTION PLSBAUOPE(CRDA)
RETURN(EXISTCPO("BAU",CRDA,1) .AND. EXISTCPO("BAW",CRDA + PLSINTPAD(),1) )

/*/{PROTHEUS.DOC} PLSRSUB
RETORNA CONTEUDO DO RELACAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04.02.2012
@VERSION 1.0
/*/
FUNCTION PLSRSUB(NTP)
LOCAL CRET:= ""

IF NTP == 1
	CRET := IF(INCLUI,"",POSICIONE("BT5",1,XFILIAL("BT5")+PLSINTPAD()+B40->(B40_CODEMP+B40_NUMCON+B40_VERCON),"BT5_NOME"))
ELSEIF NTP == 2
	CRET := IF(INCLUI,"",POSICIONE("BQC",1,XFILIAL("BQC")+PLSINTPAD()+B40->(B40_CODEMP+B40_NUMCON+B40_VERCON+B40_SUBCON+B40_VERSUB),"BQC_DESCRI"))
ENDIF

RETURN(CRET)

/*/{PROTHEUS.DOC} PLSINCRI
INCLUI NOVAS CRITICAS NA MATRIZ DE CRITICAS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04.02.2012
@VERSION 1.0
/*/
FUNCTION PLSINCRI(ACODCRI,ARET)
LOCAL NFOR := 0
// INCLUI NOVAS CRITICAS NA MATRIC STATIC DE CRITICA
FOR NFOR := 1 TO LEN(ARET)
	IF ASCAN(ACODCRI,{|X| X[1] == ARET[NFOR,1] } ) == 0
		AADD(ACODCRI,ARET[NFOR])
	ENDIF
NEXT
RETURN

/*/{PROTHEUS.DOC} PLSDPTUSS
DE/PARA TABELA TUSS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04.02.2012
@VERSION 1.0
/*/
FUNCTION PLSDPTUSS(CTP,CCODPAD,CCODPRO)
LOCAL CRETCPAD := CCODPAD
LOCAL CRETCPRO := CCODPRO

// SOMENTE SE INFORMADO
IF ! EMPTY(CCODPAD+CCODPRO)
	// VERIFICA SE A ORDEM FOI ALTERADA
	DO CASE
		// ENTRADA
	CASE CTP == 'E'
		IF BW0->( INDEXORD() ) <> 1
			BW0->( DBSETORDER(1) ) //BW0_FILIAL + BW0_CODPD1 + BW0_CODPR1 + BW0_CODPD2 + BW0_CODPR2
		ENDIF
		// DE/PARA DE ENTRADA
		IF BW0->( MSSEEK( XFILIAL("BW0") + CCODPAD + CCODPRO ) )
			CRETCPAD := BW0->BW0_CODPD2
			CRETCPRO := BW0->BW0_CODPR2
		ELSE
			IF BW0->( MSSEEK( XFILIAL("BW0") + CCODPAD + SPACE(LEN(BW0->BW0_CODPR2)) ) )
				CRETCPAD := BW0->BW0_CODPD2
				BR8->( DBSETORDER(1) )
				IF BR8->( MSSEEK( XFILIAL("BR8") + BW0->BW0_CODPD2 + CCODPRO ) )
					CRETCPAD := BW0->BW0_CODPD2
					CRETCPRO := CCODPRO
				ENDIF
			ENDIF
		ENDIF
		// SAIDA
	CASE CTP == 'S'
		IF BW0->( INDEXORD() ) <> 2
			BW0->( DBSETORDER(2) ) //BW0_FILIAL + BW0_CODPD2 + BW0_CODPR2 + BW0_CODPD1 + BW0_CODPR1
		ENDIF
		// DE/PARA DE ENTRADA
		IF BW0->( MSSEEK( XFILIAL("BW0")+CCODPAD+CCODPRO ) )
			CRETCPAD := BW0->BW0_CODPD1
			CRETCPRO := BW0->BW0_CODPR1
		ELSE
			IF BW0->( MSSEEK( XFILIAL("BW0")+CCODPAD+SPACE(LEN(BW0->BW0_CODPR2)) ) )
				CRETCPAD := BW0->BW0_CODPD1
				BR8->( DBSETORDER(1) )
				IF BR8->( MSSEEK( XFILIAL("BR8") + BW0->BW0_CODPD1 + CCODPRO ) )
					CRETCPAD := BW0->BW0_CODPD1
					CRETCPRO := CCODPRO
				ENDIF
			ENDIF
		ENDIF
	ENDCASE
ENDIF

RETURN( { CRETCPAD,CRETCPRO } )

/*/{PROTHEUS.DOC} PLSFTEL
FORMATA NUMERO DE TELEFONE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04.02.2012
@VERSION 1.0
/*/
FUNCTION PLSFTEL(CTEL)
	
CTEL := ALLTRIM( STRTRAN(STRTRAN(STRTRAN(CTEL,"-",""),')',""),"(","") )
// FORMATA NUMERO DE TELEFONE
IF LEN( ALLTRIM(CTEL) ) == 10
	CTEL := "("+LEFT(CTEL,2)+") " + SUBSTR(CTEL,3,4) + "-" + SUBSTR(CTEL,7,4)
ELSEIF LEN( ALLTRIM(CTEL) ) == 8
	CTEL := SUBSTR(CTEL,1,4) + "-" +  SUBSTR(CTEL,5,4)
ENDIF

RETURN(CTEL)

/*/{PROTHEUS.DOC} PLSCOMPCRI
INCLUI NIVEL E CAMINHO DA CRITICA.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 04.02.2012
@VERSION 1.0
/*/
FUNCTION PLSCOMPCRI(___ACODCRI,CALIAS,CCHVNIV)
LOCAL NX	:= 0
LOCAL IX	:= 0
DEFAULT CCHVNIV := ""

// ADICIONA UMA NOVA LINHA COM O ALIAS E O CAMINHO DA CRITICA.
IF VALTYPE(___ACODCRI) == "A" .AND. LEN(___ACODCRI) > 0

	IF VALTYPE(___ACODCRI[1]) == "A" .AND. LEN(___ACODCRI[1]) > 0
		
		AADD(___ACODCRI, ARRAY(LEN(___ACODCRI[1])) )
		
		IX := LEN(___ACODCRI)
		
		FOR NX := 1 TO LEN(___ACODCRI[IX])
		
			IF NX == 1
				___ACODCRI[IX][NX] := " "
			ELSEIF NX == 2
				___ACODCRI[IX][NX] := "NÍVEL: " + CALIAS + " - "+POSICIONE('SX2' , 1 , CALIAS , 'X2_NOME')
			ELSEIF NX == 3
				___ACODCRI[IX][NX] := STRZERO(IX, 2) + " - " + PLSRETNCRI(CALIAS)
			ELSEIF NX == 4
				IF !EMPTY(CCHVNIV)
					___ACODCRI[IX][NX] := "CHAVE: " + CCHVNIV
				ENDIF
			ELSE
				___ACODCRI[IX][NX] := ""
			ENDIF
			
		NEXT
		
	ENDIF
	
ENDIF

RETURN(___ACODCRI)

/*/{PROTHEUS.DOC} PLVLMATM
VERIFICA SE PROCEDIMENTO EH MATERIAL OU MEDICAMENTO E SE A RDA DE PAGAMENTO RECEBEU UM PROCEDIMENTO.
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 13/06/11
@VERSION 1.0
/*/
FUNCTION PLVLMATM()
LOCAL CCODPAD 	:= BD7->BD7_CODPAD
LOCAL CCODPRO 	:= BD7->BD7_CODPRO
LOCAL AREGBD6 	:= BD6->(GETAREA())
LOCAL CCHAGUI 	:= ""
LOCAL CCLASSE 	:= ""
LOCAL CTPPROC 	:= ""
LOCAL ATPMAT	:= STRTOKARR(ALLTRIM( GETNEWPAR("MV_PLSTPMA","0,6|1,2,3,4,5,7,8|9|1,2,3,4,5,7,8,9") ), "|") 
LOCAL LCONSULTA := .F.
LOCAL NVALMAX	:= 0

CCHAGUI := BD7->(BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV)

BR8->(DBSETORDER(1))
BD6->(DBSETORDER(1))
BD6->(MSSEEK(XFILIAL("BD6")+CCHAGUI))

IF ! EMPTY(BD6->BD6_GUIORI)
	CCHAGUI := BD6->BD6_GUIORI
	BD6->(MSSEEK(XFILIAL("BD6")+CCHAGUI))
ENDIF

WHILE BD6->(BD6_CODOPE+BD6_CODLDP+BD6_CODPEG+BD6_NUMERO+BD6_ORIMOV) == CCHAGUI .AND. !BD6->(EOF())
	
	IF BD6->BD6_VLRAPR > NVALMAX .OR. LCONSULTA
		
		IF BR8->(BR8_CODPAD+BR8_CODPSA) <> BD6->(BD6_CODPAD+BD6_CODPRO)
			BR8->( MSSEEK( XFILIAL('BR8') + BD6->(BD6_CODPAD+BD6_CODPRO) ) )
		ENDIF
		
		CTPPROC := BR8->BR8_TPPROC
		CCLASSE	:= BR8->BR8_CLASSE
		
		//SE NÃO FOR MAT/MED/TXAS - 1,2,3,4,5,7,8,9
		IF ! CTPPROC $ ATPMAT[4] 
			
			CCODPAD := BD6->BD6_CODPAD
			CCODPRO := BD6->BD6_CODPRO
		
			//SE FOR CONSULTA
			IF PLSISCON(CCODPAD,CCODPRO)
				LCONSULTA := .T.
			ELSE
				LCONSULTA := .F.
			ENDIF
			
			IF ! LCONSULTA .OR. NVALMAX == 0
				NVALMAX := BD6->BD6_VLRAPR
			ENDIF	
				
		ENDIF
		
	ENDIF
	
	BD6->(DBSKIP())
	
ENDDO

BD6->(RESTAREA(AREGBD6))

RETURN ( { CCODPAD,CCODPRO,LCONSULTA,CCLASSE,CTPPROC } )

/*/{PROTHEUS.DOC} PLSBIGRELA
FUNÇÃO GENERICA PARA INIC. PAD. DE CAMPO MAIORES QUE O  X3_RELACAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 25.05.06
@VERSION 1.0
/*/
FUNCTION PLSBIGRELA(CCAMPO)
LOCAL XRET 		:= NIL
DEFAULT	CCAMPO 	:= ""

IF CCAMPO == "BCD_DESESP"
	XRET := POSICIONE("BAQ",1,XFILIAL("BAQ")+IIF(TYPE("M->BAX_CODINT")<>"U" .AND. INCLUI,M->(BAX_CODINT+BAX_CODESP),BCD->(BCD_CODINT+BCD_CODESP)),"BAQ_DESCRI")
ENDIF
	
RETURN(XRET)

//TIPO DO SERVICO
/*
ADEQUAÇÃO DA RN 390  ANEXOS  À FUNÇÃO PLTPSERV (PLSXFUN.PRW)  PARA RETORNAR O TIPO DE SERVIÇO CLASSIFICANDO OS PROCEDIMENTOS.

7.1.2 O TIPO DE EVENTO DEVERÁ CONSIDERAR OS SEGUINTES CONCEITOS:

==> AMBULATORIAIS
PROCEDIMENTOS ODONTOLÓGICOS:
TOTAL DE ATENDIMENTOS COM FINS DE DIAGNÓSTICO E ORIENTAÇÃO TERAPÊUTICA EM SAÚDE BUCAL, EM REGIME AMBULATORIAL, DE
CARÁTER ELETIVO, URGÊNCIA OU EMERGÊNCIA.
->	LOCALIZAÇÃO PELA TABELA PADRÃO (BR8_ODONTO = '1'), INDEPENDENTE DO TIPO DE PROCEDIMENTO (BR8_TPPROC).

CONSULTAS MÉDICAS:
TOTAL DE ATENDIMENTOS PRESTADOS POR PROFISSIONAL HABILITADO PELO CONSELHO REGIONAL DE MEDICINA, COM FINS DE
DIAGNÓSTICO E ORIENTAÇÃO TERAPÊUTICA, EM REGIME AMBULATORIAL, DE CARÁTER ELETIVO, URGÊNCIA OU EMERGÊNCIA.
->	TESTA SE O PROCEDIMENTO É UMA CONSULTA, SOMENTE EM AMBULATORIAL. NESTE CASO, QUANDO HÁ MAIS DE UM PROCEDIMENTO, A
CLASSIFICAÇÃO DOS DEMAIS SE DARÁ PELO BFA E EXCEÇÕES SERÃO CLASSIFICADAS EM DEMAIS DESPESAS MÉDICO-HOSPITALARES.
SE NÃO HOUVER OUTRO PROCEDIMENTO NA GUIA, OS ITENS JUNTOS A CONSULTA SERÃO CLASSIFICADOS COMO DEMAIS DESPESAS.

OUTROS ATENDIMENTOS AMBULATORIAIS:
ATENDIMENTOS REALIZADOS EM REGIME AMBULATORIAL DE CARÁTER ELETIVO, URGÊNCIA OU EMERGÊNCIA, INCLUINDO HONORÁRIOS
PROFISSIONAIS, MEDICAMENTOS, MATERIAIS E TAXAS (EXCETO CONSULTAS MÉDICAS, EXAMES E TERAPIAS).
INCLUI ATENDIMENTOS COM PROFISSIONAIS DE NÍVEL SUPERIOR.
->	LOCALIZAR SOMENTE PELO BFA, SOMENTE EM AMBULATORIAL. NESTE CASO, QUANDO HÁ MAIS DE UM PROCEDIMENTO, A
CLASSIFICAÇÃO DOS DEMAIS SE DARÁ PELO BFA E EXCEÇÕES SERÃO CLASSIFICADAS EM DEMAIS DESPESAS MÉDICO-HOSPITALARES.

EXAMES:
TOTAL DE PROCEDIMENTOS DE AUXÍLIO DIAGNÓSTICO UTILIZADOS PARA COMPLEMENTAR A AVALIAÇÃO DO ESTADO DE SAÚDE, EM REGIME
AMBULATORIAL, DE CARÁTER ELETIVO, URGÊNCIA OU EMERGÊNCIA, INCLUINDO HONORÁRIOS PROFISSIONAIS, MEDICAMENTOS, MATERIAIS
E TAXAS.
->	LOCALIZAR SOMENTE PELO BFA, SOMENTE EM AMBULATORIAL. NESTE CASO, QUANDO HÁ MAIS DE UM PROCEDIMENTO, SERÁ
CONSIDERADO COMO PRINCIPAL O DE MAIOR VALOR, E A CLASSIFICAÇÃO SE DARÁ A PARTIR DELE.

TERAPIAS:
TOTAL DE ATENDIMENTOS UTILIZANDO MÉTODOS DE TRATAMENTO, EM REGIME AMBULATORIAL, DE CARÁTER ELETIVO, URGÊNCIA OU
EMERGÊNCIA, INCLUINDO HONORÁRIOS PROFISSIONAIS, MEDICAMENTOS, MATERIAIS E TAXAS.
->	LOCALIZAR SOMENTE PELO BFA, SOMENTE EM AMBULATORIAL. NESTE CASO, QUANDO HÁ MAIS DE UM PROCEDIMENTO, SERÁ
CONSIDERADO COMO PRINCIPAL O DE MAIOR VALOR, E A CLASSIFICAÇÃO SE DARÁ A PARTIR DELE.

DEMAIS DESPESAS MÉDICO-HOSPITALARES:
DESPESAS ASSISTENCIAIS MÉDICO-HOSPITALARES, ACESSÓRIAS AOS ATENDIMENTOS DE PROMOÇÃO DA SAÚDE, PREVENÇÃO DE DOENÇAS,
DIAGNÓSTICO, TRATAMENTO E REABILITAÇÃO DO PACIENTE, INCLUINDO DESPESAS NÃO CLASSIFICÁVEIS NOS DEMAIS ITENS DESTE ANEXO,
MENOS OS DESCONTOS OBTIDOS NO PAGAMENTO DE EVENTOS. INCLUEM AS ATIVIDADES COLETIVAS, ALUGUEL DE CADEIRAS DE RODAS,
REMOÇÃO DE PACIENTE, CAMPANHA DE VACINAÇÃO, PALESTRAS, ASSISTÊNCIA FARMACÊUTICA.
->	EXCEÇÕES NÃO CLASSIFICÁVEIS NOS DEMAIS ITENS DESTE ANEXO.

==> INTERNAÇÕES
INTERNAÇÕES:
TOTAL DE INTERNAÇÕES PRESTADAS A PACIENTE ADMITIDO PARA OCUPAR LEITO HOSPITALAR (ENFERMARIA, QUARTO OU UNIDADES DE
CURTA PERMANÊNCIA, TERAPIA INTENSIVA OU SEMI-INTENSIVA) E CLASSIFICADOS CONFORME O PRINCIPAL PROCEDIMENTO GERADOR
IDENTIFICADO POR OCASIÃO DA ALTA HOSPITALAR.
PARA APURAR O VALOR DAS INTERNAÇÕES, DEVEM SER CONSIDERADAS AS DESPESAS COM HOTELARIA, HONORÁRIOS PROFISSIONAIS,
MEDICAMENTOS, MATERIAIS, TAXAS, TERAPIAS E EXAMES, CONFORME A ESPECIFICIDADE DA EXECUÇÃO DO ITEM.
->	TUDO O QUE FOR LANÇADO EM TEMPO DE INTERNAÇÃO.
*/
/*/{PROTHEUS.DOC} PLTPSERV
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLTPSERV(CCODPAD,CCODPRO,CCHVBEN,CALIASCAB)
LOCAL AAREA		:= {}
LOCAL AAREABR8	:= BR8->(GETAREA())
LOCAL CTMP 		:= ""
LOCAL ACODPRO 	:= {}
LOCAL ANIVPRO 	:= {}
LOCAL NTMP		:= 0
LOCAL LACHOU	:= .F.
LOCAL LCONSULTA := .F.
LOCAL CGRUGEN	:= GETNEWPAR('MV_PLSCTGR','0001')

LOCAL CMATRICUSR:= " "
LOCAL LINTERN	:= BD6->BD6_TIPGUI $ '05,06'
LOCAL CRET		:= ""
LOCAL ATPMAT	:= STRTOKARR(ALLTRIM( GETNEWPAR("MV_PLSTPMA","0,6|1,2,3,4,5,7,8|9|1,2,3,4,5,7,8,9") ), "|")  
LOCAL LCLATPEVE	:= .F.
LOCAL CHORPRO	:= BD6->BD6_HORPRO

LOCAL AAREABD5 := BD5->(GETAREA())

PRIVATE CCLASSE    	:= ""

DEFAULT CCODPAD 	:= BD7->BD7_CODPAD
DEFAULT CCODPRO 	:= BD7->BD7_CODPRO
DEFAULT CCHVBEN		:= ""
DEFAULT CALIASCAB	:= PLRETALIAS(BD7->BD7_CODOPE,BD7->BD7_TIPGUI)

IF !EMPTY(CALIASCAB)

	AAREA := (CALIASCAB)->(GETAREA())

	IF CALIASCAB $ 'BE4/BD5'
		
		CCHAVCAB := BD6->(BD6_CODOPE+BD6_CODLDP+BD6_CODPEG+BD6_NUMERO)

		(CALIASCAB)->( DBSETORDER(1) )
		IF (CALIASCAB)->( MSSEEK( XFILIAL(CALIASCAB) + CCHAVCAB ) )
			CMATRICUSR	:= BD6->(BD6_OPEUSR+BD6_CODEMP+BD6_MATRIC+BD6_TIPREG)
		ENDIF	
		
	ELSE
		CMATRICUSR := CCHVBEN
	ENDIF
	
ENDIF

//SE NAO FOR PACIENTE INTERNADO
IF !LINTERN
	
	BR8->( DBSETORDER(1) )//BR8_FILIAL+BR8_CODPAD+BR8_CODPSA+BR8_ANASIN
	IF BR8->( MSSEEK( XFILIAL('BR8') + CCODPAD + CCODPRO ) )
	
		CTPPROC	:= BR8->BR8_TPPROC
		
		//PROCEDIMENTOS ODONTOLÓGICOS
		IF BR8->BR8_ODONTO == '1'

			BI3->(DBSETORDER(5)) //BI3_FILIAL+BI3_CODINT+BI3_CODIGO
			IF BI3->( MSSEEK( XFILIAL("BI3") + BD6->(BD6_OPEUSR + BD6_CODPLA) ) )
				
				BI6->(DBSETORDER(1)) //BI6_FILIAL+BI6_CODSEG
				IF BI6->( MSSEEK( XFILIAL("BI6") + BI3->BI3_CODSEG ) )
				
					//VERIFICA SE É UMA OPERADORA ODONTOLOGICA OU SE SOMENTE COMERCIALIZA PRODUTO ODONTO (OPCIONAIS)
					IF BI6->BI6_MEDICO == '0' .AND. BI6->BI6_ODONTO == '1' .AND. BI3->BI3_TPFORN == '2' .AND. ! EMPTY(BI3->BI3_SUSEP)
						LCLATPEVE := .T.
					ENDIF
				
				ENDIF
				
			ENDIF
			
			//OUTROS ATENDIMENTOS AMBULATORIAIS
			IF ! LCLATPEVE
				CRET := '12'
			ENDIF	
			
		ELSE
			
			LCLATPEVE := .T.
			
		ENDIF
		
		IF BD6->BD6_TIPGUI =='01'
			CRET := '01'
			LCLATPEVE := .F.
		ENDIF
		//CLASSIFICACAO DO EVENTO
		IF LCLATPEVE
			
			BD5->(DBSETORDER(1))
			IF BD5->(MSSEEK(XFILIAL('BD5') + BD6->(BD6_CODOPE + BD6_CODLDP + BD6_NUMERO))) .AND. !(EMPTY(BD5->(BD5_GUIINT)))
				CRET := '06'
			ENDIF
			BD5->(RESTAREA(AAREABD5))
			
			IF !(EMPTY(CRET))
		        DO CASE
		        
		            // TIPO DO ITEM = PROCEDIMENTO OU PACOTE - PODE SER CONSULTA, EXAMES OU TERAPIAS '0|6'
		            CASE CTPPROC $ ATPMAT[1]
		                
		                // TESTA SE É CONSULTA // 01 - CONSULTAS
		                IF PLSISCON(CCODPAD,CCODPRO)
		                    CRET := '01'		
		                ENDIF
		                
		            //1=MATERIAL;2=MEDICAMENTO;3=TAXAS;4=DIARIAS;5=ORTESE/PROTESE;7=GASES MEDICINAIS;8=ALUGUEIS;	
		            CASE CTPPROC $ ATPMAT[2]
		                
		                ACODPRO		:= PLVLMATM()
		                
		                CCODPAD		:= ACODPRO[1]
		                CCODPRO		:= ACODPRO[2]
		                LCONSULTA	:= ACODPRO[3]
		                CCLASSE		:= ACODPRO[4]
		                CTPPROC		:= ACODPRO[5]
		                
		                // SE FOR MAT/MED/TXAS E CONSULTA - NÃO CLASSIFICA MAT-MED-ETC COMO CONSULTA, CLASSIFICA EM OUTROS
		                IF LCONSULTA
		                    CRET := "12" //OUTROS ATENDIMENTO AMBULATORIAIS
		                ENDIF
		                
		            // OUTROS ATENDIMENTOS
		            CASE CTPPROC == ATPMAT[3]
		                
		                CRET := "12" //OUTROS ATENDIMENTO AMBULATORIAIS
		
		        ENDCASE
           ENDIF 

            // SE NÃO CLASSIFICOU AINDA, PARA EXAMES, TERAPIAS OU MAT/MED CLASSIFICADOS NO PROCEDIMENTO PRINCIPAL
            IF EMPTY(CRET)
                
                BF0->( DBSETORDER(1) ) //BF0_FILIAL+BF0_GRUGEN+BF0_CODIGO
                BFA->( DBSETORDER(2) ) //BFA_FILIAL+BFA_CODPSA+BFA_GRUGEN+BFA_CODIGO

                IF BFA->( MSSEEK(XFILIAL("BFA") + CCODPRO + SPACE(TAMSX3("BFA_CODPSA")[1] - LEN(CCODPRO)) + CGRUGEN ) )
                    
                    IF BF0->( MSSEEK( XFILIAL("BF0") + CGRUGEN + BFA->BFA_CODIGO ) )
                    		CRET := BF0->BF0_TPUNIM
                    ENDIF
                    
                ELSE
                    
                    LACHOU  := .F.
                    ANIVPRO := PLSESPNIV(CCODPAD)
                    
                    FOR NTMP := 1 TO ANIVPRO[1]
                    
                        CTMP := SUBSTR(CCODPRO,ANIVPRO[2][NTMP][1],ANIVPRO[2][NTMP][2])
                        CTMP += REPLICATE("0",(7 - ANIVPRO[2][NTMP][2]))
                        
                        IF BFA->(MSSEEK(XFILIAL("BFA") + CTMP + SPACE(TAMSX3("BFA_CODPSA")[1] - LEN(CTMP)) + CGRUGEN))
                            
                            IF BF0->( MSSEEK( XFILIAL("BF0") + CGRUGEN + BFA->BFA_CODIGO ) )

                                CRET	:= BF0->BF0_TPUNIM
                                LACHOU 	:= .T.
                                EXIT
                                
                            ENDIF
                            
                        ENDIF
                        
                    NEXT
                    
                ENDIF
                
            ENDIF
		
		ENDIF
	
	ENDIF
	
    IF EMPTY(CRET)
        CRET := "13"		// DEMAIS DESPESAS ASSISTENCIAIS
    ENDIF
//PACIENTE INTERNADO
ELSE 
	
	CRET := "06" 

ENDIF

IF EXISTBLOCK("PLGRPPRO")
	CRET := EXECBLOCK("PLGRPPRO",.F.,.F.,{CRET,CTPPROC,CCODPAD,CCODPRO,CGRUGEN,LHONORARIO,CALIASCAB})
ENDIF

BR8->(RESTAREA(AAREABR8))

IF !EMPTY(CALIASCAB)
	(CALIASCAB)->(RESTAREA(AAREA))
ENDIF	
	
RETURN(CRET)

/*/{PROTHEUS.DOC} PLSREFAUA
VERIFICA SE A UNIDADE PODE ACEITAR REFERENCIA MAIOR QUE 1
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 25.05.06
@VERSION 1.0
/*/
FUNCTION PLSREFAUA(CUNIDADE,NREF)
LOCAL LRET := .T.
LOCAL OHELP := NIL
// VERIFICA SE FOI INFORMADO A UNIDADE
IF UPPER(CUNIDADE) == 'AUA'
	IF 	NREF > 1
		LRET := .F.
		PLSHELP("NÃO É PERMITIDO DIGITAR REFERÊNCIA MAIOR QUE 1 PARA A UNIDADE AUA")
	ENDIF
ENDIF
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSFILDAD
FILTRO DE DADOS COM BROWSE DE EXIBIÇAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 17.07.2008
@VERSION 1.0
/*/
FUNCTION PLSFILDAD(CPERG)
LOCAL NI		 := 0
LOCAL CINIPAD 	 := ""
LOCAL CBOX 		 := ""
LOCAL CPICTURE 	 := ""
LOCAL BCOL		 := ""
LOCAL ACOORS  	 := FWGETDIALOGSIZE( OMAINWND )
LOCAL ACAMPOS	 := {}
LOCAL AHEADER	 := {}
LOCAL ACOLS		 := {}
LOCAL AMATLIN	 := {}
LOCAL AMATCOL	 := {}
LOCAL AFIELD	 := {}
LOCAL ODLG		 := NIL
LOCAL OGETDAD	 := NIL
LOCAL OOBJGRID	 := NIL
LOCAL OCHECK	 := NIL
LOCAL OTOP 		 := NIL
LOCAL ODOWN		 := NIL
LOCAL OFWLAYER	 := NIL
LOCAL LCHECK	 := .F.
PRIVATE _LCHKALL := .F.
// PERGUNTE RELACIONADO
PERGUNTE(CPERG,.F.)
// MONTA AFIELD CONFORME SX1
SX1->(DBSETORDER(1))
IF SX1->(DBSEEK(CPERG))
	
	NI := 1
	WHILE !SX1->(EOF()) .AND. ALLTRIM(SX1->X1_GRUPO) == ALLTRIM(CPERG)
		// SE O MV EXISTIR
		IF TYPE('MV_PAR'+STRZERO(NI,2)) <> "U"
			// SE NAO INFORMADA A PICTURE DEFINI COMO PADRAO
			CINIPAD := &('MV_PAR'+STRZERO(NI,2))
			// VERIFICA SE E BOX
			IF UPPER(SX1->X1_GSC) == "C"
				IF !EMPTY(SX1->X1_DEF01)
					CBOX := "1="+SX1->X1_DEF01
				ENDIF
				IF !EMPTY(SX1->X1_DEF02)
					CBOX += ";2="+SX1->X1_DEF02
				ENDIF
				IF !EMPTY(SX1->X1_DEF03)
					CBOX += ";3="+SX1->X1_DEF03
				ENDIF
				IF !EMPTY(SX1->X1_DEF04)
					CBOX += ";4="+SX1->X1_DEF04
				ENDIF
				IF !EMPTY(SX1->X1_DEF05)
					CBOX += ";5="+SX1->X1_DEF05
				ENDIF
			ENDIF
			// SE NAO INFORMADA A PICTURE DEFINI COMO PADRAO
			IF EMPTY(SX1->X1_PICTURE)
				IF UPPER(SX1->X1_TIPO) == 'C'
					CPICTURE := "@!"
				ELSEIF UPPER(SX1->X1_TIPO) == 'D'
					CPICTURE := "@D"
				ELSEIF UPPER(SX1->X1_TIPO) == 'N'
					CPICTURE := "@"+REPLICATE("9",SX1->X1_TAMANHO)
				ENDIF
			ENDIF
			// MONTA A FIELD'S
			AADD(AFIELD,{SX1->X1_PERGUNT,SX1->X1_VAR01,SX1->X1_TIPO,SX1->X1_TAMANHO,SX1->X1_DECIMAL,CPICTURE,SX1->X1_VALID,.F.,1,CINIPAD,SX1->X1_F3,,.F.,.F.,CBOX,,.F.,,})
		ENDIF
		NI++
		SX1->(DBSKIP())
	ENDDO
ELSE
	AVISO( "ATENÇÃO","PERGUNTA NÃO LOCALIZADO NO SX1",{ "OK" }, 2 )
	RETURN
ENDIF
// MSDIALOG
ODLG := MSDIALOG():NEW(ACOORS[1],ACOORS[2],ACOORS[3]-100,ACOORS[4]-350,"FILTRO DE DADOS",,,,,,,,,.T.)
// CRIA O CONTEINER ONDE SERÃO COLOCADOS BROWSE'S
OFWLAYER := FWLAYER():NEW()
OFWLAYER:INIT( ODLG, .F.)
// DIVISAO DA TELA EM DUAS LINHAS DE 50%
OFWLAYER:ADDLINE('TOP'	,50,.F.)
OFWLAYER:ADDLINE('DOWN'	,100,.F.)
// LAYER TOP E DOWN
OTOP  := OFWLAYER:GETLINEPANEL('TOP')
ODOWN := OFWLAYER:GETLINEPANEL('DOWN')
// MGET
OGETDAD 				:= MSMGET():NEW(/*CALIAS*/,0,3,/*UPAR4*/,/*UPAR5*/,/*UPAR6*/,/*ACAMPOS*/,{OTOP:NTOP,OTOP:NLEFT,OTOP:NBOTTOM,OTOP:NRIGHT/2},/*ACAMPOS*/,/*NMODELO*/,/*UPAR11*/,/*UPAR12*/,/*UPAR13*/,OTOP,/*LF3*/,/*LMEMORIA*/,.F.,/*CATELA*/,/*LNOFOLDER*/,.T.,AFIELD,/*AFOLDER*/,.T.,/*LNOMDISTRETCH*/,/*UPAR25*/)
OGETDAD:OBOX:ALIGN 	:= CONTROL_ALIGN_ALLCLIENT
// BOTOES
TBUTTON():NEW(007,358, "EXECUTAR"	,ODOWN,{|| PLSEXEFIL(1,CPERG,OOBJGRID,AMATCOL,AMATLIN) }, 040, 010,,,,.T.)
TBUTTON():NEW(007,399, "CANCELAR"	,ODOWN,{|| AMATLIN := {}, PLSSELATU(OOBJGRID,AMATLIN) }, 040, 010,,,,.T.)
// PRIMEIRA PESQUISA E MONTA HEADER DO GRID
PLSEXEFIL(0,CPERG,OOBJGRID,AMATCOL,AMATLIN)
// BROWSE
OOBJGRID := PLSSELOPT("","MARCA E DESMARCA TODOS",AMATLIN,AMATCOL,K_INCLUIR,.T.,.T.,.F.,ODOWN,000,006,ODOWN:NHEIGHT/4.7,ODOWN:NWIDTH/2)

ODLG:LCENTERED	:= .T.
ODLG:ACTIVATE()
RETURN(NIL)

/*/{PROTHEUS.DOC} PLSEXEFIL
EXECUTA FILTRO DE DADOS PARA SELECAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 17.07.2008
@VERSION 1.0
/*/
FUNCTION PLSEXEFIL(NTP,CPERG,OOBJGRID,AMATCOL,AMATLIN)
LOCAL CSQL := ""
// MONTA QUERY CONFIRME CADA FILTRO
DO CASE
	// PAGAMENTO
CASE CPERG == "PLA470"
	// DEFINE O NOME DE CADA COLUNA
	IF NTP == 0
		AADD(AMATCOL,{"OPE + LOCAL + PEG"	,'@!',050,.T.} )
		AADD(AMATCOL,{"COD. RDA"			,'@!',040,.T.} )
		AADD(AMATCOL,{"NOME DA RDA"			,'@!',200,.T.} )
		// QUERY
	ELSE
		CSQL := " SELECT BCI_CODOPE+BCI_CODLDP+BCI_CODPEG AS PEG,BCI_CODRDA,BCI_NOMRDA "
		CSQL += "   FROM "+BCI->(RETSQLNAME("BCI"))
		CSQL += "  WHERE BCI_FILIAL = '"+XFILIAL("BCI")+"' "
		CSQL += "    AND BCI_CODRDA BETWEEN '"+MV_PAR29+"' AND '"+MV_PAR30+"' "
		CSQL += "    AND D_E_L_E_T_ = ' ' "
		CSQL += " ORDER BY BCI_CODRDA "
	ENDIF
ENDCASE
// EXECUTA QUERY
IF !EMPTY(CSQL)
	CSQL := CHANGEQUERY(CSQL)
	DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQL),"TRBFIL",.F.,.T.)
	// MONTA DADOS
	AMATLIN := {}
	WHILE !TRBFIL->(EOF())
		AADD(AMATLIN,{TRBFIL->PEG,TRBFIL->BCI_CODRDA,TRBFIL->BCI_NOMRDA,.F.})
		TRBFIL->(DBSKIP())
	ENDDO
	TRBFIL->(DBCLOSEAREA())
	// ATUALIZA BROWSE
	IF LEN(AMATLIN)>0
		PLSSELATU(OOBJGRID,AMATLIN)
	ENDIF
	
ENDIF

RETURN(NIL)

/*/{PROTHEUS.DOC} PLSRETROT
RETONA DA AROTINA A OPCAO DE COMPORTACAO DO MENU
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 17.07.2008
@VERSION 1.0
/*/
FUNCTION PLSRETROT(NOPC)
RETURN(IIF(! EMPTY(AROTINA) .AND. LEN(AROTINA[1])>=4,AROTINA[NOPC,4],0))

/*/{PROTHEUS.DOC} PLSGUIJUR
(LONG_DESCRIPTION)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 12/25/12
@VERSION 1.0
/*/
FUNCTION PLSGUIJUR(CMENVAR,LDIRETO)
LOCAL ACRITJUR 	:= {}
LOCAL LFORCAR  	:= .F.
LOCAL CVAR  	:= ""
LOCAL LRET	    := .T.
DEFAULT LDIRETO := .F.

// REINICIA O REGISTRADOR.
__AGUIJUR := {.F.,.F.}

IF CMENVAR == "BE1_GUIJUR"
	IF TYPE("M->BE1_GUIJUR")=="C"
		CVAR := M->BE1_GUIJUR
	ENDIF
	
ELSEIF CMENVAR == "B01_GUIJUR"
	IF TYPE("M->B01_GUIJUR")=="C"
		CVAR := M->B01_GUIJUR
	ENDIF
	
ELSEIF CMENVAR == "BE4_GUIJUR"
	IF TYPE("M->BE4_GUIJUR")=="C"
		CVAR := M->BE4_GUIJUR
	ENDIF
	
ENDIF

IF !EMPTY(CVAR)
	IF CVAR == "1"
		IF PLSPOSGLO(PLSINTPAD(),__ACDCRI09Z[1],__ACDCRI09Z[2],"1")
			
			IF !BCT->( MSSEEK(XFILIAL("BCT")+PLSINTPAD()+__ACDCRI09Z[1]) )
				IF !LDIRETO
					MSGALERT("A CRITICA NÃO FOI LOCALIZADA: AS REGRAS DA GUIA JURIDICA NÃO SERÃO CONSIDERADAS.")
				ENDIF
				
				// REGISTRA QUE NAO PERMITIU SEGUIR EM FRENTE COM A GUIA JURIDICA.
				__AGUIJUR[1] := .F.
				__AGUIJUR[2] := .F.
				
				// NÃO PERMITE CONTINUAR COM GUIA = SIM.
				LRET := .F.
			ELSE
				AADD(ACRITJUR,{__ACDCRI09Z[1],PLSBCTDESC(),"",BCT->BCT_NIVEL,BCT->BCT_TIPO,"",""})
				
				// SE DEFINIU AUDITORIA, AVISA QUE OS PROCEDIMENTOS IRAO PARA AUDITORIA
				IF BCT->BCT_AUDITO == "1"
					AADD(ACRITJUR,{""   ,"A GUIA SERÁ ENVIADA PARA AUDITORIA, CONFORME DEFINIÇÃO DA CRÍTICA.","","","","",""}) //"QUANTIDADE/VALOR DO PROCEDIMENTO"
				ENDIF
				
				// PERMITE FORCAR ?
				IF !LDIRETO
					LFORCAR := BCT->BCT_PERFOR=="1"
					LFORCOU := PLSMOVCRI("1",{"","","",""},ACRITJUR,LFORCAR)
				ENDIF
				
				IF LFORCAR .AND. !LFORCOU
					IF !LDIRETO
						MSGALERT("A CRITICA NÃO FOI FORÇADA: AS REGRAS DA GUIA JURIDICA NÃO SERÃO CONSIDERADAS.")
					ENDIF
					// REGISTRA QUE NAO PERMITIU SEGUIR EM FRENTE COM A GUIA JURIDICA.
					__AGUIJUR[1] := .F.
					__AGUIJUR[2] := .F.
					
					// NÃO PERMITE CONTINUAR COM GUIA = SIM.
					LRET := .F.
				ELSE
					// REGISTRA QUE PERMITIU SEGUIR EM FRENTE COM A GUIA JURIDICA.
					__AGUIJUR[1] := .T.
					
					IF BCT->BCT_AUDITO == "1"
						// REGISTRA QUE DEVE MANDAR A GUIA PRA AUDITORIA.
						__AGUIJUR[2] := .T.
					ENDIF
				ENDIF
			ENDIF
		ELSE
			IF !LDIRETO
				HELP("",1,"PLSGUIJU1")
			ENDIF
			
			// A CRITICA NAO ESTA ATIVA: REGISTRA QUE NAO PODERA SEGUIR EM FRENTE.
			__AGUIJUR[1] := .F.
			__AGUIJUR[2] := .F.
			
			// NÃO PERMITE CONTINUAR COM GUIA = SIM.
			LRET := .F.
		ENDIF
	ELSE
		// INFORMOU NAO: REGISTRA QUE NAO PODERA SEGUIR EM FRENTE.
		__AGUIJUR[1] := .F.
		__AGUIJUR[2] := .F.
	ENDIF
ENDIF

RETURN(LRET)

/*/{PROTHEUS.DOC} PLSGETJUR
(LONG_DESCRIPTION)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 12/26/12
@VERSION 1.0
/*/
FUNCTION PLSGETJUR()
RETURN(__AGUIJUR)

/*/{PROTHEUS.DOC} PLSTRBGER
RETORNA ALIAS DE TRABALHO DIOPS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 03.06.09
@VERSION 1.0
/*/
FUNCTION PLSTRBGER(CTIPO)
LOCAL ASTRU		:= {}
LOCAL CARQTEMP	:= ""
LOCAL _ATOTAL
LOCAL OTEMPTRB
IF CTIPO=='1'
	
	_ATOTAL:= GETSLDPLGER( MV_PAR13, MV_PAR02, MV_PAR03, "01", 10 , .T.,.T. ,'1', , , .F., , .T., "01", , , .T. )
ELSE
	
	_ATOTAL:= GETSLDPLGER( MV_PAR12, MV_PAR02, MV_PAR03, "01", 10 , .T.,.T. ,'1', , , .F., , .T., "01", , , .T. )
	
ENDIF
//CTIPO : 1=INTERCAMBIO ; 2=CORRESPONSABILIDADE
DEFAULT CTIPO	:= ""

IF SELECT("TRB") > 0
	TRB->(DBCLOSEAREA())
ENDIF

// CASO A QUERY NÃO RETORNE VALOR PREENCHO AS TAGS COM VALOR DEFAULT

AADD(ASTRU,{"SALDO1" ,"N",016,2})
AADD(ASTRU,{"SALDO2" ,"N",016,2})
AADD(ASTRU,{"SALDO3" ,"N",016,2})
AADD(ASTRU,{"SALDO4" ,"N",016,2})

//--< CRIAÇÃO DO OBJETO FWTEMPORARYTABLE >---
OTEMPTRB := FWTEMPORARYTABLE():NEW( "TRB" )
OTEMPTRB:SETFIELDS( ASTRU )
OTEMPTRB:ADDINDEX( "INDTRB",{ "SALDO1" } )
	
IF( SELECT( "TRB" ) > 0 )
	TRB->( DBCLOSEAREA() )
ENDIF
	
OTEMPTRB:CREATE()

IF _ATOTAL[1,4]+_ATOTAL[2,4]+_ATOTAL[3,4]+_ATOTAL[4,4] +_ATOTAL[6,4]+_ATOTAL[7,4]> 0
	
	DBSELECTAREA("TRB")
	TRB->(RECLOCK("TRB",.T.))
	TRB->SALDO1 := IIF(CTIPO=="1",_ATOTAL[3,4],_ATOTAL[1,4])
	TRB->SALDO2 := IIF(CTIPO=="1",_ATOTAL[4,4],_ATOTAL[2,4])
	TRB->SALDO3 := IIF(CTIPO=="1",_ATOTAL[6,4],0)
	TRB->SALDO4 := IIF(CTIPO=="1",_ATOTAL[7,4],0)
	
	TRB->(MSUNLOCK())
ENDIF
	
RETURN

/*/{PROTHEUS.DOC} PLSXFUN
(LONG_DESCRIPTION)
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 05/28/13
@VERSION 1.0
/*/
FUNCTION PLSPISCOF(DDATAINI,DDATAFIM,CALIAS)
LOCAL CQUERY := ""
DEFAULT DDATAINI 	:= DDATABASE
DEFAULT DDATAFIM 	:= DDATABASE
DEFAULT CALIAS 		:= "TRB"

IF BFQ->(FIELDPOS("BFQ_BLOCOI"))<= 0
	RETURN(.F.)
ENDIF

//FT_FILIAL+FT_TIPOMOV+FT_SERIE+FT_NFISCAL+FT_CLIEFOR+FT_LOJA+FT_ITEM+FT_PRODUTO
CQUERY:= " SELECT BFQ_BLOCOI CLASS, BM1_TIPO TIPO , BM1_VALOR VALOR , BM1_PREFIX PREFIXO, BM1_NUMTIT NUMERO, BM1_TIPTIT TIPTIT, BM1_CODTES TES,"
CQUERY+=" BM1_DOCSF2 NOTA,BM1_SERSF2 SERIE, BM1_CSTCOF CSTCOF, BM1_CSTPIS CSTPIS, BM1_NATURE NATUREZA,D2_CLIENTE CLIENTE, D2_LOJA LOJA, "
CQUERY+=" FT_TNATREC NATREC, FT_CNATREC CNATREC, FT_GRUPONC GRUPONC,FT_DTFIMNT DTFIMNT, FT_ALIQPIS ALIQPIS, FT_ALIQCOF ALIQCOF  "
CQUERY+=" FROM "+RETSQLNAME("BM1") + " BM1 "
CQUERY+=" INNER JOIN " +RETSQLNAME("BFQ")+" BFQ  ON   BFQ_FILIAL ='"+XFILIAL('BFQ')+"' AND  BFQ_CODINT=BM1_CODINT  AND BFQ_PROPRI||BFQ_CODLAN=BM1_CODTIP AND  "
CQUERY+=" BFQ.D_E_L_E_T_=' '  "
CQUERY+=" LEFT JOIN " +RETSQLNAME("SD2")+" SD2  ON   D2_FILIAL ='"+XFILIAL('SD2')+"' AND  D2_NUMSEQ=BM1_SEQSD2 AND "
CQUERY+=" SD2.D_E_L_E_T_=' '  "
CQUERY+=" LEFT JOIN " +RETSQLNAME("SFT")+" SFT  ON   FT_FILIAL ='"+XFILIAL('SFT')+"' AND FT_SERIE=BM1_SERSF2 AND FT_NFISCAL=BM1_DOCSF2 AND "
CQUERY+=" FT_CLIEFOR=D2_CLIENTE AND FT_LOJA=D2_LOJA AND FT_PRODUTO=D2_COD AND FT_ITEM= D2_ITEM AND FT_TIPOMOV='S' AND "
CQUERY+=" SFT.D_E_L_E_T_=' '  "
CQUERY+=" WHERE  BM1_MES BETWEEN '"+SUBSTR(DTOS(DDATAINI),5,2)+"' AND '"+SUBSTR(DTOS(DDATAFIM),5,2)+"' AND  "
CQUERY+=" BM1_ANO  BETWEEN '"+SUBSTR(DTOS(DDATAINI),1,4)+"' AND '"+SUBSTR(DTOS(DDATAFIM),1,4)+"' AND  "
CQUERY+=" BM1_DOCSF2 <> ' '  AND  "
CQUERY+=" BM1.D_E_L_E_T_= ' '  "

CQUERY+= " UNION "

CQUERY+= " SELECT BFQ_BLOCOI CLASS, BM1_TIPO   TIPO,  BM1_VALOR  VALOR, BM1_PREFIX PREFIXO, BM1_NUMTIT NUMERO,  BM1_TIPTIT TIPTIT, BM1_CODTES TES,"
CQUERY+="  BM1_DOCSF2 NOTA, BM1_SERSF2 SERIE, BM1_CSTCOF CSTCOF, BM1_CSTPIS CSTPIS, BM1_NATURE NATUREZA, E1_CLIENTE CLIENTE, E1_LOJA    LOJA, "
CQUERY+="  ED_TABCCZ NATREC, ED_CODCCZ CNATREC, ED_GRUCCZ GRUPONC, ED_DTFCCZ DTFIMNT,ED_PCAPPIS ALIQPIS, ED_PCAPCOF ALIQCOF "
CQUERY+="  FROM  "+RETSQLNAME("BM1")+" BM1"
CQUERY+="  INNER JOIN "+RETSQLNAME("BFQ")+" BFQ  ON BFQ_FILIAL = '"+XFILIAL("BFQ")+"' AND BFQ_CODINT = BM1_CODINT  AND BFQ_PROPRI|| BFQ_CODLAN = BM1_CODTIP AND"
CQUERY+="  BFQ.D_E_L_E_T_ = ' ' "
CQUERY+="  LEFT JOIN "+RETSQLNAME("SE1")+" SE1 ON E1_FILIAL = '"+XFILIAL("SE1")+"'   AND E1_PREFIXO = BM1_PREFIX AND E1_NUM = BM1_NUMTIT AND E1_TIPO = BM1_TIPTIT 	AND"
CQUERY+="  E1_PARCELA = BM1_PARCEL AND "
CQUERY+="  SE1.D_E_L_E_T_ = ' ' "
CQUERY+="  LEFT JOIN "+RETSQLNAME("SED")+" SED ON ED_FILIAL = '"+XFILIAL("SED")+"'  AND ED_CODIGO = E1_NATUREZ  AND SED.D_E_L_E_T_ = ' ' "
CQUERY+=" WHERE  BM1_MES BETWEEN '"+SUBSTR(DTOS(DDATAINI),5,2)+"' AND '"+SUBSTR(DTOS(DDATAFIM),5,2)+"' AND  "
CQUERY+=" BM1_ANO  BETWEEN '"+SUBSTR(DTOS(DDATAINI),1,4)+"' AND '"+SUBSTR(DTOS(DDATAFIM),1,4)+"' AND  "
CQUERY+=" BM1_DOCSF2 = ' '  AND  "
CQUERY+=" BM1.D_E_L_E_T_= ' '  "

CQUERY := CHANGEQUERY(CQUERY)

IF SELECT(CALIAS) > 0
	&(CALIAS+"->")(DBCLOSEAREA())
ENDIF

DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CQUERY),CALIAS,.F.,.T.)

RETURN(.T.)

/*/{PROTHEUS.DOC} PLQDOAUX
RETORNA INFORMAÇÃO PARA O QUADRO AUXILIAR DE EVENTOS- DIOPS
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 07/22/13
@VERSION 1.0
/*/
FUNCTION PLQDOAUX(DDATAINI,DDATAFIM)
LOCAL CSQLTMP:= " "
LOCAL CSQL := " "
LOCAL CSQLREE:= " "
LOCAL CCTPL14 := GETNEWPAR('MV_PLCT14','OPE')
LOCAL CANOINI :=ALLTRIM(STR(YEAR(DDATAINI)))
LOCAL CMESINI :='01'
LOCAL CANOFIN :=ALLTRIM(STR(YEAR(DDATAFIM)))
LOCAL CMESFIN :=ALLTRIM(STRZERO(MONTH(DDATAFIM),2))
LOCAL CCLAS,CMODPAG,CBI3APOSRG,CBI3TIPCON,CBI3TIPO,CBI3CODSEG,CBI3MODPAG,CTPPLAN, CLEI
LOCAL CDATABASE := ""
LOCAL NHANDLE  := 0
LOCAL NHANDLE1 := 0
LOCAL NHANDLE2 := 0
LOCAL NHANDLE3 := 0

//INDIVIDUAL FAMILIAR
LOCAL _BINDALEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _AINDALEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _BINDPLEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _AINDPLEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}


//COLETIVO POR ADESÃO
LOCAL _BCOLALEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _ACOLALEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _BCOLPLEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _ACOLPLEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}

// COLETIVO EMPRESARIAL

LOCAL _BEMPALEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _AEMPALEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _BEMPPLEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}
LOCAL _AEMPPLEI		:= {{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0},;
	{0,0,0,0,0,0}}

LOCAL ARET:={}
LOCAL CDIR := ALLTRIM(MV_PAR16)

CDATABASE := ALLTRIM(TCGETDB())
CSQL := "SELECT 'GUI' ALIAS, BD7_CODOPE CODOPE,BD7_CODEMP CODEMP,BD7_MATRIC MATRIC,BD7_TIPREG TIPREG,  BD7_CODPAD CODPAD, BD7_CODPRO CODPRO,BD7_ORIMOV ORIMOV, '' TPUNIM, "
CSQL += "BD7_CODRDA CODRDA, (BD7_VLRPAG-BD7_VLRTPF) VALORCUSTO, R_E_C_N_O_ NUMREG  FROM "+RETSQLNAME('BD7')+" WHERE "
CSQL += " BD7_FILIAL = '"+XFILIAL('BD7')+"'  "
CSQL += " AND BD7_NUMLOT >= '" + CANOINI  + CMESINI  + "0000' AND BD7_NUMLOT <= '" + CANOFIN  + CMESFIN+"9999' "
CSQL += " AND BD7_BLOPAG <> '1'  "
CSQL += "AND D_E_L_E_T_ = ' ' "

CSQL += " UNION "

CSQL += " SELECT 'BGQ' ALIAS, BGQ_CODOPE CODOPE,BGQ_CODEMP CODEMP,BGQ_MATRIC MATRIC, BGQ_CODLAN TIPREG, '' CODPAD, ' ' CODPRO, ' ' ORIMOV, BGQ_TPUNIM TPUNIM, "
IF CDATABASE <> "MSSQL"
	CSQL += " BGQ_CODIGO CODRDA, SUM(DECODE(BBB_TIPSER,1,-1*BGQ_VALOR,BGQ_VALOR)) VALORCUSTO, 0 NUMREG "
ELSE
	CSQL += " BGQ_CODIGO CODRDA, SUM(CASE BBB_TIPSER WHEN 1 THEN -1*BGQ_VALOR ELSE BGQ_VALOR END) VALORCUSTO, 0 NUMREG "
ENDIF
CSQL += " FROM "+RETSQLNAME('BGQ')+" BGQ, "+RETSQLNAME('BBB')+" BBB "
//CSQL += " WHERE BGQ.BGQ_CODLAN <> '050' "  ESPECIFICO CABERJ
CSQL += " WHERE BBB.BBB_FILIAL = '"+XFILIAL("BBB")+"' "
CSQL += " AND BBB.BBB_CODSER = BGQ.BGQ_CODLAN "
CSQL += " AND BGQ.BGQ_NUMLOT >= '" + CANOINI  + CMESINI  + "0000' AND BGQ.BGQ_NUMLOT <= '" + CANOFIN  + CMESFIN+"9999'  "
CSQL += " AND BGQ.BGQ_TPUNIM <> '"+SPACE(LEN(BGQ->BGQ_TPUNIM))+"' "
CSQL += " AND BGQ.D_E_L_E_T_ = ' ' "
CSQL += " AND BBB.D_E_L_E_T_ = ' ' "
IF EXISTBLOCK("PLQDFILBGQ")
	CSQL +=EXECBLOCK("PLQDFILBGQ",.F.,.F.) //BGQ.BGQ_CODLAN <> '050' "  ESPECIFICO CABERJ
ENDIF
CSQL += "GROUP BY BGQ_CODOPE,BGQ_CODEMP ,BGQ_MATRIC,BGQ_CODLAN, BGQ_CODIGO, BGQ_TPUNIM "

CSQL+= "UNION "

CSQL+= "SELECT 'OPM' ALIAS, BD6_CODOPE CODOPE,BD6_CODEMP CODEMP,BD6_MATRIC MATRIC,BD6_TIPREG TIPREG , BD6_CODPAD CODPAD, BD6_CODPRO CODPRO,'' ORIMOV, '' TPUNIM, "
CSQL+= "BD6_CODRDA CODRDA, SUM((D1_TOTAL -D1_VALDESC - BD6_VLRPF))  VALORCUSTO, 0 NUMREG "
CSQL+= "FROM "+RETSQLNAME('B19')+" B19, "+RETSQLNAME('SD1')+" SD1,"+RETSQLNAME('SF1')+" SF1, "+RETSQLNAME('BD6')+" BD6 "
CSQL+= "WHERE  "
CSQL+= "SF1.F1_EMISSAO BETWEEN '"+DTOS(DDATAINI)+"' AND '"+DTOS(DDATAFIM)+"' "
CSQL+= " AND SD1.D1_DOC = SF1.F1_DOC "
CSQL+= " AND B19.B19_DOC = SD1.D1_DOC "
CSQL+= " AND SD1.D1_ITEM = B19.B19_ITEM "
CSQL+= " AND BD6.BD6_FILIAL = '"+XFILIAL('BD6')+"' "
IF CDATABASE <> "MSSQL"
	CSQL+= " AND BD6_CODOPE = SUBSTR(B19_GUIA,01,04) "
	CSQL+= " AND BD6_CODLDP = SUBSTR(B19_GUIA,05,04) "
	CSQL+= " AND BD6_CODPEG = SUBSTR(B19_GUIA,09,08) "
	CSQL+= " AND BD6_NUMERO = SUBSTR(B19_GUIA,17,08) "
	CSQL+= " AND BD6_ORIMOV = SUBSTR(B19_GUIA,25,01) "
	CSQL+= " AND BD6_SEQUEN = SUBSTR(B19_GUIA,26,03) "
ELSE
	CSQL+= " AND BD6_CODOPE = SUBSTRING(B19_GUIA,01,04) "
	CSQL+= " AND BD6_CODLDP = SUBSTRING(B19_GUIA,05,04) "
	CSQL+= " AND BD6_CODPEG = SUBSTRING(B19_GUIA,09,08) "
	CSQL+= " AND BD6_NUMERO = SUBSTRING(B19_GUIA,17,08) "
	CSQL+= " AND BD6_ORIMOV = SUBSTRING(B19_GUIA,25,01) "
	CSQL+= " AND BD6_SEQUEN = SUBSTRING(B19_GUIA,26,03) "
ENDIF
CSQL+= " AND BD6_FASE IN (3,4) "
CSQL+= " AND B19.D_E_L_E_T_ = ' ' "
CSQL+= " AND SD1.D_E_L_E_T_ = ' ' "
CSQL+= " AND SF1.D_E_L_E_T_ = ' ' "
CSQL+= " AND BD6.D_E_L_E_T_ = ' ' "
CSQL+= " GROUP BY BD6_CODOPE,BD6_CODEMP,BD6_MATRIC,BD6_TIPREG,BD6_CODPAD, BD6_CODPRO,BD6_CODRDA  "

CSQL+= "UNION "


CSQL+= " SELECT 'REE' ALIAS, B44_OPEUSR CODOPE, B44_CODEMP CODEMP, B44_MATRIC MATRIC, B44_TIPREG TIPREG, B45_CODPAD CODPAD, B45_CODPRO CODPRO, ' ' ORIMOV, '' TPUNIM, "
CSQL+= " '' CODRDA, SUM(B45_VLRPAG) VALORCUSTO, 0 NUMREG "
CSQL+= " FROM "+RETSQLNAME('B44')+" B44," +RETSQLNAME('B45')+" B45, "+RETSQLNAME('SE1')+" SE1 "
CSQL+= " WHERE B45_FILIAL='"+XFILIAL('B45')+"'  "
CSQL+= " AND B44_FILIAL='"+XFILIAL('B44')+"' "
CSQL+= " AND E1_FILIAL='"+XFILIAL('SE1')+"' "

IF EXISTBLOCK("PLQDFILREE")
	CSQL +=EXECBLOCK("PLQDFILREE",.F.,.F.)    ////CSQL+= " AND E1_PREFIXO='RLE' "
ENDIF
CSQL+= " AND B44_CODLDP=B45_CODLDP "
CSQL+= " AND B44_CODPEG=B45_CODPEG "
CSQL+= " AND B44_NUMAUT=B45_NUMAUT "
CSQL+= " AND B44_PREFIX =E1_PREFIXO "
CSQL+= " AND B44_NUM=E1_NUM "
CSQL+= " AND B44.D_E_L_E_T_ = ' ' "
CSQL+= " AND B45.D_E_L_E_T_=' ' "
CSQL+= " AND SE1.D_E_L_E_T_=' '  "
CSQL+="  AND E1_EMISSAO BETWEEN '"+DTOS(DDATAINI)+"' AND '"+DTOS(DDATAFIM)+"' "
CSQL+= " GROUP BY  B44_OPEUSR, B44_CODEMP,B44_MATRIC, B44_TIPREG, B45_CODPAD, B45_CODPRO "

CSQL+= " ORDER BY ALIAS "


CSQL := CHANGEQUERY(CSQL)

DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQL),"PLQDOAUX",.T.,.F.)
TCSETFIELD("PLQDOAUX", 'VALORCUSTO', 'N', 18, 2)

IF PLQDOAUX->(!EOF())
	IF MV_PAR15 == 1
		// CRIAR ARQUIVO TEXTO VAZIO A PARTIR DO ROOT PATH NO SERVIDOR
		NHANDLE := FCREATE(CDIR+"\TRBGUIAS.TXT")
		IF NHANDLE = -1
			FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - FERROR " + STR(FERROR()) , 0, 0, {})
		ENDIF
		NHANDLE1 := FCREATE(CDIR+"\TRBRREMB.TXT")
		IF NHANDLE1 = -1
			FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - FERROR " + STR(FERROR()) , 0, 0, {})
		ENDIF
		NHANDLE2 := FCREATE(CDIR+"\TRBOPME.TXT")
		IF NHANDLE2 = -1
			FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - FERROR " + STR(FERROR()) , 0, 0, {})
		ENDIF
		NHANDLE3 := FCREATE(CDIR+"\TRBBGQ.TXT")
		IF NHANDLE3 = -1
			FWLOGMSG('WARN',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO AO CRIAR ARQUIVO - FERROR " + STR(FERROR()) , 0, 0, {})
		ENDIF
		
	ENDIF
ENDIF


WHILE PLQDOAUX->(!EOF())
	
	BA1->(DBSETORDER(2))
	IF BA1->(DBSEEK(XFILIAL("BA1")+ PLQDOAUX->(CODOPE+CODEMP+MATRIC+TIPREG))) //BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_MATRIC + BA1_TIPREG + BA1_DIGITO
		
		BA3->(DBSEEK(XFILIAL("BA3")+ PLQDOAUX->(CODOPE+CODEMP+MATRIC))) //BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_MATRIC + BA1_TIPREG + BA1_DIGITO
		
		//POSICIONAR PRODUTO - BUSCAR BI3
		IF EMPTY(BA1->BA1_CODPLA)
			CPLANO	:= BA3->BA3_CODPLA+BA3->BA3_VERSAO
			CCODPLA := BA3->BA3_CODPLA
			COPEORI := BA3->BA3_CODINT
		ELSE
			CPLANO	:= BA1->BA1_CODPLA+BA1->BA1_VERSAO
			CCODPLA := BA1->BA1_CODPLA
			COPEORI := BA1->BA1_OPEORI
		ENDIF
	ELSE
		CPLANO	:= ""
		CCODPLA := ""
	ENDIF
	
	IF SELECT('TRBBI3') > 0
		TRBBI3->(DBCLOSEAREA())
	ENDIF
	CSQLTMP	:= "SELECT BI3_MODPAG, BI3_APOSRG, BI3_TIPCON, BI3_TIPO, BI3_CODSEG, BI3_TPBEN FROM "
	CSQLTMP += RETSQLNAME('BI3')+" WHERE BI3_FILIAL = '"
	CSQLTMP	+= XFILIAL('BI3')+"' AND BI3_CODINT = '"+PLSINTPAD()+"' AND "
	CSQLTMP	+= "BI3_CODIGO = '"+CCODPLA+"' AND BI3_VERSAO = '"+SUBS(CPLANO, LEN(CCODPLA)+1 )
	CSQLTMP	+= "' AND D_E_L_E_T_ = ' ' "
	CSQLTMP	:= CHANGEQUERY(CSQLTMP)
	
	DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQLTMP),"TRBBI3",.T.,.F.)
	
	IF TRBBI3->(!EOF())
		
		CBI3APOSRG := TRBBI3->BI3_APOSRG
		CBI3TIPCON := TRBBI3->BI3_TIPCON
		CBI3TIPO   := TRBBI3->BI3_TIPO
		CBI3CODSEG := TRBBI3->BI3_CODSEG
		CBI3MODPAG := TRBBI3->BI3_MODPAG
	ENDIF
	
	TRBBI3->(DBCLOSEAREA())
	
	CMODPAG	:= IIF( ALLTRIM(CBI3MODPAG) $'1', '1', '2' )   // 1- PREÇO PRE ESTABELECIDO / 2- PREÇO POS ESTABELECIDO
	
	
	//TIPO DE PLANO:
	//INDIVIDUAL/FAMILIAR;
	//COLETIVO POR ADESÃO;
	//COLETIVO EMPRESARIAL.
	
	IF CBI3TIPO == "1"	//BI3_TIPO => 1=PESSOA FISICA;2=PESSOA JURIDICA;3=AMBAS
		CTPPLAN := "IND"	// 1 - INDIVIDUAL / FAMILIAR
	ELSE
		CTPPLAN	:= IIF(CBI3TIPCON=='2',"COL","EMP")		// 1=INDIVIDUAL/FAMILIAR;2=COLETIVO EMPRESARIAL;3=COLETIVO ADESAO
	ENDIF
	
	//ANTES DA LEI (NÃO REGULAMENTADO);
	//APÓS LEI (REGULAMENTADO)
	CLEI	:= IIF( CBI3APOSRG == '1', 'PLEI', 'ALEI' )
	
	//CLASSIFICAÇÃO DO PROCEDIMENTO:
	//CONSULTA MÉDICA;
	//EXAMES;
	//TERAPIAS;
	//INTERNAÇÕES;
	//OUTROS ATENDIMENTOS;
	//DEMAIS DESPESAS.
	//
	
	CCLAS := IIF(PLQDOAUX->ALIAS =='BGQ',PLQDOAUX->TPUNIM, IIF(!EMPTY(PLQDOAUX->CODPRO),PLTPSERV(,PLQDOAUX->CODPAD,PLQDOAUX->CODPRO),""))
	
	IF CCLAS $ "01" // CONSULTA
		NCATEGORIA := 1
	ELSEIF CCLAS $ "02/03"//EXAMES
		NCATEGORIA := 2
	ELSEIF CCLAS $ "04/05"  //TERAPIAS
		NCATEGORIA := 3
	ELSEIF CCLAS $ "06/07/08/09/10/11" .OR. PLQDOAUX->ALIAS ='OPM' //INTERNAÇÕES
		NCATEGORIA := 4
	ELSEIF CCLAS ="12"
		NCATEGORIA := 5
	ELSE
		NCATEGORIA := 6
	ENDIF
	
	IF PLQDOAUX->ALIAS =='GUI'
		BD7->(DBGOTO(PLQDOAUX->NUMREG))

		IF BD7->BD7_TIPGUI <>'03'
			IF BD5->(DBSEEK(XFILIAL("BD5")+BD7->BD7_CODOPE+BD7->BD7_CODLDP+BD7->BD7_CODPEG+BD7->BD7_NUMERO )) .AND. !EMPTY(BD5->BD5_GUIINT)
				NCATEGORIA := 4
			ENDIF
		ENDIF
		
	ENDIF
	
	//TIPO DE REDE :
	//REDE PRÓPRIA
	//REDE CONTRATADA
	//REEMBOLSO
	//INTERCÂMBIO EVENTUAL
	
	//REDE DE ATENDIMENTO  -   BUSCAR DO BAU
	IF SELECT('TRBBAU') > 0
		TRBBAU->(DBCLOSEAREA())
	ENDIF
	
	CSQLTMP := "SELECT BAU_EST, BAU_TIPPRE, BAU_COPCRE, BAU_RECPRO FROM "
	CSQLTMP += RETSQLNAME('BAU')+" WHERE BAU_FILIAL = '"
	CSQLTMP	+= XFILIAL('BAU')+"' AND BAU_CODIGO = '"+ PLQDOAUX->CODRDA
	CSQLTMP	+= "' AND D_E_L_E_T_ = ' ' "
	
	DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQLTMP)),"TRBBAU",.T.,.F.)
	
	CBAUEST		:= TRBBAU->BAU_EST
	CBAUTIPPRE	:= TRBBAU->BAU_TIPPRE
	CBAUCOPCRE	:= TRBBAU->BAU_COPCRE
	CBAURECPRO	:= TRBBAU->BAU_RECPRO
	
	TRBBAU->(DBCLOSEAREA())
			
	DO CASE
		
	CASE PLQDOAUX->ALIAS ='REE'
		NTPREDE:= 3 // REEMBOLSO
		
	CASE CBAUCOPCRE $ '1/3'  .OR. ( CBAUCOPCRE $ '2' .AND. CBAURECPRO $ '1' )
		NTPREDE:= 1        // REDE PRÓPRIA
		
	CASE CBAUCOPCRE == '2'
		NTPREDE:= 2  //REDE CONVENIADA
		
		// NAO COOPERADOS - TODAS AS CLASSES...
		
	CASE CBAUTIPPRE $ CCTPL14
		NTPREDE:= 4 // INTERCAMBIO
		// OUTRAS OPCOES
	OTHERWISE
		NTPREDE	:= 0
		
	ENDCASE
	
	IF CMODPAG == "1"   //PRE PAGAMENTO
		
		BEXEC := &("{|| _B"+ALLTRIM(CTPPLAN)+ALLTRIM(CLEI)+"[NTPREDE][NCATEGORIA] += PLQDOAUX->VALORCUSTO }")
		EVAL(BEXEC)
	ELSE
		BEXEC := &("{|| _A"+ALLTRIM(CTPPLAN)+ALLTRIM(CLEI)+"[NTPREDE][NCATEGORIA] += PLQDOAUX->VALORCUSTO }")
		EVAL(BEXEC)
	ENDIF
	
	IF MV_PAR15 == 1 .AND. NHANDLE > 0 .AND. PLQDOAUX->ALIAS=="GUI"
		CSTR := STR(PLQDOAUX->NUMREG,20,0)+';'+PLQDOAUX->ALIAS+';'+BD7->(BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV)+";"+BD7->BD7_SEQUEN+";"+BD7->BD7_CODPAD+";"
		CSTR += BD7->BD7_CODPRO+";"+BD7->BD7_CODUNM+";"+STR(PLQDOAUX->VALORCUSTO,20,2)
		FWRITE(NHANDLE, CSTR + CRLF)
	ENDIF
	
	IF MV_PAR15 == 1 .AND. NHANDLE1 > 0 .AND. PLQDOAUX->ALIAS=="REE"
		CSTR:= STR(PLQDOAUX->NUMREG,20,0)+";"+ PLQDOAUX->ALIAS+";"+PLQDOAUX->CODOPE+";"+PLQDOAUX->CODEMP+";"+PLQDOAUX->MATRIC+";"+PLQDOAUX->TIPREG+";"
		CSTR+= PLQDOAUX->CODPAD+";"+PLQDOAUX->CODPRO+";"+STR(PLQDOAUX->VALORCUSTO,20,2)
		FWRITE(NHANDLE1, CSTR + CRLF)
	ENDIF
	
	IF MV_PAR15 == 1 .AND. NHANDLE2 > 0 .AND. PLQDOAUX->ALIAS=="OPM"
		CSTR:= STR(PLQDOAUX->NUMREG,20,0)+";"+PLQDOAUX->ALIAS+";"+ PLQDOAUX->CODOPE+";"+PLQDOAUX->CODEMP+";"+PLQDOAUX->MATRIC+";"
		CSTR+= PLQDOAUX->TIPREG+";"+PLQDOAUX->CODPAD+";"+PLQDOAUX->CODPRO+";"+PLQDOAUX->CODRDA+";"+STR(PLQDOAUX->VALORCUSTO,20,2)
		FWRITE(NHANDLE2, CSTR + CRLF)
	ENDIF
	
	IF MV_PAR15 == 1 .AND. NHANDLE3 > 0 .AND. PLQDOAUX->ALIAS=="BGQ"
		CSTR :=STR(PLQDOAUX->NUMREG,20,0)+';'+PLQDOAUX->ALIAS+';'+PLQDOAUX->CODOPE+";"+PLQDOAUX->CODEMP+";"+PLQDOAUX->MATRIC+";"
		CSTR+=  PLQDOAUX->TIPREG+";"+PLQDOAUX->TPUNIM+";"+PLQDOAUX->CODRDA+";"+STR(PLQDOAUX->VALORCUSTO,20,2)
		FWRITE(NHANDLE3, CSTR + CRLF)
	ENDIF
	
	PLQDOAUX->(DBSKIP())
ENDDO
PLQDOAUX->(DBCLOSEAREA())

IF MV_PAR15 == 1 .AND. NHANDLE > 0
	FCLOSE(NHANDLE)
ENDIF

IF MV_PAR15 == 1 .AND. NHANDLE1 > 0
	FCLOSE(NHANDLE1)
ENDIF
IF MV_PAR15 == 1 .AND. NHANDLE2 > 0
	FCLOSE(NHANDLE2)
ENDIF

IF MV_PAR15 == 1 .AND. NHANDLE3 > 0
	FCLOSE(NHANDLE3)
ENDIF

ARET:={_BINDALEI, _AINDALEI,_BINDPLEI,_AINDPLEI,_BCOLALEI,_ACOLALEI,_BCOLPLEI,_ACOLPLEI,_BEMPALEI,_AEMPALEI,_BEMPPLEI,_AEMPPLEI}
//BGQ

// PONTO DE ENTRADA PARA MANIPULAR DADOS  DO QUADRO AUXILIAR DE EVENTOS- DIOPS
IF EXISTBLOCK("PLSQDROEVE")
	ARETITENS := ACLONE(ARET)
	ARET := EXECBLOCK("PLSQDROEVE", .F., .F., {ARET})
	IF LEN(ARET) > 0 .AND. VALTYPE(ARET) = "A"
		ARET := ACLONE(ARETITENS)
	ENDIF
ENDIF
RETURN(ARET)

/*/{PROTHEUS.DOC} PLSAMSKTB
MONTA MASCARA VIRTUALMENTE. UTILIZADO NO CAMPO BR8_CODPRO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLSAMSKTB(CTIPO,CCODTABPRO,CORI)
LOCAL CMASCARA	:= "@R "
LOCAL CRET		:= ''
LOCAL NRECBF8	:= BF8->(RECNO())

DEFAULT CCODTABPRO	:= IF(CTIPO=="B",BR8->BR8_CODPAD,BR8->BR8_CODPSA)
DEFAULT CORI		:= "G"

BF8->(DBCLEARFILTER())
BF8->(DBSETORDER(1))

IF ! BF8->(MSSEEK(XFILIAL("BF8")+CCODTABPRO))
	IF CORI == "G"
		CRET := "@!"+"%C"
	ELSE
		CRET := "@!"
	ENDIF
	RETURN(CRET)
ENDIF

WHILE ! BF8->(EOF()) .AND. BF8->(BF8_FILIAL+BF8_CODINT+BF8_CODIGO) == XFILIAL("BF8")+CCODTABPRO
	CMASCARA += REPLICATE("!",VAL(BF8->BF8_DIGITO))+BF8->BF8_SEPARA
	BF8->(DBSKIP())
ENDDO

BF8->(DBGOTO(NRECBF8))

IF CORI == "G"
	CRET := CMASCARA+"%C"
ELSE
	CRET := CMASCARA
ENDIF

RETURN(CRET)

/*/{PROTHEUS.DOC} PLBA8VLDP
VALIDA O CODIGO DO PROCEDIMENTO DA TDE.
(EXECUTADA NO VALIDO DO CAMPO BA8_CODPRO)

@AUTHOR TOTVS
@SINCE 11/02/14
@VERSION 1.0
/*/

FUNCTION PLBA8VLDP()
LOCAL LRET 	:= .T.
LOCAL CCHAR	:= ""
LOCAL NIND	:= 0
LOCAL _NTAMCOD := PLSRETCT()
LOCAL _NTAMSDG := LEN(ALLTRIM(M->BA8_CODPRO))
LOCAL _NTAMFIELD := TAMSX3("BA8_CODPRO")[1]
LOCAL CTMP := ""

//*******
//_NTAMCOD VARIAVEL PRIVATE DEFINIDA NO PLSABA8V
//*******
// VERIFICO SE TODOS OS CARACTERES SAO NUMEROS
// APENAS CASO O TIPO DE TABELA TENHA DIGITO VERIFICADOR

IF  LTEMDIG
	FOR NIND := 1 TO LEN(RTRIM(M->BA8_CODPRO))
		CCHAR := SUBSTR(M->BA8_CODPRO,NIND,1)
		IF ISALPHA(CCHAR)
			HELP(" ", 1, "ONLYNUM")
			RETURN(.F.)
		ENDIF
	NEXT
	
	IF _NTAMSDG <> _NTAMCOD
		
		//VALIDA SE CODIGO DIGITADO + DIGITO ATINGE O TAMANHO PRE-DETERMINADO.
		IF _NTAMSDG+1 <> _NTAMCOD
		
			IF ALLTRIM(FUNNAME()) == "PLSA140"
				MSGALERT("TAMANHO DO CODIGO MAIOR OU MENOR QUE O PARAMETRIZADO NA ESTRUTURA")//"TAMANHO DO CODIGO MAIOR OU MENOR QUE O PARAMETRIZADO NA ESTRUTURA"
			ENDIF
			
			RETURN(.F.)
			
		ELSE
			
			IF ALLTRIM(FUNNAME()) == "PLSA140"
				CTMP := (SUBSTR(ALLTRIM(M->BA8_CODPRO),1,_NTAMCOD) + MODULO11(M->BA8_CODPRO))
				M->BA8_CODPRO := CTMP+SPACE(_NTAMFIELD-LEN(CTMP))
			ELSE

				//ROTINAS EM MVC NAO SUPORTAM ATRIBUICAO DIRETA. MODIFICAR DIRETAMENTE O MODEL.
				OMODEL := FWMODELACTIVE()
				OMODEL:SETVALUE( 'PLSABA8MMD', 'BA8_CODPRO', (SUBSTR(ALLTRIM(M->BA8_CODPRO),1,_NTAMCOD) + MODULO11(M->BA8_CODPRO)))
				
			ENDIF
			
		ENDIF
	ELSE
		IF SUBSTR(ALLTRIM(M->BA8_CODPRO),_NTAMSDG,1) <> ALLTRIM(MODULO11(SUBSTR(ALLTRIM(M->BA8_CODPRO),1,_NTAMCOD-1)))
			IF ALLTRIM(FUNNAME())=="PLSA140"
				MSGALERT("DIGITO VERIFICADOR INFORMADO INVÁLIDO")//"DIGITO VERIFICADOR INFORMADO INVÁLIDO"
			ENDIF
			RETURN(.F.)
		ELSE
			IF ALLTRIM(FUNNAME())<>"PLSA140"
				//ROTINAS EM MVC NAO SUPORTAM ATRIBUICAO DIRETA. MODIFICAR DIRETAMENTE O MODEL.
				OMODEL := FWMODELACTIVE()
				OMODEL:SETVALUE( 'PLSABA8MMD', 'BA8_CODPRO', ALLTRIM(M->BA8_CODPRO))
			ENDIF
		ENDIF
	ENDIF
	
ELSE
	IF _NTAMSDG <> _NTAMCOD
		IF ALLTRIM(FUNNAME())=="PLSA140"
			MSGALERT("TAMANHO DO CODIGO MAIOR OU MENOR QUE O PARAMETRIZADO NA ESTRUTURA")//"TAMANHO DO CODIGO MAIOR OU MENOR QUE O PARAMETRIZADO NA ESTRUTURA"
		ENDIF
		RETURN(.F.)
	ENDIF
ENDIF

RETURN(LRET)

/*/{PROTHEUS.DOC} PLBA8VLDVI
VERIFICA SE A VIGENCIA INFORMADA E INFERIOR A DATA FINAL DE,
UMA VIGENCIA JA INFORMADA.
(EXECUTADA NO VALIDO DO CAMPO BD4_VIGINI E BD4_VIGFIM)

@AUTHOR TOTVS
@SINCE 11/02/14
@VERSION 1.0
/*/

FUNCTION PLBA8VLDVI(DDATA,CUNIDADE,COPE)
LOCAL LRET		:= .T.
LOCAL AAREA 		:= BD4->(GETAREA())
LOCAL NRECBD4		:= IIF(INCLUI,0,BD4->(RECNO()))

DEFAULT DDATA   	:= ""
DEFAULT CUNIDADE	:= ""
DEFAULT COPE    := ""

IF EMPTY(CUNIDADE)
	PLSHELP(STR0076)//"INFORME A UNIDADE DE MEDIDA"
	LRET := .F.
ENDIF

IF LRET .AND. COPE == "I" .AND. !EMPTY(DDATA) .AND. !EMPTY(M->BD4_VIGFIM) .AND. DDATA > M->BD4_VIGFIM
	PLSHELP(STR0077)//"A DATA DA VIGÊNCIA INÍCIO INFORMADA É SUPERIOR A DATA DA VIGÊNCIA FIM"
	LRET := .F.
ELSEIF LRET .AND. COPE == "F" .AND. !EMPTY(M->BD4_VIGINI) .AND. !EMPTY(DDATA) .AND. DDATA < M->BD4_VIGINI
	PLSHELP(STR0078)//"A DATA DA VIGÊNCIA FIM INFORMADA É INFERIOR A DATA DA VIGÊNCIA INÍCIO"
	LRET := .F.
ENDIF

IF LRET
	BD4->(DBSETORDER(1))//BD4_FILIAL+BD4_CODTAB+BD4_CDPADP+BD4_CODPRO+BD4_CODIGO+DTOS(BD4_VIGINI)
	IF BD4->(MSSEEK(XFILIAL('BD4')+BA8->(BA8_CODTAB+BA8_CDPADP+BA8_CODPRO)+M->BD4_CODIGO))
		
		WHILE !BD4->(EOF()) .AND. XFILIAL('BD4')+BA8->(BA8_CODTAB+BA8_CDPADP+BA8_CODPRO)+M->BD4_CODIGO == BD4->(BD4_FILIAL+BD4_CODTAB+BD4_CDPADP+BD4_CODPRO+BD4_CODIGO)
			
			IF BD4->(RECNO()) <> NRECBD4
				IF PLSINTVAL("BD4","BD4_VIGINI","BD4_VIGFIM",DDATA,M->BD4_VIGINI,M->BD4_VIGFIM)
					PLSHELP(STR0079)//"A DATA INFORMADA ESTÁ ENTRE UM INTERVALO DE VIGÊNCIAS JÁ UTILIZADO"
					LRET := .F.
					EXIT
				ENDIF
			ENDIF
			
			BD4->(DBSKIP())
		ENDDO
	ENDIF
	
ENDIF

BD4->(RESTAREA(AAREA))

RETURN(LRET)

/*/{PROTHEUS.DOC} PLSHELP
EXIBE MENSAGEM COMO HELP

@AUTHOR TOTVS
@SINCE 11/02/14
@VERSION 1.0
/*/
FUNCTION PLSHELP(CMSG)
	
HELP(,,'HELP',,CMSG,1,0)
	
RETURN

/*/{PROTHEUS.DOC} PLBF8VLC
VALIDACAO DO CAMPO BF8_CODIGO

@AUTHOR TOTVS
@SINCE 11/02/14
@VERSION 1.0
/*/
FUNCTION PLBF8VLC(CCODINT)
LOCAL NRET    := 0
LOCAL NORDBF8 := BF8->(INDEXORD())

BF8->(DBSETORDER(1))

BF8->(DBSEEK(XFILIAL("BF8")+CCODINT+REPLICATE("9",LEN(BF8->BF8_CODIGO)),.T.))
BF8->(DBSKIP(-1))

IF BF8->(BF8_FILIAL+BF8_CODINT) <> XFILIAL("BF8")+CCODINT
	NRET := STRZERO(1,3)
ELSE
	NRET := STRZERO(VAL(BF8->BF8_CODIGO)+1,3)
ENDIF

BF8->(DBSETORDER(NORDBF8))

RETURN(NRET)

/*/{PROTHEUS.DOC} PLGETUNIC
RETORNA O X2_UNICO OU PRIMEIRO INDICE DA TABELA

@AUTHOR TOTVS
@SINCE 11/02/14
@VERSION 1.0
/*/

FUNCTION PLGETUNIC(CTABLE)
LOCAL CUNICO := ''
LOCAL CCHAVE	:= ''
LOCAL NIDX	:= 1
LOCAL CALIAS := CTABLE

DBSELECTAREA(CTABLE)

SX2->(DBSETORDER(1))
IF SX2->(MSSEEK(CTABLE))
	CUNICO := ALLTRIM(STRTRAN(FWX2UNICO(CTABLE),' ',''))
ENDIF

SIX->(DBSETORDER(1))

IF SIX->(MSSEEK(CTABLE))
	NIDX 	:= VAL(SIX->ORDEM)
	CCHAVE 	:= ALLTRIM(STRTRAN(SIX->CHAVE,' ',''))
	
	WHILE !SIX->(EOF()) .AND. SIX->INDICE == CTABLE
		
		//VERIRICA SE EXISTE ALGUM INDICE IGUAL A CHAVE UNICA DA TABELA E UTILIZA ELE.
		IF CUNICO == CCHAVE .OR. EMPTY(CUNICO)
			NIDX := VAL(SIX->ORDEM)
			CCHAVE := ALLTRIM(STRTRAN(SIX->CHAVE,' ',''))
			EXIT
		ENDIF
		
	SIX->(DBSKIP())
	ENDDO

ENDIF
	
RETURN( {NIDX,CCHAVE} )

/*/{PROTHEUS.DOC} PLSRETNP
RETORNA O NIVEL DO PROCEDIMENTO BR4

@AUTHOR ALEXANDER SANTOS
@SINCE 11/02/14
@VERSION 1.0
/*/

FUNCTION PLSRETNP(CCODPRO,LTIPO)
LOCAL NTAM 	:= 1
LOCAL NREG := BR4->(RECNO())
LOCAL NORD := BR4->(INDEXORD())
LOCAL CRET := ''
LOCAL ANIVEL := {}
DEFAULT LTIPO := .F.

BR4->(DBSETORDER(1))
IF BR4->(MSSEEK(XFILIAL("BR4")+BF8->BF8_CODPAD))
	
	WHILE !BR4->(EOF()) .AND. BR4->(BR4_FILIAL+BR4_CODPAD) == XFILIAL("BR4")+BF8->BF8_CODPAD
		
		IF BR4->BR4_DIGVER $ "0, "
			AADD(ANIVEL,{BR4->BR4_CODNIV,SUBSTR(CCODPRO,NTAM,VAL(BR4->BR4_DIGITO))})
		ENDIF
		
		NTAM += VAL(BR4->BR4_DIGITO)
		
		BR4->(DBSKIP())
	ENDDO
	FOR NTAM:=1 TO LEN(ANIVEL)
		IF VAL(ANIVEL[NTAM,2])>0
			CRET := ANIVEL[NTAM,1]
			
			//VERIFICANDO SE E 1=ANALITICO;2=SINTETICO
			IF LTIPO
				CRET := '2'
				IF LEN(ANIVEL) == NTAM
					CRET := '1'
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF EMPTY(CRET)
		CRET := '1'
	ENDIF
ENDIF

BR4->(DBGOTO(NREG))
BR4->(DBSETORDER(NORD))
RETURN(CRET)

/*/{PROTHEUS.DOC} PLSRETCT
RETORNA TAMANHO DO CODIGO TDE.

@AUTHOR ALEXANDER SANTOS
@SINCE 11/02/14
@VERSION 1.0
/*/

FUNCTION PLSRETCT()
LOCAL NTAM := 0
LOCAL NREG := BR4->(RECNO())
LOCAL NORD := BR4->(INDEXORD())

BR4->(DBSETORDER(1))
IF BR4->(MSSEEK(XFILIAL("BR4")+BF8->BF8_CODPAD))
	
	WHILE !BR4->(EOF()) .AND. BR4->(BR4_FILIAL+BR4_CODPAD) == XFILIAL("BR4")+BF8->BF8_CODPAD
		
		NTAM += VAL(BR4->BR4_DIGITO)
		LTEMDIG := BR4->BR4_DIGVER = "1"
		
		BR4->(DBSKIP())
	ENDDO
ENDIF

BR4->(DBGOTO(NREG))
BR4->(DBSETORDER(NORD))
RETURN(NTAM)

/*/{PROTHEUS.DOC} PLGRVDIAG
FUNCAO GENERICA PARA MONTAGEM DE TELA COM GRID. RECEBE UM ALIAS E CAMPO PARA GRAVAÇAO DE UMA
TABELA QUALQUER ATRAVES DE UMA DIALOG DE TAMANHO MENOR DA TELA GENERICA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 15/02/2009
@VERSION 1.0
/*/
FUNCTION PLGRVDIAG(CALIUSO,CTITULO,CFILTRO, CCPOID, XDADOID, NIND, CCMPSIND, ACAMPOS, NOPCGD, CFUNPOSOK, NALTDIAG, NLARGDIAG, ABUTAR, LCPOSEQUEN, LB7D, CFUNDEL, CCPOEXB, LONLYSHOW,CORDER)
LOCAL AAREA 	:= GETAREA()
LOCAL NX 		:= 0
LOCAL NPOS 		:= 0
LOCAL AHEAD 	:= {}, NI := 0, NU := 0

LOCAL AINDAUX	:= {}
LOCAL AINDUSO	:=	{} // AQUI IRÃO OS CAMPOS DO INDICE + A EXPRESSAO MACRO PARA PEGAR O DADO NO GRID
LOCAL CVARIND	:= "" //CONTEUDO DO INDICE APOS A EXECUCAO DA MACRO
LOCAL LACHOU	:= .F.
LOCAL NI		:= 0
LOCAL ACPO 		:= {}

PRIVATE OGDPRI		:= NIL
PRIVATE ACOLSGEN	:= {}
PRIVATE NCGEN 		:= 0
PRIVATE NOPCA 		:= 0
DEFAULT NALTDIAG	:= 540 // ALTURA DA DIALOG
DEFAULT NLARGDIAG 	:= 700 // LARGURA DA DIALOG
DEFAULT CCPOID 		:= "" //CAMPO PRINCIPAL DE IDENTIFICAÇAO DOS REGISTROS EDITADOS (NORMALMENTE O MESMO DO FILTRO)
DEFAULT CFILTRO 	:= "" // FILTRO PASSADO PARA A TABELA
DEFAULT NOPCGD		:= GD_INSERT + GD_UPDATE + GD_DELETE // PERMISSOES NO GRID
DEFAULT CFUNPOSOK	:= "" // FUNÇAO PARA EXECUÇAO AO CLICAR EM OK E ANTES DE GRAVAR
DEFAULT ABUTAR		:= {} // BOTOES NO AÇOES RELACIONADAS
DEFAULT ACAMPOS		:= {} // CAMPOS QUE SERAO EXIBIDOS
DEFAULT LCPOSEQUEN	:= .T. // SE HOUVER CAMPO SEQUENCIAL CONFIRMA A UTILIZAÇAO DO SEQUENCIAL
DEFAULT LB7D		:= .F. // SE A ROTINA FOR CHAMADA UTILIZANDO A B7D UMA TELA PARA INCLUSÃO DE OBSERVAÇÃO SERA VISUALIZADA.
DEFAULT CFUNDEL		:= "" // BLOCO DE CODIGO EXECUTADO NA DELECAO DO GRID
DEFAULT CCPOEXB		:= "ALL" // CAMPOS QUE SERAO EXIBIDOS NO GRID
DEFAULT LONLYSHOW	:= .F. // CAMPOS QUE SERAO EXIBIDOS NO GRID
DEFAULT CORDER  	:= "" //ORDENAÇÃO PELOS CAMPOS
DEFAULT CCMPSIND  	:= "" //ORDENAÇÃO PELOS CAMPOS

AINDAUX := STRTOARRAY( CCMPSIND , '+' ) // PEGA O INDICE E SEPARA OS CAMPOS

SX2->(DBSETORDER(1))
SX2->(MSSEEK(CALIUSO))
DEFAULT CTITULO := "MANUTENÇÃO " + ALLTRIM(SX2->X2_DESCRI)

IF LONLYSHOW
	NOPCGD := 0
	INCLUI := .F.
ENDIF

HS_BDADOS(CALIUSO, @AHEAD, @ACOLSGEN,@NU, 1,, CFILTRO,,,CCPOEXB,,,,,,.T.,/*ALEG*/,,,,, /*ACPO*/, /*AJOIN*/,,CORDER)

NCODID := ASCAN(AHEAD,{|X|ALLTRIM(X[2])==CCPOID})

FOR NX := 1 TO LEN(AINDAUX)
	IF 	"_FILIAL" $ ALLTRIM(AINDAUX[NX])
		LOOP
	ELSEIF 	ALLTRIM(AINDAUX[NX]) == ALLTRIM(CCPOID) // SE FOR O CAMPO PASSADO DENTRO DO INDICE JOGA A VARIAVEL DO DADO PRA SER EXECUTADA MACRO
		AADD(AINDUSO, { AINDAUX[NX] , "XDADOID" } )
	ELSE // CASO CONTRARIO JOGO A MACRO DA POSIÇÃO NO ACOLS ENCONTRADA
		NPOS := ASCAN(AHEAD,{|X| ALLTRIM(X[2])==AINDAUX[NX]})
		IF NPOS == 0
			EXIT
		ENDIF
		AADD(AINDUSO, { AINDAUX[NX] , "ACOLSGEN[NCGEN," + ALLTRIM(STR(NPOS)) + "]" } )
	ENDIF
	
NEXT NX

DEFINE MSDIALOG ODLGGEN TITLE CTITULO FROM 000, 000 TO 480, 650 OF OMAINWND PIXEL   //000 000 400 600

OGDPRI := MSNEWGETDADOS():NEW(030, 005, 230, 320,NOPCGD,,,,,,,,,, ODLGGEN, AHEAD, ACOLSGEN)    // 000 000 300 500

//SE EXCLUIR UMA RECEITA, EXECUTA A ROTINA EXIMOTEXC.
IF !EMPTY(CFUNDEL)
	OGDPRI:BDELOK := {|| &(CFUNDEL) }//{|| EXIMOTEXC(OGDPRI) }
ENDIF

ACTIVATE MSDIALOG ODLGGEN CENTERED ON INIT ENCHOICEBAR(ODLGGEN,{ || NOPCA := 1, ODLGGEN:END() },{|| NOPCA := 0, ODLGGEN:END()})

IF NOPCA == 1 .AND. !LONLYSHOW
	
	IF !EMPTY(CFUNPOSOK)
		&(CFUNPOSOK)
	ENDIF
	
	DBSELECTAREA(CALIUSO)
	&(CALIUSO)->(DBSETORDER(NIND))
	
	IF !EMPTY(OGDPRI:ACOLS)
		ACOLSGEN := ACLONE(OGDPRI:ACOLS)
		
		FOR NI := 1 TO LEN(ACOLSGEN)
			CVARIND := ""
			NCGEN := NI
			FOR NX := 1 TO LEN(AINDUSO)
				CVARIND += &(AINDUSO[NX,2])
			NEXT NX
			LACHOU := IIF( !EMPTY( CVARIND ),   &(CALIUSO)->(MSSEEK(XFILIAL(CALIUSO) + CVARIND)),.F.)
			IF ACOLSGEN[NI][LEN(OGDPRI:AHEADER) + 1]  .AND. LACHOU // ITEM DELETADO NA GRID
				RECLOCK(CALIUSO, !LACHOU)
				DBDELETE()
				MSUNLOCK()
			ELSE
				RECLOCK(CALIUSO, !LACHOU)
				HS_GRVCPO(CALIUSO, ACOLSGEN, AHEAD, NI)
				&(CALIUSO + "_FILIAL") 	:= XFILIAL(CALIUSO)
				IF !EMPTY(CCPOID) .AND. !EMPTY(XDADOID)
					&(CCPOID) 	:= XDADOID
				ENDIF
				MSUNLOCK()
			ENDIF
		NEXT NI
	ENDIF
	IF LCPOSEQUEN
		WHILE __LSX8
			CONFIRMSX8()
		END
	ENDIF
ELSE
	IF LCPOSEQUEN
		WHILE __LSX8
			ROLLBACKSXE()
		END
	ENDIF
ENDIF

RESTAREA(AAREA)

RETURN

/*/{PROTHEUS.DOC} PLSIDADE
RETORNA A IDADE CONTANDO OS DIAS
@TYPE FUNCTION
@AUTHOR ROGERIO TABOSA
@SINCE 15/02/2009
@VERSION 1.0
/*/
FUNCTION PLSIDADE(DDATAI, DDATAF,LSTRFULL)
LOCAL AIDADE 		:= HS_DIFDATA(DDATAI, DDATAF)
DEFAULT LSTRFULL	:= .F. // DEFINE SE O RETORNO SERA STRING COMPLETA OU APENAS QUANTOS ANOS EM NUMERICO

IF LSTRFULL
	RETURN(STRZERO(AIDADE[1], 2) + " ANO(S) " + STRZERO(AIDADE[2], 2) + " MES(ES) " + STRZERO(AIDADE[3], 2) + " DIA(S) ") //" ANO(S) "###" MES(ES) "###" DIA(S) "
ELSE
	RETURN(AIDADE[1])
ENDIF

RETURN()

/*/{PROTHEUS.DOC} VALMOTPAD
CARREGAR DESCRIÇÃO E OBSERVAÇÃO DO MOTIVO PADRÃO.
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 01.07.2015
@VERSION 1.0
/*/
STATIC FUNCTION VALMOTPAD(CSEQUEN, CTPTELA)
LOCAL LRET := .F.

IF CTPTELA = 'I'   // TESTA SE É A TELA DE INCLUSÃO DE INTERAÇÃO
	CDESMOTPAD := POSICIONE("BBP",1,XFILIAL("BBP")+CSEQUEN,"BBP_DESMOT")
	COBSMOTPAD := POSICIONE("BBP",1,XFILIAL("BBP")+CSEQUEN,"BBP_OBSERV")
ELSE // SE FOR A TELA DE VISUALIZAÇÃO DA INTERAÇÃO
	CDESMOTPADVIS := POSICIONE("BBP",1,XFILIAL("BBP")+CSEQUEN,"BBP_DESMOT")
	COBSMOTPADVIS := BBR->BBR_OBSERV
ENDIF

IF EMPTY(CSEQUEN)
	LRET := .T.
ELSE
	IF EMPTY(ALLTRIM(CDESMOTPAD)) .AND. EMPTY(ALLTRIM(CDESMOTPADVIS))
		LRET := .F.
	ELSE
		LRET := .T.
	ENDIF
ENDIF

RETURN(LRET)

/*/{PROTHEUS.DOC} CHKSELECT
CHECA SE ALGUMA LINHA FOI SELECIONADA.
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 01.07.2015
@VERSION 1.0
/*/
FUNCTION CHKSELECT(AARRAY, CMOTIVOPADRAO, CMEMOOBS)
LOCAL NFOR
LOCAL LSELECIONADO
LOCAL NPOSICAO := LEN(AARRAY[1])

LSELECIONADO := .F.

FOR NFOR := 1 TO LEN(AARRAY)
	
	IF AARRAY[NFOR, NPOSICAO]
		LSELECIONADO := .T.
	ENDIF
	
	
NEXT NFOR

IF ! LSELECIONADO
	MSGALERT('É NECESSÁRIO SELECIONAR PELO MENOS UM PROCEDIMENTO.')  //'É NECESSÁRIO SELECIONAR PELO MENOS UM PROCEDIMENTO.'
ELSE
	IF ( EMPTY(ALLTRIM(CMOTIVOPADRAO)) .AND. EMPTY(ALLTRIM(CMEMOOBS)) )
		MSGALERT('É NECESSÁRIO PREECHER O CAMPO MOTIVO PADRÃO OU OBSERVAÇÃO, POIS AMBOS NÃO PODEM FICAR VAZIOS.')  //'É NECESSÁRIO PREECHER O CAMPO MOTIVO PADRÃO.'
		LSELECIONADO := .F.
	ENDIF
ENDIF
	
RETURN(LSELECIONADO)

/*/{PROTHEUS.DOC} FILLITERA
CARREGA DINÂMICAMENTE A GRADE DE HISTÓRICO
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 01.07.2015
@VERSION 1.0
/*/
FUNCTION FILLITERA(CCHAVE, ADADH, CALIASPAI, CROTGEN)
LOCAL NFOR
LOCAL CMOTPADRAO
LOCAL ATRBHIST
DEFAULT CROTGEN		:= "0"

ADADH := {}
IF CROTGEN == "0"
	BBR->( DBSETORDER(1) )
	BBR->( MSSEEK( XFILIAL("BBR")+CCHAVE+CALIASPAI ))
	STORE HEADER "BBR" TO ACABHIST FOR .T.
	IF BBR->(DBSEEK(XFILIAL("BBR")+CCHAVE))
		STORE COLS "BBR" TO ADADHIST FROM ACABHIST VETTRAB ATRBHIST WHILE XFILIAL("BBR")+CCHAVE+CALIASPAI == BBR->(BBR_FILIAL+BBR_CODOPE+BBR_ANOAUT+BBR_MESAUT+BBR_NUMAUT+BBR_SEQPRO+BBR_ALIMOV)
	ELSE
		STORE COLS BLANK "BBR" TO ADADHIST FROM ACABHIST
	ENDIF
ELSE
	//BBR_FILIAL+BBR_NUMGUI+BBR_SEQPRO
	BBR->( DBSETORDER(3) )
	STORE HEADER "BBR" TO ACABHIST FOR .T.
	IF BBR->( MSSEEK( XFILIAL("BBR")+CCHAVE))
		STORE COLS "BBR" TO ADADHIST FROM ACABHIST VETTRAB ATRBHIST WHILE XFILIAL("BBR")+CCHAVE == BBR->(BBR_FILIAL+BBR_NUMGUI+BBR_SEQPRO)
	ELSE
		STORE COLS BLANK "BBR" TO ADADHIST FROM ACABHIST
	ENDIF
ENDIF

FOR NFOR := 1 TO  LEN(ADADHIST)
	CMOTPADRAO 	:= POSICIONE("BBP",1,XFILIAL("BBP")+ADADHIST[NFOR, 2],"BBP_DESMOT")
	CNOMUSR		:= USRFULLNAME(ADADHIST[NFOR, 4])
	AADD(ADADH, {ADADHIST[NFOR, 5], ADADHIST[NFOR, 6], CMOTPADRAO, ADADHIST[NFOR, 16], CCHAVE + ADADHIST[NFOR, 17], ADADHIST[NFOR, 7], CNOMUSR})
NEXT

ADADH := ASORT(ADADH,,, { |INTERA1,INTERA2| DTOS(INTERA1[2])+INTERA1[6] > DTOS(INTERA2[2])+INTERA2[6] } )  //ORGANIZAR POR DATA+HORA A INTERAÇÃO. 
	
RETURN ADADH

/*/{PROTHEUS.DOC} PLSBBRSEQ
PROXIMO SEQUENCIAL PARA A INTERAÇÃO
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 01.07.15
@VERSION 1.0
/*/
FUNCTION PLSBBRSEQ(CCODOPE, CANOAUT, CMESAUT, CNUMAUT, CSEQPRO, CROTGEN, CCHAVE)
LOCAL CSEQ
LOCAL CMAIOR := 0
DEFAULT CROTGEN	:= "0"
DEFAULT CCHAVE	:= ""

IF CROTGEN == "0"
	
	BBR->(DBSETORDER(1))
	CCHAVE := CCODOPE + CANOAUT + CMESAUT + CNUMAUT + CSEQPRO
ELSE
	BBR->(DBSETORDER(3))
	CCHAVE := CCHAVE + CSEQPRO
ENDIF

IF BBR->(MSSEEK(XFILIAL("BBR") + CCHAVE ))
	
	WHILE !BBR->(EOF()) .AND. ;
	      ((BBR->(INDEXORD())== 1 .AND. XFILIAL("BBR") + CCHAVE == BBR->(BBR_FILIAL+BBR_CODOPE+BBR_ANOAUT+BBR_MESAUT+BBR_NUMAUT+BBR_SEQPRO)) .OR. ;
           (BBR->(INDEXORD())== 3 .AND. XFILIAL("BBR") + CCHAVE == BBR->(BBR_FILIAL+BBR_NUMGUI+BBR_SEQPRO)))
	
		IF CMAIOR <  VAL(BBR->BBR_SEQUEN)
			CMAIOR := VAL(BBR->BBR_SEQUEN)
		ENDIF
		
		BBR->(DBSKIP())
	ENDDO
	CSEQ := STRZERO(CMAIOR+1,3)
ELSE
	CSEQ := "001"
ENDIF

RETURN(CSEQ)


/*/{PROTHEUS.DOC} PLSATUAUD
ATUALIZA AUDITORIA
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 06.07.2015
@VERSION 1.0
/*/
FUNCTION PLSATUAUD(CTPPUBLICO, CRESPPRESTADOR, CRESPOSTA,COBSMOTPAD)
LOCAL CSETORBF := GETNEWPAR("MV_SETORBF","00")
LOCAL CSETORPR := GETNEWPAR("MV_SETORPR","00")
LOCAL CSETORAT := GETNEWPAR("MV_SETORAT","00")
LOCAL LENCAMINHAMENTO := .F.
LOCAL CALIASMOV
LOCAL CALIASREC
LOCAL CDEPTO
DEFAULT COBSMOTPAD:=""

IF ALLTRIM(CRESPOSTA) <> ''
	CALIASMOV 	:= B53->B53_ALIMOV
	CALIASREC 	:= B53->B53_RECMOV
	CDEPTO := CSETORAT
	
	B53->(RECLOCK("B53",.F.))
	B53->B53_CODDEP := CSETORAT
	B53->(MSUNLOCK())
	LENCAMINHAMENTO := .T.
ELSE
	IF CTPPUBLICO == "PRESTADOR"
		CALIASMOV 	:= B53->B53_ALIMOV
		CALIASREC 	:= B53->B53_RECMOV
		CDEPTO 		:= CSETORPR
		
		B53->(RECLOCK("B53",.F.))
		B53->B53_CODDEP :=  CSETORPR
		B53->(MSUNLOCK())
		LENCAMINHAMENTO := .T.
	ELSE
		IF CTPPUBLICO == "BENEFICIÁRIO"
			CALIASMOV 	:= B53->B53_ALIMOV
			CALIASREC 	:= B53->B53_RECMOV
			CDEPTO 		:= CSETORBF
			
			B53->(RECLOCK("B53",.F.))
			B53->B53_CODDEP :=  CSETORBF
			B53->(MSUNLOCK())
			LENCAMINHAMENTO := .T.
		ENDIF
	ENDIF
ENDIF

IF LENCAMINHAMENTO
	PLSICB71(CALIASMOV, CALIASREC, B53->B53_CODDEP,COBSMOTPAD )
ENDIF
	
RETURN

/*/{PROTHEUS.DOC} PLSAINTE
INCLUIR INTERAÇÃO
//01=ODONTO;02=SADT;03=REEMBOLSO;04=INTERNACAO;05=CONSULTA;07=ANEXOS CLINICOS
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 06.07.2015
@VERSION 1.0
/*/
FUNCTION PLSAINTE(CALIASITE,CTPGUIA, CCODOPER, CANO, CMES, CNUM)
LOCAL ODLG			:= NIL
LOCAL CCADASTRO		:= '   '
LOCAL CTPPUBLICO	:= ''
LOCAL CPARECER		:= ''
LOCAL ABUTTONS 		:= {}
LOCAL OLIST			:= NIL
LOCAL ADADPROC 		:= {}
LOCAL CF3 			:= 'BBP'
LOCAL CCAMPOMOT 	:= SPACE(03)
LOCAL CCHAVE		:= ''
LOCAL CCHAVEITE		:= ''
LOCAL ACABPRO 		:= {}
LOCAL ADADPRO 		:= {}
LOCAL ATRBPRO 		:= {}
LOCAL NPROC			:= 0
LOCAL NCAB			:= 0
LOCAL NPOSTAB 		:= 0
LOCAL NPOSPROC 		:= 0
LOCAL NPOSDESC 		:= 0
LOCAL NPOSSEQUEN 	:= 0
LOCAL LCHECK 		:= .F.
LOCAL NFOR			:= 0
LOCAL NOPCA			:= 0
LOCAL ADADH 		:= {}
LOCAL ASIZE 		:= {}
LOCAL LSELECIONADO 	:= .F.
LOCAL NLINHAINI		:= 0
LOCAL NCOLUNAINI	:= 0
LOCAL CSETOR		:= ''
LOCAL CALTERAPUBLICO:= ''
LOCAL CCODOPE		:= ''
LOCAL CNOMOPE		:= ''
LOCAL CALIASPAI		:= ''
LOCAL LRESPPRE		:= .F.
LOCAL LAUDITADO 	:= .F.
LOCAL CDESCDEP  	:= ""

PRIVATE COBSMOTPAD	 	:= ""
PRIVATE CDESMOTPAD	 	:= ""
PRIVATE CDESMOTPADVIS	:= ""
PRIVATE COBSMOTPADVIS	:= ""

IF CTPGUIA = 'AD'
	
	CALIASPAI := B53->B53_ALIMOV
	
	//CASO A GUIA ESTEJA AUDITADA, APENAS SERÁ POSSÍVEL VISUALIZAR OU CRIAR INTERAÇÕES INTERNAS 
	IF B53->B53_SITUAC == "1"
		LAUDITADO := .T.
	ENDIF 
	
	IF B53->B53_ROTGEN == "1"
		PLSINTGEN(CTPGUIA)
		RETURN		
	ELSE
		IF B53->B53_ALIMOV = 'BE4' //INTERNAÇÃO
			CALIASITE := "BEJ"
		ELSE
			IF B53->B53_ALIMOV = 'BEA'
				CALIASITE := "BE2" //SADT - ODONTO
			ELSE
				IF B53->B53_ALIMOV = 'B44'
					CALIASITE := "B45" //REEMBOLSO
				ELSE
					IF B53->B53_ALIMOV = 'B4A' //ANEXOS CLINICOS
						CALIASITE := "B4C"
					ELSE
						IF B53->B53_ALIMOV = 'B4Q' //ANEXOS CLINICOS
							CALIASITE := "BQV"
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	
	ACAMPOS := {}
	
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_CODOPE',CALIASITE + '_OPEMOV') , LEFT(B53->B53_NUMGUI,4)})
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_ANOINT',CALIASITE + '_ANOAUT') , SUBSTR(B53->B53_NUMGUI,5,4)})
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_MESINT',CALIASITE + '_MESAUT') , SUBSTR(B53->B53_NUMGUI,9,2)})
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_NUMINT',CALIASITE + '_NUMAUT') , RIGHT(B53->B53_NUMGUI,8)})
ELSE
	
	IF CALIASITE = "BEJ"  //INTERNAÇÃO
		CALIASPAI := 'BE4'
	ELSE
		IF CALIASITE = "BE2"
			CALIASPAI := "BEA" //SADT - ODONTO
		ELSE
			IF CALIASITE = "B45"
				CALIASPAI := 'B44'  //REEMBOLSO
			ELSE
				IF CALIASITE = "B4C" //ANEXOS CLINICOS
					CALIASPAI := 'B4A'
				ELSE
					IF CALIASITE = "BQV" //ANEXOS CLINICOS
						CALIASPAI := 'B4Q'
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
	
	
	ACAMPOS := {}
	
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_CODOPE',CALIASITE + '_OPEMOV') , &(CCODOPER)})
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_ANOINT',CALIASITE + '_ANOAUT') , &(CANO)})
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_MESINT',CALIASITE + '_MESAUT') , &(CMES)})
	AADD(ACAMPOS, { IF(CALIASITE $ 'BEJ,BQV', CALIASITE + '_NUMINT',CALIASITE + '_NUMAUT') , &(CNUM)})
	
ENDIF

DBSELECTAREA(CALIASITE)

CCHAVEITE := PADL(CVALTOCHAR(ACAMPOS[1][2]), TAMSX3(ACAMPOS[1][1])[1],"0") + PADR(CVALTOCHAR(ACAMPOS[2][2]), TAMSX3(ACAMPOS[2][1])[1],) + PADL(CVALTOCHAR(ACAMPOS[3][2]), TAMSX3(ACAMPOS[3][1])[1],"0") + PADL(CVALTOCHAR(ACAMPOS[4][2]), TAMSX3(ACAMPOS[4][1])[1],"0")//BE4->(BE4_CODOPE+BE4_ANOINT+BE4_MESINT+BE4_NUMINT)

&(CALIASITE)->( DBSETORDER(1) )
&(CALIASITE)->( MSSEEK( XFILIAL(CALIASITE)+CCHAVEITE ))

STORE HEADER CALIASITE TO ACABPRO FOR .T.
STORE COLS CALIASITE TO ADADPRO FROM ACABPRO VETTRAB ATRBPRO WHILE XFILIAL(CALIASITE)+&(CALIASITE)->(&(ACAMPOS[1][1])+&(ACAMPOS[2][1])+&(ACAMPOS[3][1])+&(ACAMPOS[4][1])) == XFILIAL(CALIASITE)+CCHAVEITE

IF EMPTY(ADADPRO) 
	MSGINFO(STR0095,STR0028) //"ESTÁ GUIA NÃO POSSUI ACESSO A ROTINA DE INTERAÇÃO POIS NÃO POSSUI PROCEDIMENTOS", "ATENÇÃO"
	RETURN
ENDIF 

FOR NCAB := 1 TO LEN(ACABPRO) // BUSCA DINÂMICA DA POSIÇÃO DOS CAMPOS, NO CASO DA ORDEM FOR ALTERADA.
	IF NPOSTAB = 0 .OR. NPOSPROC = 0 .OR. NPOSDESC = 0 //SÓ FAZ A COMPARAÇÃO SE AINDA NÃO ACHOU OS 3 CAMPOS.
		IF ACABPRO[NCAB][2] == CALIASITE + '_CODPAD'
			NPOSTAB := NCAB
		ELSE
			IF ACABPRO[NCAB][2] == CALIASITE + '_CODPRO'
				NPOSPROC := NCAB
			ELSE
				IF ACABPRO[NCAB][2] == CALIASITE + '_DESPRO'
					NPOSDESC := NCAB
				ELSE
					IF ACABPRO[NCAB][2] == CALIASITE + '_SEQUEN'
						NPOSSEQUEN := NCAB
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
NEXT NCAB

/*BUSCANDO O SETOR E A PERMISSÃO PARA ALTERAR O PÚBLICO*/
DBSELECTAREA("BX4")
BX4->(DBSETORDER(1))
CCHAVE := XFILIAL("BX4") + RETCODUSR() + PLSINTPAD()

IF BX4->(DBSEEK(CCHAVE))
	CSETOR 		 := BX4->BX4_CODDEP
	CALTERAPUBLICO := ALLTRIM(BX4->BX4_ALTPUB)
	CCODOPE 		 := BX4->BX4_CODOPE
ENDIF

ASIZE := MSADVSIZE()

NLINHAINI := ASIZE[1]  + 005  //005
NCOLUNAINI := ASIZE[2]  + 005 //035

ASIZE[3] := ASIZE[3]
ASIZE[4] := ROUND(ASIZE[4] * 0.92, 0)
ASIZE[5] := ROUND(ASIZE[5] * 0.57/*0.92*/, 0)
ASIZE[6] := ROUND(ASIZE[6] , 0) //* 0.82
ASIZE[7] := ROUND(ASIZE[7] * 0.92, 0)

DEFINE MSDIALOG ODLG TITLE CCADASTRO FROM ASIZE[7],0 TO ASIZE[6],ASIZE[5] OF OMAINWND PIXEL

@ NCOLUNAINI, NLINHAINI SAY "PROCEDIMENTOS" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC


FOR NPROC := 1 TO LEN(ADADPRO) //COM BASE NA POSIÇÃO DO CABEÇALHO, BUSCA O CONTEÚDO.
	AADD(ADADPROC, {ALLTRIM(ADADPRO[NPROC][NPOSTAB]) , ALLTRIM(ADADPRO[NPROC][NPOSPROC]), ALLTRIM(ADADPRO[NPROC][NPOSDESC]), ALLTRIM(ADADPRO[NPROC][NPOSSEQUEN]), .F.})
NEXT NPROC

OLIST := TCBROWSE():NEW(NCOLUNAINI + 010,NLINHAINI,/*395*/ASIZE[5]*0.49 ,50 ,,;
	{}, {40,40,40},;
	ODLG,,,,, {||},, ,,,,,.F.,,.T.,,.F.,,, )


ADD COLUMN TO OLIST BITMAP DATA { || LOADBITMAP( GETRESOURCES(), IIF(!ADADPROC[OLIST:NAT,LEN(ADADPROC[OLIST:NAT])] ,EVAL({|| LCHECK := .F.,"LBNO"}),"LBOK" ) )} TITLE "" WIDTH 015 ALIGN CENTERED NOHILITE

OLIST:ADDCOLUMN(TCCOLUMN():NEW('COD. TAB. PD',{ || ADADPROC[OLIST:NAT, 1] },"@C",NIL,NIL,NIL,035,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLIST:ADDCOLUMN(TCCOLUMN():NEW('COD. PROC.'  ,{ || ADADPROC[OLIST:NAT, 2] },"@C",NIL,NIL,NIL,035,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLIST:ADDCOLUMN(TCCOLUMN():NEW('DESCR. PROC.',{ || ADADPROC[OLIST:NAT, 3] },"@C",NIL,NIL,NIL,080,.F.,.F.,NIL,NIL,NIL,.F.,NIL))

OLIST:SETARRAY(ADADPROC)

OLIST:BLDBLCLICK := { || MARCALINHA(OLIST:NAT,ADADPROC,LCHECK) , OLIST:REFRESH() }


@ NCOLUNAINI + 70, NLINHAINI SAY "INCLUIR INTERAÇÃO" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC
OPANEL  := TPANEL():NEW( NCOLUNAINI + 80, NLINHAINI, "",, , .F., , , , ASIZE[5], 190, .T., .F. )//*0.49

@ 010, 010 SAY OSAY3 PROMPT "PÚBLICO:" SIZE 025, 007 OF OPANEL PIXEL
@ 017, 010 MSCOMBOBOX OPARECER VAR CTPPUBLICO ITEMS {"", "BENEFICIÁRIO", "PRESTADOR" } SIZE 055, 010 OF OPANEL;
	WHEN CALTERAPUBLICO = '1' .AND. CTPGUIA = 'AD' .AND. ALLTRIM(FUNNAME()) != "TMKA271" .AND. !LAUDITADO;  
	ON CHANGE IF(!PLVLDINT(OLIST:NAT, ADADPROC, CTPPUBLICO, @CPARECER,OLIST),CTPPUBLICO := "",)  PIXEL OF OPANEL

@ 010, 070 SAY OSAY4 PROMPT "RESPOSTA PREST." SIZE 025, 007 OF OPANEL PIXEL
@ 017, 070 MSCOMBOBOX OPARECER VAR CPARECER ITEMS {"NÃO","SIM"}  SIZE 030, 010 OF OPANEL;
	WHEN /*.T.*/ CTPPUBLICO == "PRESTADOR"  PIXEL OF OPANEL

@ 010, 105 SAY OSAY5 PROMPT "MOTIVO PADRÃO:" SIZE 040, 007 OF OPANEL PIXEL
@ 017, 105 MSGET CCAMPOMOT VAR CCADASTRO F3 CF3 VALID VALMOTPAD(CCADASTRO, 'I')  /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/ SIZE 030,010 PIXEL OF OPANEL

@ 017, 135 MSGET CDESMOTPAD /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/WHEN .F. SIZE ASIZE[5]*0.23 /*180*/,010 PIXEL OF OPANEL

@ 040,010 SAY "OBS.:" SIZE 100,010 PIXEL OF OPANEL //DESC. ESPEC
@ 047,010 GET COBSMOTPAD MEMO SIZE 200,040 PIXEL OF OPANEL

@ NCOLUNAINI + 185, NLINHAINI SAY "HISTÓRICO DE INTERAÇÕES" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC


OLISTHIST := TCBROWSE():NEW(NCOLUNAINI + 200,NLINHAINI,ASIZE[5]*0.49 ,50 ,,;
	{},{40,40},;
	ODLG,,,,, {||},, ,,,,,.F.,,.T.,,.F.,,, )

OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('SETOR',{ || ADADH[OLISTHIST:NAT, 1] },"@C",NIL,NIL,NIL,040,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('DATA INTERAÇÃO'  ,{ || ADADH[OLISTHIST:NAT, 2] },"@C",NIL,NIL,NIL,045,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('MOT. PADRÃO'   ,{ || ADADH[OLISTHIST:NAT, 3] },"@C",NIL,NIL,NIL,070,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('OBSERVAÇÃO'   ,{ || ADADH[OLISTHIST:NAT, 4] },"@C",NIL,NIL,NIL,080,.F.,.F.,NIL,NIL,NIL,.F.,NIL))

OLISTHIST:BLDBLCLICK := { || IF( LEN(ADADH) > 0, PLSAVISINT(ADADH[OLISTHIST:NAT, 5], CALTERAPUBLICO), ) /*, OLIST:REFRESH()*/ } 

OLIST:BCHANGE :=  {|| OLISTHIST:SETARRAY(FILLITERA(CCHAVEITE + ADADPROC[OLIST:NAT, 4], ADADH, CALIASPAI)), OLISTHIST:REFRESH()}

ACTIVATE MSDIALOG ODLG ON INIT ENCHOICEBAR(ODLG ,{|| NOPCA := 1, IF(CHKSELECT(ADADPROC, CDESMOTPAD, COBSMOTPAD ),ODLG:END(),NOPCA := 2)  /*ODLG:END()*/ ,.F.}, {|| ODLG:END()},.F.,ABUTTONS) CENTERED

IF  NOPCA == K_OK

	//NÃO PERMITE GERAR UMA INTERAÇÃO ENQUANTO HOUVER REPOSTA PENDENTE DO PRESTADOR OU DO BENEFICIÁRIO 
	IF !EMPTY(CTPPUBLICO)
		
		IF B53->B53_CODDEP $ "005,006" // BENEFICIARIO, PRESTADOR (CÓDIGO DA TABELA GENÉRICA BL
			
		CDESCDEP := UPPER( ALLTRIM( POSICIONE("SX5",1,XFILIAL("SX5")+"BL"+B53->B53_CODDEP,"X5_DESCRI") ) )

			MSGINFO(STR0093 + CDESCDEP + STR0094, STR0028) //"GUIA AGUARDANDO INTERAÇÃO DO ", ", NÃO SERÁ POSSÍVEL CONCLUIR A INTERAÇÃO", "ATENÇÃO"
			RETURN
		ENDIF
	ENDIF 
		
	BEGIN TRANSACTION
		FOR NFOR := 1 TO LEN(ADADPROC)
			
			IF ADADPROC[NFOR,5]
				
				CSEQ := PLSBBRSEQ(/*BE4_CODOPE, BE4_ANOINT, BE4_MESINT, BE4_NUMINT*/PADL(CVALTOCHAR(ACAMPOS[1][2]), TAMSX3(ACAMPOS[1][1])[1],"0"), PADR(CVALTOCHAR(ACAMPOS[2][2]), TAMSX3(ACAMPOS[2][1])[1]," "), PADL(CVALTOCHAR(ACAMPOS[3][2]), TAMSX3(ACAMPOS[3][1])[1],"0"), PADL(CVALTOCHAR(ACAMPOS[4][2]), TAMSX3(ACAMPOS[4][1])[1],"0"), PADL(ADADPROC[NFOR, 4], 3, "0"))
				BBR->(RECLOCK("BBR",.T.))
				
				IF CTPPUBLICO == "PRESTADOR"
					BBR->BBR_TPDIRP := 'P'
				ELSE
					IF EMPTY(CTPPUBLICO)
						BBR->BBR_TPDIRP := SPACE(TAMSX3("BBR_TPDIRP")[1])
						BBR->BBR_ANEXAD := .T.
					ELSE
						BBR->BBR_TPDIRP := 'B'
					ENDIF
				ENDIF
				
				//ALTERAÇÃO NECESSÁRIA POIS NO MOMENTO DE ANEXAR UM ARQUIVO PELO PORTAL
				//DO BENEFICIÁRIO, NÃO EXISTE VINCULO DIRETO ENTRE O REGISTROCORRENTE DA INTERAÇÃO E O PROCEDIMENTO.
				//DESTA FORMA, DIFICULTOU MUITO A ALTERAÇÃO DO STATUS NO MOMENTO APÓS ANEXAR UM ARQUIVO.
				IF CPARECER = "SIM" .OR. BBR->BBR_TPDIRP == 'B'
					
					BBR->BBR_RESPRE := .T.
					
					IF BBR->BBR_TPDIRP == 'P'  
						BBR->BBR_ANEXAD := .T.
					ENDIF 
					
				ELSE
					BBR->BBR_RESPRE := .F.
				ENDIF
				
				BBR->BBR_FILIAL  := XFILIAL("BBR")
				BBR->BBR_SETOR  := POSICIONE("SX5",1,XFILIAL("SX5")+"BL"+CSETOR/*BX4->BX4_CODDEP*/,"X5_DESCRI")
				BBR->BBR_CODUSU := CCODOPE
				BBR->BBR_SEQMOP := CCADASTRO
				BBR->BBR_DTITER := DDATABASE
				BBR->BBR_HRITER := TIME()
				BBR->BBR_SEQPRO := ADADPROC[NFOR, 4]
				BBR->BBR_CODPRO := ADADPROC[NFOR, 2]
				BBR->BBR_TPGUIA := CTPGUIA //"04"
				BBR->BBR_OBSERV := COBSMOTPAD
				
				BBR->BBR_ALIMOV := CALIASPAI
				
				BBR->BBR_CODOPE := PADL(CVALTOCHAR(ACAMPOS[1][2]), TAMSX3(ACAMPOS[1][1])[1],"0")//BE4_CODOPE
				BBR->BBR_ANOAUT := PADR(CVALTOCHAR(ACAMPOS[2][2]), TAMSX3(ACAMPOS[2][1])[1],) //BE4_ANOINT
				BBR->BBR_MESAUT := PADL(CVALTOCHAR(ACAMPOS[3][2]), TAMSX3(ACAMPOS[3][1])[1],"0") //BE4_MESINT
				BBR->BBR_NUMAUT := PADL(CVALTOCHAR(ACAMPOS[4][2]), TAMSX3(ACAMPOS[4][1])[1],"0") //BE4_NUMINT
				
				BBR->BBR_SEQUEN := CSEQ
				
				BBR->(MSUNLOCK())
				
				PLSATUAUD(CTPPUBLICO, CPARECER, '',COBSMOTPAD)
				
				//ATUALIZAR O STATUS NA BEA OU BE4 PARA ANÁLISE QUANDO DEPENDER DE RESPOSTA DO PRESTADOR
				IF ( CALIASPAI $ ("BEA,BE4,B4A,B4Q") .AND. CTPPUBLICO = "PRESTADOR" )
					IF CALIASPAI=="BE4"
						&(CALIASPAI)->(DBSETORDER(2))
					ELSE
						&(CALIASPAI)->(DBSETORDER(1))
					ENDIF
					
					IF &(CALIASPAI)->( MSSEEK( XFILIAL(CALIASPAI)+CCHAVEITE ))
						&(CALIASPAI)->(RECLOCK((CALIASPAI),.F.))
						&(CALIASPAI+"->"+CALIASPAI+"_STTISS") := PLSANLSTIG("5H") //AGUARDANDO INFORMAÇÃO DO PRESTADOR
						&(CALIASPAI)->(MSUNLOCK())
					ENDIF
				ENDIF
				
				IF ( CALIASPAI $ ("BEA,BE4,B4Q") .AND. CTPPUBLICO = "BENEFICIÁRIO" )
					
					IF CALIASPAI == "BE4"
						&(CALIASPAI)->(DBSETORDER(2))
					ELSE
						&(CALIASPAI)->(DBSETORDER(1))
					ENDIF
					
					&(CALIASPAI)->( MSSEEK( XFILIAL(CALIASPAI)+CCHAVEITE ))
					
					&(CALIASPAI)->(RECLOCK((CALIASPAI),.F.))
						&(CALIASPAI+"->"+CALIASPAI+"_STTISS") := "2" //EM ANÁLISE
					&(CALIASPAI)->(MSUNLOCK())
					
				ENDIF
				
				MSGINFO(STR0085)  //'INTERAÇÃO SALVA COM SUCESSO.'
				
			ENDIF
			
		NEXT NFOR
		
	END TRANSACTION
	
ENDIF

RETURN

/*/{PROTHEUS.DOC} PLSAVISINT
VISUALIZAR INTERAÇÃO
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 06.07.2015
@VERSION 1.0
/*/
FUNCTION PLSAVISINT(CCHAVE, CALTERAPUBLICO)
LOCAL ODLG
LOCAL OPANEL
LOCAL OCAMPOMOTVIS 	:= SPACE(03)
LOCAL CCODUSU		:=""
LOCAL CNOMUSU		:=""
LOCAL NOPCA
LOCAL CCADASTRO 	:= 'VISUALIZAR INTERAÇÃO'
LOCAL ABUTTONS 		:= {}
LOCAL CTPPUBLICO	:=""
LOCAL CCAMPOMOT 	:= SPACE(03)
LOCAL CF3 			:= 'BBP'
LOCAL CRESINT		:=""
LOCAL NCOUNTR 		:= 0
LOCAL LINTERPEN		:= .F. 
LOCAL CCHAVEB		:= CCHAVE
LOCAL LRESPINT		:= .F.

BBR->( DBSETORDER(2) )
BBR->( MSSEEK( XFILIAL("BBR")+CCHAVE ))

DEFINE MSDIALOG ODLG TITLE CCADASTRO FROM 10,0 TO 600, 500 OF OMAINWND PIXEL

/*BUSCANDO O SETOR E A PERMISSÃO PARA ALTERAR O PÚBLICO*/
DBSELECTAREA("BX4")
BX4->(DBSETORDER(1))
CCHAVE := XFILIAL("BX4") + ALLTRIM(BBR->BBR_CODUSU) + PLSINTPAD()


IF BX4->(DBSEEK(CCHAVE))
	CNOMUSU := BX4->BX4_NOMOPE
ENDIF

@ 035,005 SAY "INTERAÇÃO" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC
OPANEL  := TPANEL():NEW( 042, 005, "",, , .F., , , , 240, 140, .T., .F. )


@ 010, 010 SAY OSAY5 PROMPT "USUÁRIO" SIZE 025, 015 OF OPANEL PIXEL
@ 017, 010 MSGET ALLTRIM(BBR->BBR_CODUSU) /*VAR CCODUSU F3 CF3*/ WHEN .F. /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/ SIZE 030,010 PIXEL OF OPANEL

@ 017, 040 MSGET ALLTRIM(/*BBR->BBR_NOMUSU*/CNOMUSU) /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/WHEN .F. SIZE 200,010 PIXEL OF OPANEL

@ 035, 010 SAY OSAY5 PROMPT "SETOR" SIZE 025, 015 OF OPANEL PIXEL
@ 042, 010 MSGET ALLTRIM(BBR->BBR_SETOR) /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/WHEN .F. SIZE 060,010 PIXEL OF OPANEL

@ 035, 070 SAY OSAY5 PROMPT "DATA" SIZE 025, 015 OF OPANEL PIXEL
@ 042, 070 MSGET BBR->BBR_DTITER /*VAR CCADASTRO  WHEN .T.*/WHEN .F. SIZE 040,010 PIXEL OF OPANEL

@ 035, 110 SAY OSAY5 PROMPT "HORA" SIZE 025, 015 OF OPANEL PIXEL
@ 042, 110 MSGET ALLTRIM(BBR->BBR_HRITER) /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/WHEN .F. SIZE 020,010 PIXEL OF OPANEL

IF BBR->BBR_TPDIRP == 'P'
	CTPPUBLICO := "PRESTADOR"
ELSE
	IF EMPTY(BBR->BBR_TPDIRP)
		CTPPUBLICO := SPACE(TAMSX3("BBR_TPDIRP")[1])
	ELSE
		CTPPUBLICO := "BENEFICIÁRIO"
	ENDIF
ENDIF

LRESPPRE := BBR->BBR_RESPRE

IF LRESPPRE
	CPARECER := "SIM"
ELSE
	CPARECER := "NÃO"
ENDIF

@ 035, 140 SAY OSAY3 PROMPT "PÚBLICO:" SIZE 025, 007 OF OPANEL PIXEL
@ 042, 140 MSCOMBOBOX OPARECER VAR CTPPUBLICO ITEMS {"", "BENEFICIÁRIO", "PRESTADOR"} SIZE 055, 010 OF OPANEL;
	WHEN .F./*CALTERAPUBLICO = '1'*/ ON CHANGE IIF(CTPPUBLICO <> "PRESTADOR" , CPARECER := "NÃO",CPARECER := "SIM") PIXEL OF OPANEL

@ 035, 195 SAY OSAY4 PROMPT "RESPOSTA PREST." SIZE 025, 007 OF OPANEL PIXEL
@ 042, 195 MSCOMBOBOX OPARECER VAR CPARECER ITEMS {"NÃO","SIM"}  SIZE 030, 010 OF OPANEL;
	WHEN .F.  PIXEL OF OPANEL

CCAMPOMOT := BBR->BBR_SEQMOP

VALMOTPAD(CCAMPOMOT, 'V')

@ 060, 010 SAY OSAY5 PROMPT "MOTIVO PADRÃO:" SIZE 040, 007 OF OPANEL PIXEL
@ 067, 010 MSGET OCAMPOMOTVIS VAR CCAMPOMOT F3 CF3 /*VALID VALMOTPAD(CCAMPOMOT, 'V')*/  WHEN .F. /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/ SIZE 030,010 PIXEL OF OPANEL

@ 067, 040 MSGET CDESMOTPADVIS /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/WHEN .F. SIZE 180,010 PIXEL OF OPANEL

@ 085,010 SAY "OBSERVACAO" SIZE 100,010 PIXEL OF OPANEL //DESC. ESPEC
@ 092,010 GET COBSMOTPADVIS MEMO SIZE 220,040 PIXEL OF OPANEL MULTILINE HSCROLL READONLY

CRESINT := ALLTRIM(BBR->BBR_RESPOS) 

@ 185,005 SAY "RESPOSTA" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC
OPANELRESPOSTA  := TPANEL():NEW( 192, 005, "",, , .F., , , , 240, 100, .T., .F. )

IF ! EMPTY(CRESINT) 
	@ 010,010 GET CRESINT MEMO WHEN BBR->BBR_RESPRE .AND. CPARECER = "SIM" SIZE 220,070 PIXEL OF OPANELRESPOSTA MULTILINE HSCROLL READONLY
	
	ACTIVATE MSDIALOG ODLG CENTERED ON INIT EVAL( { || ENCHOICEBAR(ODLG,NOPCA := 0,{|| ODLG:END()},.F.,{},,,,,,.F.) } )
	
ELSE
	
	LRESPINT := .T.
	@ 010,010 GET CRESINT MEMO WHEN (BBR->BBR_RESPRE .AND. CPARECER = "SIM") .OR. (!BBR->BBR_RESPRE .AND. CPARECER <> "SIM") SIZE 220,070 PIXEL OF OPANELRESPOSTA
	
	ACTIVATE MSDIALOG ODLG ON INIT ENCHOICEBAR(ODLG ,{|| NOPCA := 1, ODLG:END(),.F.}, {|| ODLG:END()},.F.,ABUTTONS) CENTERED
	
ENDIF 

IF  NOPCA == K_OK
	BEGIN TRANSACTION
		BBR->(RECLOCK("BBR",.F.))
		BBR->BBR_RESPOS := CRESINT
		
		IF CPARECER = "SIM"
			BBR->BBR_RESPRE := .T.
		ELSE
			BBR->BBR_RESPRE := .F.
		ENDIF
		
		//SE FOR RESPOSTA INTERNA (PARECER POR PARTE DA OPERADORA QUANDO A RESPOSTA ESPERADA É DO PRESTADOR)
		//ALTERAMOS A INTERAÇÃO PARA NÃO FICAR PENDENTE DO PRESTADOR
		IF LRESPINT .AND. ! EMPTY(BBR->BBR_RESPOS) .AND. (CTPPUBLICO == "PRESTADOR")
			BBR->BBR_TPDIRP := ''
		ELSE
			IF CTPPUBLICO == "PRESTADOR"
				BBR->BBR_TPDIRP := 'P'
			ELSE
				IF EMPTY(CTPPUBLICO)
					BBR->BBR_TPDIRP := SPACE(TAMSX3("BBR_TPDIRP")[1])
				ELSE
					BBR->BBR_TPDIRP := 'B'
				ENDIF
			ENDIF
		ENDIF			

		BBR->(MSUNLOCK())
	
	//VERIFICA SE TODOS OS PROCEDIMENTOS ESTÃO COM RESPOSTA, QUANDO REMOTE.
	BBR->(DBSETORDER(1))
	BBR->( MSSEEK( XFILIAL("BBR")+LEFT(CCHAVEB,18) ))
		IF ( BBR->BBR_ALIMOV $ ("BEA,BE4,B4A,B4Q") ) 
		
		CALIASPAI := BBR->BBR_ALIMOV
		
		WHILE (!BBR->(EOF()) .AND. BBR->(BBR_CODOPE+BBR_ANOAUT+BBR_MESAUT+BBR_NUMAUT) == LEFT(CCHAVEB,18))
			
			IF (BBR->BBR_TPDIRP == "P")
				
				IF BBR->BBR_RESPRE .AND. EMPTY(BBR->BBR_RESPOS) .OR. !BBR->BBR_ANEXAD
					LINTERPEN := .T.
					
					EXIT
				ENDIF
			ENDIF
			
			BBR->(DBSKIP())
		ENDDO
		
		IF !LINTERPEN
			//ATUALIZAR O STATUS NA BEA OU BE4 PARA ANÁLISE QUANDO DEPENDER DE RESPOSTA DO PRESTADOR
				IF ( CALIASPAI $ ("BEA,BE4,B4A,B4Q") .AND. CTPPUBLICO == "PRESTADOR" ) 
				IF CALIASPAI == "BE4" 
					&(CALIASPAI)->(DBSETORDER(2))
				ELSE
					&(CALIASPAI)->(DBSETORDER(1))	
				ENDIF 
				&(CALIASPAI)->( MSSEEK( XFILIAL(CALIASPAI)+LEFT(CCHAVEB,18) ))
				
				&(CALIASPAI)->(RECLOCK((CALIASPAI),.F.))
					&(CALIASPAI+"->"+CALIASPAI+"_STTISS") := PLSANLSTIG("6") //EM ANÁLISE DA OPERADORA
				&(CALIASPAI)->(MSUNLOCK())
			ENDIF
			
			PLSATUAUD(CTPPUBLICO, CPARECER, CRESINT,COBSMOTPAD)
		ENDIF
		
	ENDIF
	END TRANSACTION 
	MSGINFO(STR0092)  //'RESPOSTA SALVA COM SUCESSO'
ENDIF
COBSMOTPADVIS	:= ""
CDESMOTPADVIS	:= ""
CCAMPOMOT		:= ""
RETURN

/*/{PROTHEUS.DOC} PLRELRDAEXE
RETORNA AS RDAS COM ACESSO AO PORTAL
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 30/07/2015
@VERSION 1.0
/*/
FUNCTION PLRELRDAEXE(CSQL,ARET)
LOCAL CREGATE 	:= ""
LOCAL AMATESP 	:= {}
LOCAL AAREA   	:= GETAREA()
LOCAL LINCLUI   := .T.
LOCAL NI        := 0
LOCAL CTIPPREZ	:= GETNEWPAR("MV_PLSTPHS","HOS")
LOCAL LLSESPBAQ  := GETNEWPAR("MV_PLSESPP",.T.) //LISTA AS ESPECIALIDADES DA BAX COM DESC DA BAQ
LOCAL CINTPAD    := PLSINTPAD()

// EXECUTE
DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"TRBBE",.F.,.T.)

IF !LLSESPBAQ      
	BAQ->(DBSETORDER(1))
	BAQ->(DBGOTOP())	
	WHILE !BAQ->( EOF() ) .AND. BAQ->(BAQ_FILIAL+BAQ_CODINT) == XFILIAL("BAQ")+CINTPAD

		IF !EMPTY(BAQ->BAQ_CBOS)
			AADD( AMATESP,{BAQ->BAQ_CODESP,;
				BAQ->BAQ_DESCRI,;
				BAQ->BAQ_CBOS,;
				BAQ->BAQ_DESCBO } )
		ENDIF
		BAQ->( DBSKIP() )
	ENDDO	
ENDIF
// MONTA MATRIZ DE RETORNO

WHILE !TRBBE->( EOF() )

	// MONTA A MATRIZ DE ESPECIALIDADE
	IF BAX->( MSSEEK( XFILIAL("BAX")+TRBBE->(BSO_CODIGO+BSO_CODINT+BSO_CODLOC) ) )
		IF LLSESPBAQ
		AMATESP := {}
		ENDIF
			
		WHILE !BAX->( EOF() ) .AND. BAX->(BAX_FILIAL+BAX_CODIGO+BAX_CODINT+BAX_CODLOC) == XFILIAL("BAX")+TRBBE->(BSO_CODIGO+BSO_CODINT+BSO_CODLOC) .AND. LLSESPBAQ
			IF BAQ->( MSSEEK( XFILIAL("BAQ")+BAX->(BAX_CODINT+BAX_CODESP) ) ) .AND. (EMPTY(BAX->BAX_DATBLO) .OR. DDATABASE < BAX->BAX_DATBLO)
			
				IF !EMPTY(BAQ->BAQ_CBOS)
			
					AADD( AMATESP,{	BAQ->BAQ_CODESP,;
									BAQ->BAQ_DESCRI,;
									BAQ->BAQ_CBOS,;
									BAQ->BAQ_DESCBO } )
				ENDIF
				
			ENDIF
			
		BAX->( DBSKIP() )
		ENDDO
		
		// PEGA AS ESPECIALIDADES DO CORPO CLINICO
		IF GETNEWPAR("MV_PLESPCL","1") == "1" .AND. LLSESPBAQ
			CSQL := " SELECT DISTINCT BAX_CODESP "
			CSQL += "  FROM " + CBC1 + "," + CBAX
			CSQL += " WHERE BC1_FILIAL = '" + XFILIAL("BC1") + "' "
			CSQL += "   AND BC1_CODIGO = '" + TRBBE->BSO_CODIGO + "' "
			CSQL += "   AND BC1_CODLOC = '" + TRBBE->BSO_CODLOC + "' "
			CSQL += "	AND " + CBC1 + ".D_E_L_E_T_ = ' ' "
			CSQL += "   AND BAX_FILIAL = '" + XFILIAL("BAX") + "' "
			CSQL += "   AND BAX_CODIGO = BC1_CODRDA "
			CSQL += "   AND BAX_CODINT = BC1_CODINT "
			CSQL += "   AND BAX_DATBLO = '" + SPACE( TAMSX3("BAX_DATBLO")[1] ) + "' "
			CSQL += "	AND " + CBAX + ".D_E_L_E_T_ = ' ' "
			
			DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"TRBECC",.F.,.T.)

			WHILE !TRBECC->( EOF() )

				IF BAQ->( MSSEEK( XFILIAL("BAQ")+TRBBE->BSO_CODINT+TRBECC->BAX_CODESP ) )

					IF !EMPTY(BAQ->BAQ_CBOS) .AND. ASCAN(AMATESP,{|X| X[1] == BAQ->BAQ_CODESP } ) == 0

						AADD( AMATESP,{	BAQ->BAQ_CODESP,;
										BAQ->BAQ_DESCRI,;
										BAQ->BAQ_CBOS,;
										BAQ->BAQ_DESCBO } )
							
					ENDIF
					
				ENDIF
				
			TRBECC->( DBSKIP() )
			ENDDO
			
			TRBECC->( DBCLOSEAREA() )
			
		ENDIF
	ENDIF
	
	// TIPO DE REGIME
	CREGATE := IIF(TRBBE->BAU_TIPPRE != CTIPPREZ,'NORMAL','EMERGENCIA') //ALTERADO DEVIDO LENTIDÃO. HAVIA CASOS DO LOGIN DEMORAR MAIS DE 2 MINUTOS E DE O PRESTADOR NEM CONSEGUIR LOGAR
	
	// MATRIZ
	IF !EMPTY(ARET)
		LINCLUI := .T.
		FOR NI:=1 TO LEN(ARET)
			IF ARET[NI][1] == TRBBE->BAU_CODIGO .AND. LEN(ARET[NI][7])>0 .AND. ARET[NI][7] == TRBBE->BSO_CODLOC
				LINCLUI := .F.
			ENDIF
		NEXT NI
	ENDIF
	
	IF LINCLUI
			AADD( ARET,{TRBBE->BAU_CODIGO,;														//1
						TRBBE->BAU_NOME,;														//2
						CREGATE,;																//3
						TRBBE->BAU_TIPPRE,;														//4
						TRBBE->BAU_CPFCGC,;														//5
						TRBBE->BB8_CNES,;														//6
						TRBBE->BB8_TIPLOG,;														//7
						ALLTRIM(TRBBE->BB8_END),;												//8
						TRBBE->BB8_NR_END,;														//9
						ALLTRIM(TRBBE->BB8_COMEND),;											//10
						POSICIONE("BID",1,XFILIAL("BID")+TRBBE->BB8_CODMUN,"BID_DESCRI"),;		//11 MUNICIPIO
						TRBBE->BB8_BAIRRO,;														//12
						TRBBE->BB8_EST,;														//13
						TRBBE->BB8_CODMUN,;														//14 IBGE
						TRBBE->BB8_CEP,;														//15
						POSICIONE("BA0",1,XFILIAL("BA0")+TRBBE->BSO_CODINT,"BA0_SUSEP"),;		//16
						TRBBE->BB8_TEL,;														//17
						TRBBE->BAU_SIGLCR,;														//18
						TRBBE->BAU_CONREG,;														//19
						TRBBE->BAU_ESTCR,;														//20
						TRBBE->BAU_TIPPE,;														//21
						TRBBE->BAU_CODBB0,;														//22
						TRBBE->BSO_CODINT,;														//23
						TRBBE->BSO_CODLOC,;														//24
						POSICIONE("BB8",1,XFILIAL("BB8")+TRBBE->(BSO_CODIGO+BSO_CODINT+BSO_CODLOC),"BB8_DESLOC"),;//25
						AMATESP,;                                                            	//26
						ALLTRIM(TRBBE->BB8_COMEND),; 										 	//27
						ALLTRIM(TRBBE->BB8_CARSOL),; 											//28
						ALLTRIM(IIF(BAU->(FIELDPOS("BAU_TISVER"))>0,TRBBE->BAU_TISVER,'') ),;     //29
						TRBBE->RECNOBAU          } ) 	//30
		
	ENDIF
	
TRBBE->( DBSKIP() )
ENDDO

TRBBE->( DBCLOSEAREA() )

RESTAREA(AAREA)

RETURN()

/*/{PROTHEUS.DOC} PLSRETMSG
RETORNA MENSAGEM DO PORTAL.
CIDIOMA = POR - PORTUGÊS  ING - INGLÊS  ESP - ESPANHOL  *****PADRÃO PORTUGÊS
@TYPE FUNCTION
@AUTHOR ROBERTO VANDERLEI
@SINCE 18.08.2015
@VERSION 1.0
/*/
FUNCTION PLSRETMSG(CTIPOPORTAL, CCODIGOMSG, CIDIOMA, CROTINA)
LOCAL NORDEM 	:= 1
LOCAL CFILTRO 	:= ""
LOCAL CCMPS 	:= "BMV->(BMV_FILIAL+"
LOCAL AMENSAGENS:= {}

DEFAULT CCODIGOMSG 	:= ""
DEFAULT CIDIOMA 	:= "POR"
DEFAULT CROTINA 	:= ""

IF EMPTY(CCODIGOMSG)

	CFILTRO := CTIPOPORTAL+CROTINA
	CCMPS += "BMV_TPPOR"

	IF !(EMPTY(CROTINA))
		CCMPS += "+BMV_ROTINA"
	ENDIF
	
	NORDEM := 2
ELSE
	CFILTRO := CCODIGOMSG
	CCMPS += "BMV_CODIGO"
	NORDEM := 1
ENDIF

CCMPS += ")"

BMV->(DBSETORDER(NORDEM))
IF (BMV->(MSSEEK(XFILIAL("BMV") + CFILTRO)))
	
	WHILE ! BMV->(EOF()) .AND. RTRIM(&(CCMPS)) == (XFILIAL("BMV") + CFILTRO)
		AADD(AMENSAGENS, {BMV->BMV_CODIGO, IF(CIDIOMA = "POR", BMV->BMV_MSGPOR, IF(CIDIOMA = "ING", BMV->BMV_MSGING, BMV->BMV_MSGESP))})
		
	BMV->(DBSKIP())
	ENDDO
	
ENDIF

RETURN AMENSAGENS

/*/{PROTHEUS.DOC} PLSGETBA1
RETORNA OS BENEFICIÁRIOS VINCULADOS A FAMILIA OU A EMPRESA
@TYPE FUNCTION
@AUTHOR KARINE RIQUENA LIMP
@SINCE 10.09.2015
@VERSION 1.0
/*/
FUNCTION PLSGETBA1(NTPPOR, CCODLWEB, CMATUSU, CSOFAM)
LOCAL CALIAS	:= "BA1"
LOCAL CALIASAUX	:= IIF( NTPPOR==2 ,"B40" ,"B49")
LOCAL CSQL 		:= ""
LOCAL CPLUSW	:= ""
DEFAULT CMATUSU := ""
DEFAULT CSOFAM := ""

// QUERY PARA RETORNAR DADOS DO F3
CSQL := "SELECT BA1_CODINT,BA1_CODEMP AS BA1CODEMP,BA1_MATRIC,BA1_TIPREG,BA1_DIGITO,BA1_CODEMP,BA1_NOMUSR," + RETSQLNAME(CALIAS) + ".R_E_C_N_O_ RECNO"
CSQL += "  FROM " + RETSQLNAME(CALIAS) + ", " + RETSQLNAME(CALIASAUX)
CSQL += " WHERE " + CALIAS + "_FILIAL = '" + XFILIAL(CALIAS) + "' "
CSQL += "   AND " + RETSQLNAME(CALIAS) 	 +	".D_E_L_E_T_ = ' ' "
CSQL += "   AND " + RETSQLNAME(CALIASAUX) +	".D_E_L_E_T_ = ' ' "
// EMPRESA
IF NTPPOR == 2
	CSQL += " AND B40_FILIAL = '" + XFILIAL(CALIAS) + "' "
	CSQL += " AND B40_CODUSR = '" + CCODLWEB + "' "
	CSQL += " AND BA1_CODINT = B40_CODINT "
	CSQL += " AND BA1_CODEMP = B40_CODEMP "
	CSQL += " AND BA1_CONEMP = B40_NUMCON "
	CSQL += " AND BA1_VERCON = B40_VERCON "
	CSQL += " AND BA1_SUBCON = B40_SUBCON "
	CSQL += " AND BA1_VERSUB = B40_VERSUB "
	// FILTRANDO A FAMILIA PELA MATRICULA DE QUALQUER UM DOS INTEGRANTES DA MESMA
	IF !EMPTY(CMATUSU)
		CSQL += " AND(BA1_CODINT + BA1_CODEMP + BA1_MATRIC) = '" + LEFT(CMATUSU, 14) + "' "
	ENDIF
	// SOMENTE FAMILIA
	IF !EMPTY(CSOFAM)
		CSQL += " AND BA1_TIPREG = '" + GETNEWPAR("MV_PLTRTIT","00") + "' "
	ENDIF
	
	// CONTRATO
	B40->( DBSETORDER(1) )//B40_FILIAL + B40_CODUSR + B40_CODINT + B40_CODEMP + B40_NUMCON + B40_VERCON + B40_SUBCON + B40_VERSUB
	B40->( MSSEEK( XFILIAL("B40") + CCODLWEB ) )
	
	WHILE !B40->( EOF() ) .AND. B40->B40_CODUSR == CCODLWEB
		IF EMPTY( B40->(B40_SUBCON+B40_VERSUB) ) .AND. AT( B40->(B40_SUBCON+B40_VERSUB),CPLUSW) == 0
			CPLUSW += "'" + B40->(B40_CODEMP+B40_NUMCON+B40_VERCON) + "',"
		ENDIF
		B40->( DBSKIP() )
	ENDDO
	// WHERE
	IF !EMPTY(CPLUSW)
		CSQL += " UNION "
		
		CSQL += "SELECT BA1_CODINT,BA1_CODEMP,BA1_MATRIC,BA1_TIPREG,BA1_DIGITO,BA1_CODEMP,BA1_NOMUSR," + RETSQLNAME(CALIAS) + ".R_E_C_N_O_ RECNO"
		CSQL += "  FROM " + RETSQLNAME(CALIAS) + ", " + RETSQLNAME(CALIASAUX)
		CSQL += " WHERE " + CALIAS + "_FILIAL = '" + XFILIAL(CALIAS) + "' "
		CSQL += "   AND " + RETSQLNAME(CALIAS) 	 +	".D_E_L_E_T_ = ' ' "
		CSQL += "   AND " + RETSQLNAME(CALIASAUX) +	".D_E_L_E_T_ = ' ' "
		
		CSQL += "   AND B40_FILIAL = '" + XFILIAL(CALIAS) + "' "
		CSQL += "   AND B40_CODUSR = '" + CCODLWEB + "' "
		CSQL += "   AND BA1_CODINT = B40_CODINT "
		// SOMENTE FAMILIA
		IF !EMPTY(CSOFAM)
			CSQL += "   AND BA1_TIPREG = '" + GETNEWPAR("MV_PLTRTIT","00") + "' "
		ENDIF
		CSQL += " AND BA1_CODEMP,BA1_CONEMP,BA1_VERCON IN(" + LEFT(CPLUSW,LEN(CPLUSW)-1) + ") "
	ENDIF
	// BENEFICIARIO
ELSEIF NTPPOR == 3
	CSQL += " AND B49_FILIAL = '" + XFILIAL(CALIAS) + "' "
	CSQL += " AND B49_CODUSR = '" + CCODLWEB + "' "
	CSQL += " AND (BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO) = B49_BENEFI "	

	// SOMENTE FAMILIA
	IF !EMPTY(CSOFAM)
		CSQL += " AND BA1_TIPREG = '" + GETNEWPAR("MV_PLTRTIT","00") + "' "
	ENDIF
ENDIF

CSQL += " ORDER BY BA1CODEMP,BA1_NOMUSR "
RETURN CSQL

/*/{PROTHEUS.DOC} PLSGETREE
RETORNA BENEFICIÁRIOS COM ACESSO AO REEMBOLSO BA1_REEWEB
@TYPE FUNCTION
@AUTHOR RENAN MARTINS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLSGETREE(NTPPOR, CCODLWEB, CMATUSU, CSOFAM, CPERMREB) 

LOCAL CALIAS	:= "BA1"
LOCAL CSQL 		:= ""

CSQL := "SELECT BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO,BA1_NOMUSR, BA1_DATINC, BA1_DATBLO"

IF BA3->(FIELDPOS('BA3_CODRAS')) > 0 
	CSQL += ",BA3_CODRAS, BA3_CODPLA"
ENDIF 

CSQL += " FROM " + RETSQLNAME(CALIAS)

IF BA3->(FIELDPOS('BA3_CODRAS')) > 0 
	CSQL += " INNER JOIN " + RETSQLNAME("BA3")
	CSQL += " ON BA3_CODINT = BA1_CODINT AND BA3_CODEMP = BA1_CODEMP AND BA3_MATRIC = BA1_MATRIC "
ENDIF 

CSQL += " WHERE " + CALIAS + "_FILIAL = '" + XFILIAL(CALIAS) + "' "

IF BA3->(FIELDPOS('BA3_CODRAS')) > 0
	CSQL += " AND " + RETSQLNAME("BA3") + ".D_E_L_E_T_ = ' ' "
ENDIF

CSQL += " AND " + RETSQLNAME(CALIAS) + ".D_E_L_E_T_ = ' ' "

IF NTPPOR == 3 .AND. CPERMREB == '1'
	
	IF ! EMPTY(CMATUSU)
		B49->( DBSETORDER(2) )
		B49->( MSSEEK(XFILIAL(CALIAS) + CMATUSU) )
	ELSE
		B49->( DBSETORDER(1) )
		B49->( MSSEEK(XFILIAL(CALIAS) + CCODLWEB) )
	ENDIF	
	
	IF B49->(FOUND())
		CSQL += " AND BA1_CODINT = '" + LEFT(B49->(B49_BENEFI), 4) + "' AND BA1_CODEMP = '" + SUBSTR(B49->(B49_BENEFI), 5,4) + "' AND BA1_MATRIC = '" + SUBSTR(B49->(B49_BENEFI),9,6)+ "'"
	ENDIF	
	
	CSQL += " AND BA1_REEWEB = '1'"

ENDIF

IF BA3->(FIELDPOS('BA3_CODRAS')) > 0
	CSQL += " GROUP BY BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO,BA1_NOMUSR, BA1_DATINC, BA1_DATBLO, BA3_CODRAS, BA3_CODPLA"
	CSQL += " ORDER BY BA3_CODPLA "
ELSE
	CSQL += " GROUP BY BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO,BA1_NOMUSR, BA1_DATINC, BA1_DATBLO"
	CSQL += " ORDER BY BA1_NOMUSR "
ENDIF

RETURN CSQL

/*/{PROTHEUS.DOC} PLSRELGUI
RETORNA RELACIONAMENTO COM GUIAS
@TYPE FUNCTION
@AUTHOR MARIO A. CAVENAGHI
@SINCE 21/03/2012
@PARAM CTABELA, CARACTER, 	ALIAS QUE SERA PESQUISADO
@PARAM NOPCAO , NUMERICO, 	POSIÇÃO DO ALIAS A RETORNAR
SENDO: 1.GUIA 2.PROCEDIMENTO 3.CRÍTICA
@PARAM LEVO   , LOGICO	, 	.F. CRÍTICAS (PADRÃO) OU .T. EVOLUÇÃO
@VERSION 1.0
/*/
FUNCTION PLSRELGUI(CTABELA, NOPCAO, LEVO)
LOCAL NFOR 		:= 0
LOCAL CRETTAB 	:= "" 
LOCAL CEVO 		:= ""

DEFAULT LEVO := .F.

//{"GUIA", "PROCEDIMENTO", "CRÍTICA", "EVOLUÇÃO"}
STATIC __ATABGUIAS := {;		//	TABELA DE GUIAS
{"BEA", "BE2", "BEG", "P"},;	//	ATENDIMENTOS (SADT)
{"BEA", "BQV", "BQZ", "E"},;	//	PRORROGAÇÃO ATENDIMENTO (EVOLUÇÃO)
{"BE4", "BEJ", "BEL", "P"},;	//	INTERNAÇÃO
{"BE4", "BQV", "BQZ", "E"},;	//	PRORROGAÇÃO INTERNAÇÃO (EVOLUÇÃO)
{"B44", "B45", "B46", "P"},;	//	AUTORIZAÇÃO DE REEMBOLSO
{"B4A", "B4C", "BEG", "P"},;	//	ANEXOS CLÍNICOS (QUIMIO/RADIO/OPME)
{"BD5", "BD6", "BDX", "P"},;	//	PROC. CONTAS (CONTAS MÉDICAS)
{"BOW", "B1N", "B14", "P"},;	//	PROTOCOLO DE REEMBOLSO
{"B53", "B72", "B67", "P"},;	// 	AUDITORIA
{"B4Q", "BQV", "BQZ", "E"} }	//	PRORROGAÇÃOD E INTERNAÇÃO NOVA

CEVO := IIF(LEVO, "E", "P")	//	EVOLUÇÃO OU PROCEDIMENTO
NOPCAO := IIF(NOPCAO > 3, 3, NOPCAO)
FOR NFOR := 1 TO LEN(__ATABGUIAS)
	IF ASCAN(__ATABGUIAS[NFOR], {|X| X == CTABELA}) > 0
		IF !LEVO .OR. __ATABGUIAS[NFOR, 4] == CEVO	//	INDEPENDE DA EVOLUÇÃO OU SÓ EVOLUÇÃO
			CRETTAB := __ATABGUIAS[NFOR, NOPCAO]
			EXIT
		ENDIF
	ENDIF
NEXT
	
RETURN(CRETTAB)

/*/{PROTHEUS.DOC} PICCPFCNPJ
GERA MÁSCARA DINÂMICA PARA CPF OU CNPJ
@AUTHOR MÁRIO A. CAVENAGHI
@SINCE 20-04-16
/*/
FUNCTION PICCPFCNPJ(CCAMPO)
LOCAL CPICT := CCONTEUDO := ""
LOCAL NPOS := NLEN := 0

DEFAULT CCAMPO := __READVAR

IF !EMPTY(CCAMPO)
	NPOS := AT("->", CCAMPO)	//	LOCALIZA A POSIÇÃO DO OPERADOR ALIAS "->", "M->" OU "MMM->"
	NPOS += IIF(NPOS > 0, 2, 1)	//	POSIÇÃO DE INÍCIO DO NOME DO CAMPO
	CPICT := SX3->(ALLTRIM(X3PICTURE(SUBSTR(CCAMPO, NPOS))))
	IF !EMPTY(CPICT)
		CCONTEUDO := ALLTRIM(&CCAMPO)
		NLEN := LEN(CCONTEUDO)
		IF     NLEN == 11 //SE 11 CARACTERES, FORMATA PARA CPF
			CPICT := "@R 999.999.999-99"
		ELSEIF NLEN == 14 //SE 14 CARACTERES, FORMATA PARA CNPJ
			CPICT := "@R 99.999.999/9999-99"
		ENDIF
		IF !EMPTY(CCONTEUDO)
			NPOS := TAMSX3(SUBSTR(CCAMPO, NPOS))[1]
			CPICT += REPLICATE("9", NPOS - NLEN)	//	 PARA MANTER O TAMANHO ORIGINAL DO CAMPO
		ENDIF
		CPICT += "%C"
	ENDIF
ENDIF

RETURN(CPICT)

/*/{PROTHEUS.DOC} PICFONE
GERA MÁSCARA DINÂMICA PARA TELEFONE FIXO OU CELULAR
@AUTHOR MÁRIO A. CAVENAGHI
@SINCE 20-04-16
/*/
FUNCTION PICFONE(CCAMPO)

LOCAL CPICT := CCONTEUDO := ""
LOCAL NPOS := NLEN := 0

DEFAULT CCAMPO := __READVAR

IF !EMPTY(CCAMPO)
	NPOS := AT("->", CCAMPO)	//	LOCALIZA A POSIÇÃO DO OPERADOR ALIAS "->", "M->" OU "MMM->"
	NPOS += IIF(NPOS > 0, 2, 1)	//	POSIÇÃO DE INÍCIO DO NOME DO CAMPO
	CPICT := SX3->(ALLTRIM(X3PICTURE(SUBSTR(CCAMPO, NPOS))))
	IF !EMPTY(CPICT)
		CCONTEUDO := ALLTRIM(&CCAMPO)
		NLEN := LEN(CCONTEUDO)
		IF     NLEN == 11	//	DDD CELULAR
			CPICT := "@R (99) 9.9999-9999"
		ELSEIF NLEN == 10	//	DDD FIXO
			CPICT := "@R (99) 9999-9999"
		ENDIF
		IF !EMPTY(CCONTEUDO)
			NPOS := TAMSX3(SUBSTR(CCAMPO, NPOS))[1]
			CPICT += REPLICATE("9", NPOS - NLEN)	//	 PARA MANTER O TAMANHO ORIGINAL DO CAMPO
		ENDIF
		CPICT += "%C"
	ENDIF
ENDIF

RETURN(CPICT)

/*/{PROTHEUS.DOC} VALFONE
GERA MÁSCARA PARA TELEFONE FIXO / CELULAR
@AUTHOR MÁRIO A. CAVENAGHI
@SINCE 20-04-16
/*/
FUNCTION VALFONE(CCAMPO)
LOCAL CCONTEUDO := ""
LOCAL LRET 		:= .T.

DEFAULT CCAMPO := __READVAR

CCONTEUDO := ALLTRIM(&CCAMPO)
IF LEN(CCONTEUDO) < 10
	LRET := .F.
ENDIF
	
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSSTATUS
RETORNA OS STATUS PARA AS GUIAS DE ATENDIMENTO
OBS: ESTA FUNÇÃO FOI CRIADA POIS O TAMANHO DO X3_CBOX ERA INSUFICIENTE
@TYPE FUNCTION
@AUTHOR THIAGO RIBAS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLSSTATUS(CALIAS)
LOCAL CSTATUS := ""

DEFAULT CALIAS := ""

IF CALIAS == "B4A"
	CSTATUS := "1=AUTORIZADA;2=AUTORIZADA PARCIALMENTE;3=NAO AUTORIZADA;6=EM ANALISE PELA AUDITORIA"
ELSEIF CALIAS $ "BEA,BE4,B4Q"
	CSTATUS := "1=AUTORIZADA;2=AUTORIZADA PARCIALMENTE;3=NAO AUTORIZADA;4=AGUARDANDO FINALIZACAO DO ATENDIMENTO;5=AGUARDANDO LIQ. TITULO A RECEBER;6=EM ANALISE PELA AUDITORIA"
ELSEIF CALIAS == "B44"
	CSTATUS := "1=AGUARDANDO FINALIZACAO ATENDIMENTO;2=APROVADO PARA PAGAMENTO;3=NAO AUTORIZADA;4=APROVADO PARCIALMENTE;5=AGUARDANDO LIQ. TITULO A PAGAR;6=EM ANALISE PELA AUDITORIA"
ENDIF
	
RETURN(CSTATUS)

/*/{PROTHEUS.DOC} PLVLDINT
VALIDAÇÃO PARA NÃO PERMITIR INCLUIR INTERAÇÕES DIRECIONADAS AO BENEFICIÁRIO
ENQUANTO EXISTIR UMA INTERAÇÃO COM O STATUS DE AGUARDANDO ANEXO
@TYPE FUNCTION
@AUTHOR THIAGO RIBAS
@SINCE 21/03/2012
@VERSION 1.0
/*/
FUNCTION PLVLDINT(NPOSFLAG, ADADPROC, CTPPUBLI, CPARECER,OLIST)
LOCAL LRET  := .T.
LOCAL LFLAG := ADADPROC[NPOSFLAG][LEN(ADADPROC[NPOSFLAG])]

IF CTPPUBLI <> "PRESTADOR"
	CPARECER := "NÃO"
ENDIF

IF LFLAG .AND. CTPPUBLI == "BENEFICIÁRIO"
	
	BBR->(DBSETORDER(1))
	IF BBR->(MSSEEK(XFILIAL("BBR") + B53->B53_NUMGUI))
		
		WHILE BBR->(BBR_CODOPE + BBR_ANOAUT + BBR_MESAUT + BBR_NUMAUT) == B53->B53_NUMGUI
			
			IF BBR->BBR_TPDIRP == "B"
				
				LRET := .F.
				MARCALINHA(NPOSFLAG,ADADPROC,.F.)
				OLIST:REFRESH()
				MSGALERT(STR0089,;//"EXISTE UMA INTERAÇÃO AGUARDANDO A RESPOSTA DO BENEFICIÁRIO. APENAS INTERAÇÕES INTERNAS SÃO PERMITIDAS.
				STR0028)//"ATENÇÃO"
				
				EXIT
			ENDIF
			
			BBR->(DBSKIP())
		ENDDO
	ENDIF
ENDIF

RETURN LRET

/*/{PROTHEUS.DOC} VLDBLQFUT
VALIDA BLOQUEIO FUTURO DE UMA RDA NO PORTAL
@AUTHOR LUCAS NONATO
@SINCE 05/08/16
/*/
FUNCTION VLDBLQFUT(CCODRDA)
LOCAL LRET := .F.
LOCAL CSQL := ""

CSQL += " SELECT BSO_CODIGO "
CSQL += "   FROM " + RETSQLNAME("BSO")
CSQL += "  WHERE BSO_FILIAL = '" + XFILIAL('BSO') + "' "
CSQL += "    AND BSO_CODUSR = '" + CCODRDA + "' "
CSQL += "    AND D_E_L_E_T_ = ' ' "

DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CHANGEQUERY(CSQL)),"BSOTMP",.F.,.T.)

WHILE !BSOTMP->(EOF())
	
	IF A360CHEBLO(BSOTMP->(BSO_CODIGO),DDATABASE,.T.,TIME(),.T.)
		
		LRET := .T.
		EXIT
	ENDIF
	
	BSOTMP->(DBSKIP())
ENDDO

BSOTMP->(DBCLOSEAREA())

RETURN LRET


/*/{PROTHEUS.DOC} PLSTRANCH
BUSCA EM UMA STRING VOGAIS COM ACENTUAÇÃO E AS SUBSTITUI POR PELAS NORMAIS

@TYPE FUNCTION
@AUTHOR VICTOR.SILVA
@SINCE 23/08/2016
@VERSION 1.0
@PARAM CSTRING, CARACTER, STRING COM O CONTEUDO A SER TRANSFORMADO
@RETURN CSTRING, STRING FORMATADA
/*/
FUNCTION PLSDELTRA(CSTRING)
CSTRING := STRTRAN(CSTRING,"Ç","C")
CSTRING := STRTRAN(CSTRING,"Á","A")
CSTRING := STRTRAN(CSTRING,"Ã","A")
CSTRING := STRTRAN(CSTRING,"À","A")
CSTRING := STRTRAN(CSTRING,"Â","A")
CSTRING := STRTRAN(CSTRING,"É","E")
CSTRING := STRTRAN(CSTRING,"È","E")
CSTRING := STRTRAN(CSTRING,"Ê","E")
CSTRING := STRTRAN(CSTRING,"Í","I")
CSTRING := STRTRAN(CSTRING,"Ì","I")
CSTRING := STRTRAN(CSTRING,"Ó","O")
CSTRING := STRTRAN(CSTRING,"Ò","O")
CSTRING := STRTRAN(CSTRING,"Õ","O")
CSTRING := STRTRAN(CSTRING,"Ô","O")
CSTRING := STRTRAN(CSTRING,"Ú","U")
CSTRING := STRTRAN(CSTRING,"Ù","U")
CSTRING := STRTRAN(CSTRING,"Á","A")
CSTRING := STRTRAN(CSTRING,"À","A")
CSTRING := STRTRAN(CSTRING,"Â","A")
CSTRING := STRTRAN(CSTRING,"Ã","A")
CSTRING := STRTRAN(CSTRING,"É","E")
CSTRING := STRTRAN(CSTRING,"È","E")
CSTRING := STRTRAN(CSTRING,"Ê","E")
CSTRING := STRTRAN(CSTRING,"Í","I")
CSTRING := STRTRAN(CSTRING,"Ì","I")
CSTRING := STRTRAN(CSTRING,"Ó","O")
CSTRING := STRTRAN(CSTRING,"Ò","O")
CSTRING := STRTRAN(CSTRING,"Õ","O")
CSTRING := STRTRAN(CSTRING,"Ô","O")
CSTRING := STRTRAN(CSTRING,"Ú","U")
CSTRING := STRTRAN(CSTRING,"Ç","C")
	
RETURN(CSTRING)

/*/{PROTHEUS.DOC} PLSPREESP
RETORNA A ESPECIALIDADE PRINCIPAL DO PRESTADOR OU AS ESPECIALIDADES DO MESMO CASO O PARAMETRO DE LOCAL DE ATENDIMENTO NÃO FOR INFORMADO

@TYPE FUNCTION
@AUTHOR VICTOR.SILVA
@SINCE 26/08/2016
@VERSION 1.0
@PARAM CCODRDA, CARACTER, CODIGO DO PRESTADOR
@PARAM CCODOPE, CARACTER, CODIGO DA OPERADORA
@PARAM CLOCESP, CARACTER, CODIGO DO LOCAL DE ATENDIMENTO
@PARAM CDATREF, CARACTER, DATA DE REFERENCIA PARA BLOQUEIO NO FORMATO "AAAAMMDD"
@RETURN XRET, 	CLOCESP INFORMADO: CARACTER COM A ESPECIALIDADE PRINCIPAL/CLOCESP NAO INFORMADO: ARRAY COM AS ESPECIALIDADES PRINCIPAIS DE CADA LOCAL DE ATENDIMENTO
/*/
FUNCTION PLSPREESP(CCODRDA,CCODOPE,CLOCESP,CDATREF)
LOCAL CSQLESPPRI 	:= GETNEXTALIAS()
LOCAL XRET				:= NIL
LOCAL LCONLOC 		:= .F.
LOCAL LCONBLC			:= .F.

DEFAULT CLOCESP		:= ""
DEFAULT CDATREF		:= ""

LCONLOC := !EMPTY(CLOCESP)
LCONBLC	:= !EMPTY(CDATREF)

IF VALTYPE(CDATREF) == "D"
	CDATREF	:= DTOS(CDATREF)
ENDIF

CWHERE := "%"
IF LCONLOC
	CWHERE += "BAX_ESPPRI	= 	'1' AND "
	CWHERE += "BAX_CODLOC = '" + CLOCESP + "' AND "
	IIF(LCONBLC,CWHERE += "(BAX_DATBLO = ' ' OR (BAX_DATBLO <> ' ' AND BAX_DATBLO > '" + CDATREF + "')) AND ",NIL)
ELSE
	IIF(LCONBLC,CWHERE += "(BAX_DATBLO = ' ' OR (BAX_DATBLO <> ' ' AND BAX_DATBLO > '" + CDATREF + "')) AND ",NIL)
ENDIF
CWHERE += "%"

BEGINSQL ALIAS CSQLESPPRI
	SELECT
	BAX_CODESP,BAX_CODLOC,BAX_DATBLO
	FROM
	%TABLE:BAX% BAX
	WHERE
	BAX_FILIAL	= 	%XFILIAL:BAX% AND
	BAX_CODINT	= 	%EXP:CCODOPE% AND
	BAX_CODIGO	= 	%EXP:CCODRDA% AND
	%EXP:CWHERE%
	BAX.%NOTDEL%
	ORDER BY BAX_CODLOC
ENDSQL

IF !(CSQLESPPRI)->(EOF())
	IF LCONLOC
		XRET := (CSQLESPPRI)->BAX_CODESP
	ELSE
		XRET := {}
		//ALIMENTANDO O ARRAY COM OS DADOS DAS ESPECIALIDADES ENCONTRADAS NA CONSULTA
		WHILE !(CSQLESPPRI)->(EOF())
			/*
			ESTRUTURA DO AESP
			[1] - CODIGO DA ESPECIALIDADE
			[2] - CODIGO DO LOCAL DE ATENDIMENTO
			[3] - FLAG INFORMANDO SE A ESPECIALIDADE ESTA BLOQUEADA (0-NAO/1-SIM)
			*/
			AADD(XRET,{	(CSQLESPPRI)->BAX_CODESP,;
				(CSQLESPPRI)->BAX_CODLOC,;
				IIF(LCONBLC,"0",IIF(((EMPTY((CSQLESPPRI)->BAX_DATBLO)) .OR. (!EMPTY((CSQLESPPRI)->BAX_DATBLO) .AND. (CSQLESPPRI)->BAX_DATBLO > CDATREF)),"0","1"))})
			
			//PROXIMO RESULTADO
			(CSQLESPPRI)->(DBSKIP())
		ENDDO
	ENDIF
ENDIF

(CSQLESPPRI)->(DBCLOSEAREA())

RETURN XRET

/*/{PROTHEUS.DOC} PLSFREARR
LIBERA ESPACO UTILIZADO EM MEMORIA PELO ENDERECO DO ARRAY INFORMADO NO PARAMETRO

@TYPE FUNCTION
@AUTHOR VICTOR.SILVA
@SINCE 17/08/2016
@VERSION 1.0
/*/
FUNCTION PLSFREARR(AARRAY)

IF VALTYPE(AARRAY) == "A"
	ASIZE(AARRAY,0)
	AARRAY := NIL
	AARRAY := {}
ENDIF

RETURN

/*/{PROTHEUS.DOC} PLSEXMCTB
EXCLUI MOVIMENTO CONTABIL

@AUTHOR  PLS TEAM
@VERSION P12
@SINCE   25.07.16
/*/
FUNCTION PLSEXMCTB(CTIPO, CCHAVE, LWEB)
LOCAL AAREABD7 		:= BD7->(GETAREA())
LOCAL LRET			:= .T.

LOCAL LBD7_DTPRO	:= BD7->(FIELDPOS('BD7_DTPRO')) > 0
LOCAL LBD7_CHVPRO	:= BD7->(FIELDPOS('BD7_CHVPRO')) > 0
LOCAL LBD7_DTLA		:= BD7->(FIELDPOS('BD7_DTLA')) > 0
LOCAL LBD7_CHVLA	:= BD7->(FIELDPOS('BD7_CHVLA')) > 0

DEFAULT LWEB		:= .F.

//SE NAO EXISTE NAO EXECUTA NADA
IF !LBD7_DTPRO .OR. !LBD7_CHVPRO .OR. !LBD7_DTLA .OR. !LBD7_CHVLA
	LRET := .F.
ENDIF

IF LRET 
	
	//VERIFICA SE EXISTE ALGUM REGISTRO CONTABILIZADO
	IF PLCHKCTB(CTIPO, CCHAVE)
	
		BD7->(DBSETORDER(1)) //BD7_FILIAL+BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV+BD7_SEQUEN+BD7_CODUNM+BD7_NLANC
		
		//RETORNO DE FASE	
		IF  CTIPO == "A" .OR. CTIPO == "T"
			
			IF !LWEB 
				LRET := MSGYESNO("CONFIRMA A EXCLUSÃO DO MOVIMENTO CONTÁBIL?")
			ENDIF
			
		ENDIF
			
		IF LRET
		
			LRET := SETEMOVCTB( CTIPO, CCHAVE )
			
		ENDIF	
		
	ENDIF	
	
ENDIF

RESTAREA(AAREABD7)
	
RETURN(LRET)

/*/{PROTHEUS.DOC} SETEMOVCTB
VERIFICA SE EXISTE REGISTRO CONTABILIZADO DE CUSTO
@AUTHOR  PLS TEAM
@VERSION P12
@SINCE   20.01.17
/*/
FUNCTION PLCHKCTB(CTIPO,CCHAVE)
LOCAL LRET := .F.
 


IF GETNEWPAR("MV_PLNOCB",.F.)
	//DE FORMA PALIATIVA FOI CRIADO ESSE PARAMENTRO POIS PRECISAMOS DESABILITAR O CONTROLE PARA QUE O SISTEMA IMPESSA 
	// A CONTABILIZAÇÃO DAS GUIAS JA CONTABILIZADA, ESSE ITEM FOI CRIADO PARA CEMIG NA NERSAO 12.7  E NO FUTURO DEVERA SER RETIRADO
	RETURN(LRET) 
ENDIF

SIX->(DBSETORDER(1))

//ALTERACAO GUIA EM DIGITACAO
IF CTIPO  == 'D'

	IF SIX->(MSSEEK("BD7G"))
		
		BD7->(DBSETORDER(16)) //BD7_FILIAL+BD7_LAPRO+BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV+BD7_SEQUEN+BD7_CODUNM+BD7_NLANC
		LRET := BD7->( MSSEEK( XFILIAL('BD7') + 'S' + CCHAVE) ) .AND. !EMPTY(BD7->BD7_CHVPRO) // !EMPTY(BD7->BD7_CHVPRO) PARA CLIENTES QUE NAO IMPLANTO A NOVA CTB
		
	ENDIF
	
//ATIVA E PRONTA
ELSEIF CTIPO  == 'A'

	IF SIX->(MSSEEK("BD7H"))
		
		BD7->(DBSETORDER(17)) //BD7_FILIAL+BD7_LA+BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV+BD7_SEQUEN+BD7_CODUNM+BD7_NLANC
		LRET := BD7->( MSSEEK( XFILIAL('BD7') + 'S' + CCHAVE) ) .AND. !EMPTY(BD7->BD7_CHVLA)
		
	ENDIF
	
//DIGITACAO E ATIVA E PRONTA	
ELSEIF CTIPO  == 'T'

	IF SIX->(MSSEEK("BD7G"))
		
		BD7->(DBSETORDER(16)) //BD7_FILIAL+BD7_LAPRO+BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV+BD7_SEQUEN+BD7_CODUNM+BD7_NLANC
		LRET := BD7->( MSSEEK( XFILIAL('BD7') + 'S' + CCHAVE) ) .AND. (!EMPTY(BD7->BD7_CHVPRO) .OR. !EMPTY(BD7->BD7_CHVLA) )
		
	ENDIF
	
	IF SIX->(MSSEEK("BD7H")) .AND. !LRET
		
		BD7->(DBSETORDER(17)) //BD7_FILIAL+BD7_LA+BD7_CODOPE+BD7_CODLDP+BD7_CODPEG+BD7_NUMERO+BD7_ORIMOV+BD7_SEQUEN+BD7_CODUNM+BD7_NLANC
		LRET := BD7->( MSSEEK( XFILIAL('BD7') + 'S' + CCHAVE) ) .AND. (!EMPTY(BD7->BD7_CHVPRO) .OR. !EMPTY(BD7->BD7_CHVLA) )
		
	ENDIF


ENDIF	
	  
RETURN(LRET)

/*/{PROTHEUS.DOC} SETEMOVCTB
REALIZA A EXCLUSAO DO MOVIMENTO CONTABIL LIGADO A UM LANCAMENTO DA BD7

@AUTHOR  PLS TEAM
@VERSION P12
@SINCE   25.07.16
/*/
STATIC FUNCTION SETEMOVCTB( CTIPO, CCHAVE )
LOCAL NI		:= 0
LOCAL NOPC	 	:= 5
LOCAL NPOS		:= 0
LOCAL NTAMDATA 	:= CT2->(TAMSX3("CT2_DATA")[1])
LOCAL NTAMLOTE	:= CT2->(TAMSX3("CT2_LOTE")[1])
LOCAL NTAMSBLOTE:= CT2->(TAMSX3("CT2_SBLOTE")[1])
LOCAL NTAMDOC	:= CT2->(TAMSX3("CT2_DOC")[1])
LOCAL CLOTE		:= ''
LOCAL CSUBLOTE	:= ''
LOCAL CDOC		:= ''
LOCAL CCHVCTB	:= ''
LOCAL CCHVCTBC	:= ''
LOCAL AITENS 	:= {}
LOCAL ACAB 	 	:= {}
LOCAL DDATALANC	:= CTOD('')
LOCAL LRET		:= .T.
LOCAL LATU		:= .F.
LOCAL LATUC		:= .F.

PRIVATE LMSERROAUTO := .F.

IF !EMPTY(CCHAVE)

	IF BD7->( MSSEEK( XFILIAL('BD7') + CCHAVE) )
	
		WHILE !BD7->(EOF()) .AND. ALLTRIM(XFILIAL('BD7') + CCHAVE) $ ALLTRIM( BD7->&(INDEXKEY() ) )

			LATU 	:= .F.
			LATUC 	:= .F.
			
			//ALTERACAO DA GUIA
			IF CTIPO == "D" 
			
				IF !EMPTY(BD7->BD7_CHVPRO) .AND. CCHVCTB != BD7->BD7_CHVPRO
					CCHVCTB := BD7->BD7_CHVPRO
					LATU 	:= .T.
				ENDIF
				
			//RETORNO DE FASE		
			ELSEIF CTIPO == "A"  
	
				IF !EMPTY(BD7->BD7_CHVLA) .AND. CCHVCTB != BD7->BD7_CHVLA
					CCHVCTB := BD7->BD7_CHVLA
					LATU 	:= .T.
				ENDIF
				
			//TRATAMENTO PARA PROVISAO E CUSTO
			ELSEIF CTIPO == "T"  

				IF !EMPTY(BD7->BD7_CHVPRO) .AND. CCHVCTB != BD7->BD7_CHVPRO
					CCHVCTB := BD7->BD7_CHVPRO
					LATU := .T.
				ENDIF
	
				IF !EMPTY(BD7->BD7_CHVLA) .AND. CCHVCTB != BD7->BD7_CHVLA .AND. CCHVCTBC != BD7->BD7_CHVLA
					CCHVCTBC := BD7->BD7_CHVLA
					LATUC := .T.
				ENDIF
				
			ENDIF
			
			//EXCLUI MOVIMENTO
			IF LATU
			
				DDATALANC 	:= STOD(LEFT(CCHVCTB, NTAMDATA))
				CLOTE		:= SUBSTR(CCHVCTB, NTAMDATA + 1, NTAMLOTE)
				CSUBLOTE	:= SUBSTR(CCHVCTB, (NTAMDATA + NTAMLOTE)+ 1, NTAMSBLOTE)
				CDOC		:= SUBSTR(CCHVCTB, (NTAMDATA + NTAMLOTE + NTAMSBLOTE) + 1, NTAMDOC)
				ACAB		:= {}
				
				AADD(ACAB, {'DDATALANC', DDATALANC , NIL})
				AADD(ACAB, {'CLOTE', 	 CLOTE, NIL})
				AADD(ACAB, {'CSUBLOTE',  CSUBLOTE, NIL})
				AADD(ACAB, {'CDOC', 	 CDOC, NIL})
				
				MSEXECAUTO({|X, Y, Z| CTBA102(X, Y, Z)}, ACAB, AITENS, NOPC)
				
				IF LMSERROAUTO
					MOSTRAERRO()
					RETURN .F.
				ENDIF
				
			ENDIF
			
			//EXCLUI MOVIMENTO
			IF LATUC
			
				DDATALANC 	:= STOD(LEFT(CCHVCTBC, NTAMDATA))
				CLOTE		:= SUBSTR(CCHVCTBC, NTAMDATA + 1, NTAMLOTE)
				CSUBLOTE	:= SUBSTR(CCHVCTBC, (NTAMDATA + NTAMLOTE)+ 1, NTAMSBLOTE)
				CDOC		:= SUBSTR(CCHVCTBC, (NTAMDATA + NTAMLOTE + NTAMSBLOTE) + 1, NTAMDOC)
				ACAB		:= {}
				
				AADD(ACAB, {'DDATALANC', DDATALANC , NIL})
				AADD(ACAB, {'CLOTE', 	 CLOTE, NIL})
				AADD(ACAB, {'CSUBLOTE',  CSUBLOTE, NIL})
				AADD(ACAB, {'CDOC', 	 CDOC, NIL})
				
				MSEXECAUTO({|X, Y, Z| CTBA102(X, Y, Z)}, ACAB, AITENS, NOPC)
				
				IF LMSERROAUTO
					MOSTRAERRO()
					RETURN .F.
				ENDIF
				
			ENDIF	
			
		BD7->(DBSKIP())
		ENDDO
		
	ENDIF
	
ENDIF

RETURN(LRET)

/*/{PROTHEUS.DOC} PLPREESPBL
VERIFICA SE A ESPECIALIDADE ENVIADA ESTA BLOQUEADA NO CADASTRO DO PRESTADOR
COM BASE NA DATA INFORMADA
@TYPE FUNCTION
@AUTHOR VICTOR.SILVA
@SINCE 14/09/2016

/*/
FUNCTION PLPREESPBL(CCODPRE,CCODINT,CCODLOC,CCODESP,DDATREF)
LOCAL LRET		:= .T.
LOCAL NIDX		:= 0
LOCAL CCHAVE	:= ""

DEFAULT CCODINT	:= PLSINTPAD()
DEFAULT CCODLOC	:= ""
DEFAULT CCODESP	:= ""
DEFAULT DDATREF	:= DDATABASE

//SE A ESPECIALIDADE CHEGAR EM BRANCO, NAO PRECISA FAZER A VALIDACAO
IF EMPTY(CCODESP)
	RETURN .F.
ENDIF

//DEFINE INDICE DE PESQUISA CONFORME PARAMETROS
IF EMPTY(CCODLOC)
	NIDX		:= 3 //BAX_FILIAL+BAX_CODINT+BAX_CODESP+BAX_CODIGO
	CCHAVE	:= CCODINT + CCODESP + CCODPRE
ELSE
	NIDX		:= 2 //BAX_FILIAL+BAX_CODINT+BAX_CODLOC+BAX_CODESP+BAX_CODIGO
	CCHAVE	:= CCODINT + CCODLOC + CCODESP + CCODPRE
ENDIF

//BUSCANDO A ESPECIALIDADE NO PRESTADOR
DBSELECTAREA("BAX")
BAX->(DBSETORDER(NIDX))
IF BAX->(MSSEEK(XFILIAL("BAX") + CCHAVE))
	IF (EMPTY(BAX->BAX_DATBLO) .OR. (!EMPTY(BAX->BAX_DATBLO) .AND. BAX->BAX_DATBLO > DDATREF))
		LRET := .F.
	ENDIF
	//SE NAO ACHOU A ESPECIALIDADE NAO PRECISA VALIDAR
ELSE
	LRET	:= .F.
ENDIF

RETURN LRET

/*/{PROTHEUS.DOC} PLSTXADM
RETORNA O PERCENTUAL DA TAXA ADMINISTRATIVA
@AUTHOR PLS TEAM
@SINCE 19/10/2016
@VERSION 1.0
/*/
FUNCTION PLSTXADM(CTIPPRE,CCODPAD,CCODPRO,CCODESP,NVLRAPR,NUSREA,CFINATE,CCODRDA,CRDAEDI,ADADUSR,DDATANALISE)
LOCAL NNIVEIS		:= 0
LOCAL NPRTXPAG		:= 0
LOCAL CCDPRODUTO	:= IIF(LEN(ADADUSR) >= 11, ADADUSR[11], "")
LOCAL CMODPAG		:= IIF(LEN(ADADUSR) >= 48, ADADUSR[48], "")
LOCAL CREGGOP 		:= IIF(LEN(ADADUSR) >= 63, ADADUSR[63], "")
LOCAL CGRUOPE 		:= IIF(LEN(ADADUSR) >= 64, ADADUSR[64], "")
LOCAL ARETFUN		:= {}
LOCAL ANIVEIS 		:= {}

//QUANDO FOR INTERCAMBIO
IF CTIPPRE == GETNEWPAR("MV_PLSTPIN","OPE")
	
	ANIVEIS := PLSESPNIV(CCODPAD)
	NNIVEIS := (ANIVEIS[1]+1)
	
	//PAGAMENTO
	// 1 - PAGAMENTO
	// 2 - RECEBIMENTO
	ARETFUN := PLSGRUOPE("1",BAU->BAU_CODOPE,DDATANALISE,NNIVEIS,ANIVEIS,CCODPRO,CMODPAG,CCODPAD,CCODESP,"",;
						 CCDPRODUTO,NVLRAPR,"",NIL, .T., CFINATE, CCODRDA, CRDAEDI, NIL, NIL, .T.)
	
	NPRTXPAG := ARETFUN[4]
	
//REDE DE ATENDIMENTO NORMAL
ELSEIF BAW->( FIELDPOS('BAW_TXADMT') ) > 0
	
	BAW->( DBSETORDER(1) ) //BAW_FILIAL+BAW_CODIGO+BAW_CODINT
	
	IF BAW->( MSSEEK( XFILIAL("BAW") + BAU->BAU_CODIGO + PLSINTPAD() ) )
		
		WHILE !BAW->( EOF() ) .AND. BAW->(BAW_FILIAL+BAW_CODIGO+BAW_CODINT) == XFILIAL("BAW") + BAU->BAU_CODIGO + PLSINTPAD()
			
			IF PLSINTVAL("BAW","BAW_VIGINI","BAW_VIGFIN",DDATABASE)
				
				NPRTXPAG := BAW->BAW_TXADMT
				
				EXIT
			ENDIF
			
		BAW->(DBSKIP())
		ENDDO
		
	ENDIF
	
ENDIF
	
RETURN NPRTXPAG

/*/{PROTHEUS.DOC} PLSPEINPT
RETORNA O PERCENTUAL DO INSS PATRONAL
@AUTHOR PLS TEAM
@SINCE 19/10/2016
@VERSION 1.0
/*/
FUNCTION PLSPEINPT()
LOCAL NPERINSS := 0
LOCAL AAREASA2 := SA2->(GETAREA())
LOCAL AAREASED := SED->(GETAREA())

LOCAL LA2_CALCINP := SA2->( FIELDPOS('A2_CALCINP') ) > 0
LOCAL LED_CALCINP := SED->( FIELDPOS('ED_CALCINP') ) > 0
LOCAL LED_PERCINP := SED->( FIELDPOS('ED_PERCINP') ) > 0

IF LA2_CALCINP .AND. LED_CALCINP .AND. LED_PERCINP .AND. !EMPTY( BAU->(BAU_CODSA2 + BAU_LOJSA2) )

	SA2->(DBSETORDER(1)) //A2_FILIAL+A2_COD+A2_LOJA
	IF SA2->( MSSEEK( XFILIAL('SA2') + BAU->(BAU_CODSA2 + BAU_LOJSA2) ) ) .AND. SA2->A2_CALCINP == '1' .AND. !EMPTY(SA2->A2_NATUREZ)
	
		SED->(DBSETORDER(1)) //ED_FILIAL+ED_CODIGO
		IF SED->( MSSEEK( XFILIAL('SED') + SA2->A2_NATUREZ ) ) .AND. SED->ED_CALCINP == '1'
			NPERINSS :=  SED->ED_PERCINP
		ENDIF
		
	ENDIF

ENDIF

SA2->( RESTAREA(AAREASA2) )
SED->( RESTAREA(AAREASED) )

RETURN NPERINSS

/*/{PROTHEUS.DOC} PLSBAWRD()
VERIFICA SE O TIPO DA RDA E OPERADORA

@TYPE FUNCTION
@AUTHOR PLS TEAM
@SINCE 14.12.2016
@VERSION 1.0
/*/
FUNCTION PLSBAWRD()
LOCAL LRET := BAU->BAU_TIPPRE != GETNEWPAR("MV_PLSTPIN","OPE")
RETURN(LRET)

/*/{PROTHEUS.DOC} PLSINTGEN
ROTINA DE INTERAÇÃO GENÉRICA
@AUTHOR FÁBIO SIQUEIRA DOS SANTOS
@SINCE 24/11/2016
@VERSION 1.0
@PARAM 
@RETURN BOOLEAN, RETORNA VERDADEIRO 
@SEE PARA MAIORES DETALHES SOBRE A AUDITORIA GENÉRICA E SUAS FUNCIONALIDADES, PESQUISAR NO TDN: HTTP://TDN.TOTVS.COM/PAGES/VIEWPAGE.ACTION?PAGEID=200913455
/*/
STATIC FUNCTION PLSINTGEN(CTPGUIA)
LOCAL CALIASITE		:= ""
LOCAL CCHAVEITE		:= ""
LOCAL ACHVIND		:= {}
LOCAL CCHAVE		:= ""
LOCAL NPROC			:= 0
LOCAL NFOR			:= 0
LOCAL O790C 		:= PLSA790C():NEW()
LOCAL ACABPRO		:= {}
LOCAL ADADPRO		:= {}
LOCAL ATRBPRO		:= {}
LOCAL CSETOR 		:= ""
LOCAL CALTPUBL		:= ""
LOCAL CCODOPE 		:= ""
LOCAL NLINHAINI		:= 0
LOCAL NCOLUNAINI	:= 0
LOCAL ADADPROC		:= {}
LOCAL ODLG
LOCAL OLIST
LOCAL CCADASTRO		:= SPACE(03)
LOCAL ABUTTONS		:= {}
LOCAL CF3			:= 'BBP'
LOCAL CCAMPOMOT		:= SPACE(03)
LOCAL NPOSTAB		:= 0
LOCAL NPOSPROC		:= 0
LOCAL NPOSDESC		:= 0
LOCAL NPOSSEQUEN	:= 0
LOCAL LCHECK		:= .F.
LOCAL NOPCA			:= 0
LOCAL ADADH			:= {}
LOCAL ASIZE			:= {}
LOCAL CNOMOPE		:= ""
LOCAL CALIASPAI		:= B53->B53_ALIMOV
LOCAL NCONT			:= 0
LOCAL BCOL			:= ""

//³ATUALIZA INFORMACOES DA CLASSE
O790C:SETATUPCLASS()

CALIASITE := SUBSTR(B53->B53_ALIITE,1,3)
SIX->(DBSETORDER(1))
SIX->(DBSEEK(B53->B53_ALIITE))
CCHAVEITE := SIX->CHAVE

&(CALIASITE)->( DBSETORDER(VAL(SUBSTR(B53->B53_ALIITE,4,LEN(B53->B53_ALIITE)))))
&(CALIASITE)->(DBSEEK(XFILIAL(CALIASITE)+ALLTRIM(B53->B53_NUMGUI)))

ACHVIND  := PLSINDGEN(1,.T.,O790C) 

STORE HEADER CALIASITE TO ACABPRO FOR .T.
STORE COLS CALIASITE TO ADADPRO FROM ACABPRO VETTRAB ATRBPRO WHILE !&(CALIASITE)->(EOF()) .AND. &(CALIASITE)->(&(ACHVIND)) == XFILIAL(CALIASITE)+ALLTRIM(B53->B53_NUMGUI) 

/*BUSCANDO O SETOR E A PERMISSÃO PARA ALTERAR O PÚBLICO*/
BX4->(DBSETORDER(1))
CCHAVE := XFILIAL("BX4") + RETCODUSR() + PLSINTPAD()

IF BX4->(DBSEEK(CCHAVE))
	CSETOR 		:= BX4->BX4_CODDEP
	CALTPUBL	:= ALLTRIM(BX4->BX4_ALTPUB)
	CCODOPE 	:= BX4->BX4_CODOPE
ENDIF

ASIZE := MSADVSIZE()

NLINHAINI := ASIZE[1]  + 005  //005
NCOLUNAINI := ASIZE[2]  + 005 //035

ASIZE[3] := ASIZE[3]
ASIZE[4] := ROUND(ASIZE[4] * 0.92, 0)
ASIZE[5] := ROUND(ASIZE[5] * 0.57/*0.92*/, 0)
ASIZE[6] := ROUND(ASIZE[6] , 0) //* 0.82
ASIZE[7] := ROUND(ASIZE[7] * 0.92, 0)

DEFINE MSDIALOG ODLG TITLE CCADASTRO FROM ASIZE[7],0 TO ASIZE[6]*0.9,ASIZE[5] OF OMAINWND PIXEL

@ NCOLUNAINI, NLINHAINI SAY "PROCEDIMENTOS" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC

NPOSAUD := ASCAN( ACABPRO,{ |X| X[2] == CALIASITE+"_AUDITO"} )
NPOSSEQ := ASCAN( ACABPRO,{ |X| X[2] == CALIASITE+"_SEQUEN"} )

FOR NPROC := 1 TO LEN(ADADPRO) //COM BASE NA POSIÇÃO DO CABEÇALHO, BUSCA O CONTEÚDO.
	IF ADADPRO[NPROC,NPOSAUD] == "1" 
		AADD(ADADPROC, ADADPRO[NPROC])
	ENDIF
NEXT NPROC

OLIST := TCBROWSE():NEW(NCOLUNAINI + 010,NLINHAINI,/*395*/ASIZE[5]*0.49 ,50 ,,;
	{}, {40,40,40},;
	ODLG,,,,, {||},, ,,,,,.F.,,.T.,,.F.,,, )

ADD COLUMN TO OLIST BITMAP DATA { || LOADBITMAP( GETRESOURCES(), IIF(!ADADPROC[OLIST:NAT,LEN(ADADPROC[OLIST:NAT])] ,EVAL({|| LCHECK := .F.,"LBNO"}),"LBOK" ) )} TITLE "" WIDTH 015 ALIGN CENTERED NOHILITE

FOR NCONT := 1 TO LEN(ACABPRO)
	BCOL :=  "{||OLIST:ADDCOLUMN(TCCOLUMN():NEW(ACABPRO["+ALLTRIM(STR(NCONT))+",1],{|| ADADPROC[OLIST:NAT,"+ALLTRIM(STR(NCONT))+"] },+ACABPRO["+ALLTRIM(STR(NCONT))+",3],NIL,NIL,NIL,ACABPRO["+ALLTRIM(STR(NCONT))+",4],.F.,.F.,NIL,NIL,NIL,.F.,NIL) ) }"
	EVAL( &BCOL )
NEXT

OLIST:SETARRAY(ADADPROC)

OLIST:BLDBLCLICK := { || MARCALINHA(OLIST:NAT,ADADPROC,LCHECK) , OLIST:REFRESH() }

@ NCOLUNAINI + 70, NLINHAINI SAY "INCLUIR INTERAÇÃO" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC
OPANEL  := TPANEL():NEW( NCOLUNAINI + 80, NLINHAINI, "",ODLG, , .F., , , , ASIZE[5]*0.48, 094, .F., .F. )//*0.49

@ 010, 010 SAY OSAY3 PROMPT "PÚBLICO:" SIZE 025, 007 OF OPANEL PIXEL
@ 017, 010 MSCOMBOBOX OPARECER VAR CTPPUBLICO ITEMS {"", "BENEFICIÁRIO", "PRESTADOR" } SIZE 055, 010 OF OPANEL;
	WHEN CALTPUBL = '1' .AND. CTPGUIA = 'AD' .AND. ALLTRIM(FUNNAME()) != "TMKA271"; 
	ON CHANGE IF(!PLVLDINT(OLIST:NAT, ADADPROC, CTPPUBLICO, @CPARECER, OLIST),CTPPUBLICO := "",)  PIXEL OF OPANEL

@ 010, 070 SAY OSAY4 PROMPT "RESPOSTA PREST." SIZE 025, 007 OF OPANEL PIXEL
@ 017, 070 MSCOMBOBOX OPARECER VAR CPARECER ITEMS {"NÃO","SIM"}  SIZE 030, 010 OF OPANEL;
	WHEN /*.T.*/ CTPPUBLICO = "PRESTADOR"  PIXEL OF OPANEL

@ 010, 105 SAY OSAY5 PROMPT "MOTIVO PADRÃO:" SIZE 040, 007 OF OPANEL PIXEL
@ 017, 105 MSGET CCAMPOMOT VAR CCADASTRO F3 CF3 VALID VALMOTPAD(CCADASTRO, 'I') SIZE 030,010 PIXEL OF OPANEL

@ 017, 135 MSGET CDESMOTPAD /*VAR CCADASTRO PICTURE "@!" WHEN .T.*/WHEN .F. SIZE ASIZE[5]*0.23 /*180*/,010 PIXEL OF OPANEL

@ 040,010 SAY "OBS.:" SIZE 100,010 PIXEL OF OPANEL //DESC. ESPEC
@ 047,010 GET COBSMOTPAD MEMO SIZE 200,040 PIXEL OF OPANEL

@ NCOLUNAINI + 195, NLINHAINI SAY "HISTÓRICO DE INTERAÇÕES" SIZE 100,010 PIXEL OF ODLG //DESC. ESPEC

OLISTHIST := TCBROWSE():NEW(NCOLUNAINI + 210,NLINHAINI,ASIZE[5]*0.49 ,50 ,,;
	{},{40,40},;
	ODLG,,,,, {||},, ,,,,,.F.,,.T.,,.F.,,, )

OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('SETOR',{ || ADADH[OLISTHIST:NAT, 1] },"@C",NIL,NIL,NIL,040,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('DATA INTERAÇÃO'  ,{ || ADADH[OLISTHIST:NAT, 2] },"@C",NIL,NIL,NIL,045,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('HORA INTERAÇÃO'  ,{ || ADADH[OLISTHIST:NAT, 6] },"@C",NIL,NIL,NIL,045,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('USUÁRIO INTERAÇÃO'  ,{ || ADADH[OLISTHIST:NAT, 7] },"@C",NIL,NIL,NIL,045,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('MOT. PADRÃO'   ,{ || ADADH[OLISTHIST:NAT, 3] },"@C",NIL,NIL,NIL,070,.F.,.F.,NIL,NIL,NIL,.F.,NIL))
OLISTHIST:ADDCOLUMN(TCCOLUMN():NEW('OBSERVAÇÃO'   ,{ || ADADH[OLISTHIST:NAT, 4] },"@C",NIL,NIL,NIL,080,.F.,.F.,NIL,NIL,NIL,.F.,NIL))

IF CTPGUIA = 'AD'
	OLISTHIST:BLDBLCLICK := { || IF( LEN(ADADH) > 0, PLSAVISINT(ADADH[OLISTHIST:NAT, LEN(ADADH[OLISTHIST:NAT])], CALTPUBL), ) /*, OLIST:REFRESH()*/ } 
ENDIF

OLIST:BCHANGE :=  {|| OLISTHIST:SETARRAY(FILLITERA(B53->B53_NUMGUI + ADADPROC[OLIST:NAT, NPOSSEQ], ADADH, CALIASPAI, B53->B53_ROTGEN)), OLISTHIST:REFRESH()}

ACTIVATE MSDIALOG ODLG ON INIT ENCHOICEBAR(ODLG ,{|| NOPCA := 1, IF(CHKSELECT(ADADPROC, CDESMOTPAD, COBSMOTPAD ),ODLG:END(),NOPCA := 2)  /*ODLG:END()*/ ,.F.}, {|| ODLG:END()},.F.,ABUTTONS) CENTERED

IF NOPCA == K_OK

	BEGIN TRANSACTION
		FOR NFOR := 1 TO LEN(ADADPROC)
			IF ADADPROC[NFOR,LEN(ADADPROC[NFOR])]//ADADPROC[NFOR, 5]

				CSEQ := PLSBBRSEQ(NIL, NIL, NIL, NIL, PADL(ADADPROC[NFOR, NPOSSEQ], 3, "0"), B53->B53_ROTGEN, B53->B53_NUMGUI)
				BBR->(RECLOCK("BBR",.T.))

				IF CTPPUBLICO == "PRESTADOR"
					BBR->BBR_TPDIRP := 'P'
				ELSE
					IF EMPTY(CTPPUBLICO)
						BBR->BBR_TPDIRP := SPACE(TAMSX3("BBR_TPDIRP")[1])
					ELSE
						BBR->BBR_TPDIRP := 'B'
					ENDIF
				ENDIF

				//ALTERAÇÃO NECESSÁRIA POIS NO MOMENTO DE ANEXAR UM ARQUIVO PELO PORTAL
				//DO BENEFICIÁRIO, NÃO EXISTE VINCULO DIRETO ENTRE O REGISTROCORRENTE DA INTERAÇÃO E O PROCEDIMENTO.
				//DESTA FORMA, DIFICULTOU MUITO A ALTERAÇÃO DO STATUS NO MOMENTO APÓS ANEXAR UM ARQUIVO.
				IF CPARECER = "SIM" .OR. BBR->BBR_TPDIRP == 'B'
					BBR->BBR_RESPRE := .T.
					
					IF BBR->BBR_TPDIRP == 'P'  
						BBR->BBR_ANEXAD := .T.
					ENDIF 
				ELSE
					BBR->BBR_RESPRE := .F.
				ENDIF

				BBR->BBR_FILIAL  := XFILIAL("BBR")
				BBR->BBR_SETOR  := POSICIONE("SX5",1,XFILIAL("SX5")+"BL"+CSETOR/*BX4->BX4_CODDEP*/,"X5_DESCRI")
				BBR->BBR_CODUSU := CCODOPE
				BBR->BBR_SEQMOP := CCADASTRO
				BBR->BBR_DTITER := DDATABASE
				BBR->BBR_HRITER := TIME()
				BBR->BBR_NUMGUI	:= B53->B53_NUMGUI
				BBR->BBR_SEQPRO := PADL(ADADPROC[NFOR, NPOSSEQ], 3, "0")
				BBR->BBR_CODPRO := CALIASITE + ALLTRIM(STR(&(CALIASITE)->(RECNO())))
				BBR->BBR_TPGUIA := CTPGUIA //"04"
				BBR->BBR_OBSERV := COBSMOTPAD
				BBR->BBR_ALIMOV := CALIASPAI
				BBR->BBR_CODOPE := PLSINTPAD()//PADL(CVALTOCHAR(ACAMPOS[1][2]), TAMSX3(ACAMPOS[1][1])[1],"0")//BE4_CODOPE
				BBR->BBR_ANOAUT := ALLTRIM(STR(YEAR(DATE())))//PADR(CVALTOCHAR(ACAMPOS[2][2]), TAMSX3(ACAMPOS[2][1])[1],) //BE4_ANOINT
				BBR->BBR_MESAUT := ALLTRIM(STR(MONTH(DATE())))//PADL(CVALTOCHAR(ACAMPOS[3][2]), TAMSX3(ACAMPOS[3][1])[1],"0") //BE4_MESINT
				BBR->BBR_NUMAUT := "0000"//PADL(CVALTOCHAR(ACAMPOS[4][2]), TAMSX3(ACAMPOS[4][1])[1],"0") //BE4_NUMINT
				BBR->BBR_SEQUEN := CSEQ

				BBR->(MSUNLOCK())

				PLSATUAUD(CTPPUBLICO, CPARECER, '',COBSMOTPAD)

				MSGINFO(STR0085)  //'INTERAÇÃO SALVA COM SUCESSO.'
			ENDIF
		NEXT NFOR
	END TRANSACTION
ENDIF

RETURN .T.

/*/{PROTHEUS.DOC} PLSINDGEN
O SISTEMA PEGA A CHAVE DO INDICE INFORMADO VIA PARAMETRO E DEPOIS, O QUEBRA NUMA CHAVE, DE ACORDO COM O TAMANHO DA B53_NUMGUI
//SE NTPIDX FOR 1, PEGA ÍNDICE DA TABELA DE ITENS. SE FOR 2, PEGA INDICE DA TABELA DE CRÍTICAS
@AUTHOR FÁBIO SIQUEIRA DOS SANTOS
@SINCE 24/11/2016
@VERSION 1.0
@PARAM 
@RETURN STRING, RETORNA CHAVE DO ÍNDICE 

/*/
STATIC FUNCTION PLSINDGEN(NTPIDX, LAPENIDX, O790C)
LOCAL AINDEX		:= IIF(NTPIDX == 1, (O790C:CAITE)->(INDEXKEY(O790C:NIDXITE)) , (O790C:CACRI)->(INDEXKEY(O790C:NIDXCRI)) )
LOCAL CCAMPOS		:= ""
LOCAL NTAMFOR		:= LEN(ALLTRIM(B53->B53_NUMGUI))
LOCAL NTAMCMP		:= 0
LOCAL NI			:= 0
LOCAL NSOMA		:= 0
LOCAL CCMPIDX		:= ""
DEFAULT LAPENIDX	:= .F.

AINDEX := SEPARA(AINDEX,"+",.F.) //SEPARA OS CAMPOS, FORMANDO VÁRIOS ARRAYS

//AGORA, DE ACORDO COM O TAMANHO DO CAMPO B53_NUMGUI, FOI VENDO QUE PARTES DOS ÍNDICES FORMAM A CHAVE
//DE PESQUISA. QUANDO FOR MAIOR OU IGUAL AO TAMANHO DO B53_NUMGUI, O PROCESSO É INTERROMPIDO.
FOR NI := 1 TO NTAMFOR
  NSOMA += (TAMSX3(AINDEX[NI])[1])
  CCAMPOS += AINDEX[NI] + "-" + ALLTRIM(STR(TAMSX3(AINDEX[NI])[1])) + ","
  CCMPIDX += AINDEX[NI] + "+"
  IF (NSOMA >= NTAMFOR)
    EXIT
  ENDIF
NEXT  

IF (LAPENIDX)  //QUANDO PRECISO APENAS DA CHAVE DA FORMA NATURAL, TIPO BBB_FILIA+BBB_CODOPE
  CCAMPOS := CCMPIDX
ENDIF
  
RETURN (SUBSTR(CCAMPOS,1,LEN(CCAMPOS)-1))

/*/{PROTHEUS.DOC} PLATBD7SE2
*******************************************************************
REMOVER NO FUTURO DESTE FONTE
FUNCAO NAO ESTA MAIS SENDO UTILIZADA FOI TRANSFERIDA PARA PLSCTBFUN
*******************************************************************
@AUTHOR PLSTEAM
@SINCE 207/12/2016
@VERSION P12
/*/
FUNCTION PLATBD7SE2(ADADPLS, CCHAVESE2)
LOCAL AAREA		 := GETAREA()
LOCAL LBD7_CHKSE2:= BD7->(FIELDPOS("BD7_CHKSE2")) > 0
LOCAL NI		 := 0
LOCAL CSQL		 := ''

DEFAULT CCHAVESE2:= ''

IF LBD7_CHKSE2 .AND. LEN(ADADPLS) > 0
	
	SC7->(DBSETORDER(1))//C7_FILIAL+C7_NUM+C7_ITEM+C7_SEQUEN
	
	BEGIN TRANSACTION
	
	FOR NI := 1 TO LEN(ADADPLS) 
	
		IF SC7->( MSSEEK( XFILIAL('SC7') + ADADPLS[NI,1] + ADADPLS[NI,2] ) )

			CSQL   := " UPDATE " + RETSQLNAME("BD7")  
			CSQL   += "    SET BD7_CHKSE2 = '" + CCHAVESE2 + "' " 
			CSQL   += "  WHERE BD7_FILIAL = '" + XFILIAL("BD7") + "' "
			CSQL   += "    AND BD7_OPELOT = '" + SC7->C7_PLOPELT + "' "
			CSQL   += "    AND BD7_NUMLOT = '" + SC7->C7_LOTPLS  + "' "
			CSQL   += "    AND BD7_CODRDA = '" + SC7->C7_CODRDA  + "' "
			CSQL   += "    AND D_E_L_E_T_ = ' ' "
			
			IF ( TCSQLEXEC(CSQL) ) < 0

				FWLOGMSG('ERROR',, 'SIGAPLS', FUNNAME(), '', '01',"ERRO NA EXECUÇÃO DO UPDATE PLATBD7SE2 -> [ " + TCSQLERROR() + "]" , 0, 0, {})
				
			ELSEIF ALLTRIM( TCGETDB() ) == "ORACLE"

				TCSQLEXEC("COMMIT")
					
			ENDIF
				
		ENDIF
		
	NEXT
		
	END TRANSACTION
	
ENDIF

RESTAREA(AAREA)

RETURN

/*/{PROTHEUS.DOC} SETCTRVAR
VARIAVEL STATIC CONFORME FUNCAO
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.01
@VERSION 1.0
/*/
FUNCTION SETCTRVAR(CTP)
__PLSA498GUI := .F.

IF CTP == "PLSA498GUI"
	__PLSA498GUI := .T.
ENDIF	
	
RETURN

/*/{PROTHEUS.DOC} PLSSTATGUI
RETORNA A DESCRIÇÃO DE STATUS DA GUIA
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.01
@VERSION 1.0
/*/
FUNCTION PLSSTATGUI(CSTATUS, CCABEC)
LOCAL CDESC		:= ''	// DESCRIÇÃO DO STATUS DA GUIA
						// BEA - 1=AUTORIZADA;2=AUTORIZADA PARCIALMENTE;3=NAO AUTORIZADA;4=AGUARDANDO FINALIZACAO ATENDIMENTO;5=AGUARDANDO LIQ. TITULO A RECEBER
						// B0D - 1-AUTORIZADO - 2-NÃO AUTORIZADO
						// B4A - 1=AUTORIZADA;2=AUTORIZADA PARCIALMENTE;3=NAO AUTORIZADA
DEFAULT CSTATUS	:= '1'	// CONTEÚDO DO CAMPO _STATUS DA GUIA
DEFAULT CCABEC	:= ''	// CABEÇALHO DA TABELA DA GUIA

DO CASE

	CASE CCABEC == "BEA" .OR. CCABEC == "B4Q"
		
		DO CASE
			CASE CSTATUS == '1'
				CDESC	:= 'AUTORIZADO'
			CASE CSTATUS == '2'
				CDESC	:= 'AUTORIZADO PARCIALMENTE'
			CASE CSTATUS == '3'
				CDESC	:= 'NEGADO'
			CASE CSTATUS == '4'
				CDESC	:= 'EM ANÁLISE'// 'AGUARDANDO FINALIZACAO ATENDIMENTO'
			CASE CSTATUS == '5'
				CDESC	:= 'EM ANÁLISE'//'AGUARDANDO LIQ. TITULO A RECEBER'
			CASE CSTATUS == '6'
				CDESC	:= 'EM ANÁLISE'//'EM ANALISE PELA AUDITORIA'				
			OTHERWISE
				CDESC	:= 'STATUS NAO DEFINIDO'
		ENDCASE
		
	CASE CCABEC == "B0D"
	
		DO CASE
			CASE CSTATUS == '1'
				CDESC	:= 'AUTORIZADO'
			CASE CSTATUS == '2'
				CDESC	:= 'NEGADO'
			OTHERWISE
				CDESC	:= 'STATUS NAO DEFINIDO'
		ENDCASE

	CASE CCABEC == "B4A"
	
		DO CASE
			CASE CSTATUS == '1'
				CDESC	:= 'AUTORIZADO'
			CASE CSTATUS == '2'
				CDESC	:= 'AUTORIZADO PARCIALMENTE'
			CASE CSTATUS == '3'
				CDESC	:= 'NEGADO'
			CASE CSTATUS == '6'
				CDESC	:= 'EM ANÁLISE'				
			OTHERWISE
				CDESC	:= 'STATUS NAO DEFINIDO'
		ENDCASE

	OTHERWISE
	
		CDESC := 'CABEÇALHO NÃO INFORMADO'
		
ENDCASE

RETURN(CDESC)


/*/{PROTHEUS.DOC} PLCHKHECO
AJUSTA AHEADER E ACOLS CONFORME ALIASCHANGE
@TYPE FUNCTION
@AUTHOR TOTVS
@SINCE 28.08.17
@VERSION 1.0
/*/
FUNCTION PLCHKHECO(CALIAS,CALIASCHANGE,AHEADERAUX,ACOLSAUX)
LOCAL AAREA		 := GETAREA()
LOCAL NFOR		 := 0
LOCAL NFORH		 := 0
LOCAL CEXCHEADER := ""
LOCAL CMAT		 := ""
LOCAL AAUX 		 := ACLONE(AHEADERAUX)
LOCAL AAUXNEW	 := {}
LOCAL AAUXCOL  	 := {}
LOCAL ACOLSNEW 	 := {}

DBSELECTAREA(CALIASCHANGE)

FOR NFOR := 1 TO LEN(AAUX)
	
	CMAT := "{|| AADD(AAUXNEW,{"
	
	AAUX[NFOR,2] := STRTRAN(AAUX[NFOR,2],CALIAS,CALIASCHANGE)
	
	IF TYPE(AAUX[NFOR,2]) <> 'U'
	
		FOR NFORH := 1 TO LEN(AAUX[NFOR])
		
			CMAT += 'AAUX[' + ALLTRIM( STR(NFOR) ) + ',' + ALLTRIM( STR(NFORH) ) + '],'
			
		NEXT
		
		CMAT := SUBSTR(CMAT,1,LEN(CMAT)-1) + '}) } '
		
		EVAL(&CMAT)
		
	ELSE
		CEXCHEADER += '(' + ALLTRIM( STR(NFOR) ) + ')'
	ENDIF
	
NEXT

IF LEN(AAUXNEW) > 0
	AHEADERAUX := ACLONE(AAUXNEW)
ENDIF

IF ! EMPTY(CEXCHEADER)

	AAUXCOL  := ACLONE(ACOLSAUX)

	FOR NFOR := 1 TO LEN(AAUXCOL)

		CMAT := '{|| AADD(ACOLSNEW, {'

		FOR NFORH := 1 TO LEN(AAUXCOL[NFOR])

			IF ! '(' + ALLTRIM( STR(NFORH)) + ')' $ CEXCHEADER
			
				CMAT += 'AAUXCOL[' + ALLTRIM( STR(NFOR) ) + ',' + ALLTRIM( STR(NFORH) ) + '],'
				
			ENDIF

		NEXT

		CMAT := SUBSTR(CMAT,1,LEN(CMAT)-1) + '}) }'
		
		EVAL(&CMAT)
		
	NEXT

	IF LEN(ACOLSNEW) > 0
		ACOLSAUX := ACLONE(ACOLSNEW)
	ENDIF
	
ENDIF

RESTAREA(AAREA)

RETURN	

/*/{PROTHEUS.DOC} PLBYEPU
SE O EVENTO JA FOI AUTORIZADO NAO CHECA REGRA NOVAMENTE

@TYPE 		FUNCTION
@AUTHOR  	PLS TEAM
@VERSION 	P12
@SINCE		18.10.16
/*/
FUNCTION PLBYEPU(CTIPOGUIA, CCHAVLIB, APROCBYP, CCODPAD, CCODPRO, CCODDENTE, CCODFACE, LOUTDESP, CCHAVGUIA)
LOCAL NPOS			:= 0
LOCAL COPEMOV		:= ""
LOCAL CANOMOV		:= ""
LOCAL CMESMOV		:= ""
LOCAL CNUMMOV		:= ""
LOCAL CNIVAUT		:= ""
LOCAL CCHVNIV		:= ""
LOCAL CSQL			:= ""
LOCAL OBHMPRE_AUT 	:= PLRETHASH(1)
LOCAL LRET			:= PLGETHASH(CCHAVLIB,@APROCBYP,OBHMPRE_AUT)
LOCAL OBJBORES 	:= NIL
LOCAL ACHAVLIB := {}

DEFAULT CCODPAD		:= ""
DEFAULT CCODPRO		:= ""
DEFAULT CCODDENTE	:= ""
DEFAULT CCODFACE	:= ""
DEFAULT LOUTDESP	:= .F.
DEFAULT CCHAVGUIA	:= ""

//AQUI, QUANDO É PROVENIENTE DAS OUTRAS DESPESAS NA GRI, NECESSITAMOS TROCAR O CÓDIGO PELA SOLICITAÇÃO DA INTERNAÇÃO, PARA ENCONTRAR ANEXOS
IF LOUTDESP .AND. CTIPOGUIA $ G_RES_INTER  
	BE4->(DBSETORDER(2)) //BE4_FILIAL+BE4_CODOPE+BE4_ANOINT+BE4_MESINT+BE4_NUMINT
	IF ( BE4->(MSSEEK( XFILIAL("BE4") + CCHAVLIB )) )
		OBJBORES := BO_RESUMOINTER():NEW()   
		ACHAVLIB := STRTOARRAY(OBJBORES:GETNUMINT(BE4->BE4_GUIINT, '1'), "|")
		CCHAVLIB := ACHAVLIB[1]
		COPEMOV  := LEFT(CCHAVLIB,4)
		CANOMOV  := SUBSTR(CCHAVLIB,5,4)
		CMESMOV  := SUBSTR(CCHAVLIB,9,2)
		CNUMMOV  := RIGHT(CCHAVLIB,8)
	ENDIF

ELSE	                                                                                                        

	IF CTIPOGUIA $ G_CONSULTA + "|" + G_SADT_ODON .AND. BEA->(BEA_OPEMOV+BEA_ANOAUT+BEA_MESAUT+BEA_NUMAUT) != CCHAVLIB
	
		BEA->(DBSETORDER(1)) //BEA_FILIAL+BEA_OPEMOV+BEA_ANOAUT+BEA_MESAUT+BEA_NUMAUT+DTOS(BEA_DATPRO)+BEA_HORPRO
		IF ! BEA->( MSSEEK( XFILIAL("BEA") + CCHAVLIB ) )
			LRET := .T.	
		ENDIF
		
	ELSEIF CTIPOGUIA $ G_HONORARIO + "|" + G_RES_INTER .AND. BEA->(BEA_OPEINT+BEA_ANOINT+BEA_MESINT+BEA_NUMINT) != CCHAVLIB	
		
		BEA->(DBSETORDER(6)) //BEA_FILIAL+BEA_OPEINT+BEA_ANOINT+BEA_MESINT+BEA_NUMINT+DTOS(BEA_DATPRO)+BEA_HORPRO
		IF ! BEA->( MSSEEK( XFILIAL("BEA") + CCHAVLIB ) )
			LRET := .T.	
		ENDIF
		
	ENDIF
	
ENDIF	



//QUANDO TENHO DOIS PROCEDIMENTOS, UM APROVADO E OUTRO EM ANALISE, NÃO FECHO A 090 E AUDITO O PROCEDIMENTO APROVANDO, AO VOLTAR NA 090 É APRESENTADO ERRO DE AUDITORIA. 
//AQUI FORÇAMOS PARA QUE, CASO NÃO ENCONTRE O PROCEDIMENTO NO ARRAY, RECARREGUE O MESMO COM TODOS OS AUTORIZADOS.

IF !EMPTY(CCODPAD) .AND. ! EMPTY(CCODPRO)
	NPOS := ASCAN(APROCBYP,{|X| ALLTRIM(X[1]) + ALLTRIM(X[2]) == ALLTRIM(CCODPAD) + ALLTRIM(CCODPRO) .AND. ALLTRIM(X[9]) + ALLTRIM(X[10]) == ALLTRIM(CCODDENTE) + ALLTRIM(CCODFACE) }) 
	LRET := ( NPOS  > 0 )
ENDIF
	
IF ! LRET

	//DEFINICAO DOS ALIAS E DA CHAVE DE BUSCA DA LIBERACAO
	IF (!LOUTDESP)
		DO CASE	 
	
			CASE CTIPOGUIA $ G_CONSULTA + "|" + G_SADT_ODON
				
				CCHAVLIB := BEA->(BEA_OPEMOV+BEA_ANOAUT+BEA_MESAUT+BEA_NUMAUT)
				COPEMOV  := BEA->BEA_OPEMOV
				CANOMOV  := BEA->BEA_ANOAUT
				CMESMOV  := BEA->BEA_MESAUT 
				CNUMMOV	 := BEA->BEA_NUMAUT
				
			CASE CTIPOGUIA $ G_HONORARIO + "|" + G_RES_INTER
				
				CCHAVLIB := BEA->(BEA_OPEINT+BEA_ANOINT+BEA_MESINT+BEA_NUMINT)
				COPEMOV  := BEA->BEA_OPEINT
				CANOMOV  := BEA->BEA_ANOINT
				CMESMOV  := BEA->BEA_MESINT 
				CNUMMOV	 := BEA->BEA_NUMINT
			
		ENDCASE
	ENDIF
	
	
	IF ! EMPTY(CCHAVLIB)
	
		CSQL := " SELECT BE2_CODPAD CODPAD, BE2_CODPRO CODPRO, BE2_QTDPRO QTDPRO, BE2_TIPGUI TIPGUI, BE2_OPEMOV CODOPE,"
		CSQL += "        BE2_DATPRO DATPRO, BE2_NIVAUT NIVAUT, BE2_CHVNIV CHVNIV, BE2_DENREG DENREG, BE2_FADENT FADENT "
		CSQL += "   FROM " + BE2->(RETSQLNAME('BE2')) + " BE2 "
		CSQL += "  WHERE BE2_FILIAL = '" + XFILIAL('BE2') + "' "
		CSQL += "    AND BE2_OPEMOV = '" + COPEMOV + "' "
		
		IF CTIPOGUIA $ G_CONSULTA + "|" + G_SADT_ODON
			CSQL += " AND BE2_ANOAUT = '" + CANOMOV + "' "
			CSQL += " AND BE2_MESAUT = '" + CMESMOV + "' "
			CSQL += " AND BE2_NUMAUT = '" + CNUMMOV + "' "
			CSQL += " AND BE2_LIBERA = '1' "
		ELSE
			CSQL += " AND BE2_ANOINT = '" + CANOMOV + "' "
			CSQL += " AND BE2_MESINT = '" + CMESMOV + "' "
			CSQL += " AND BE2_NUMINT = '" + CNUMMOV + "' "
		ENDIF
		
		CSQL += "    AND BE2_STATUS = '1' "
		CSQL += "    AND BE2.D_E_L_E_T_ = ' ' "
			
		CSQL += "   UNION ALL "
			
		CSQL += " SELECT B4C_CODPAD CODPAD, B4C_CODPRO CODPRO, B4C_QTDPRO QTDPRO, B4A_TIPGUI TIPGUI, B4A_OPEMOV CODOPE,"
		CSQL += "        B4A_DATPRO DATPRO, B4C_NIVAUT NIVAUT, B4C_CHVNIV CHVNIV, '' DENREG, '' FADENT "
		CSQL += "   FROM " + B4A->(RETSQLNAME('B4A')) + " B4A "
		
		CSQL += " INNER JOIN " + B4C->(RETSQLNAME('B4C')) + " B4C "
		CSQL += "         ON B4C_FILIAL = '" + XFILIAL('B4C') + "' " 
		CSQL += "        AND B4C_OPEMOV = B4A_OPEMOV "
		CSQL += "        AND B4C_ANOAUT = B4A_ANOAUT "
		CSQL += "        AND B4C_MESAUT = B4A_MESAUT "
		CSQL += "        AND B4C_NUMAUT = B4A_NUMAUT "
		CSQL += "        AND B4C_STATUS = '1' "
		CSQL += "        AND B4C.D_E_L_E_T_ = ' ' "
		
		CSQL += "  WHERE B4A_FILIAL = '" + XFILIAL('B4A') + "' "
		CSQL += "    AND B4A_GUIREF = '" + CCHAVLIB + "' "
		IF (!EMPTY(CCHAVGUIA))
			CSQL += " OR B4A_GUIREF = '" + CCHAVGUIA + "' "	
		ENDIF	
		CSQL += "    AND B4A.D_E_L_E_T_ = ' ' "
		
		//PRORROGACAO
		IF CTIPOGUIA $ G_RES_INTER + '|' + G_HONORARIO
			
			CSQL += " UNION ALL "
				
			CSQL += " SELECT BQV_CODPAD CODPAD, BQV_CODPRO CODPRO, BQV_QTDPRO QTDPRO, '11' TIPGUI, B4Q_OPEMOV CODOPE,"
			CSQL += "        B4Q_DATPRO DATPRO, BQV_NIVAUT NIVAUT, BQV_CHVNIV CHVNIV, '' DENREG, '' FADENT "
			CSQL += "   FROM " + B4Q->(RETSQLNAME('B4Q')) + " B4Q "
			
			CSQL += " INNER JOIN " + BQV->(RETSQLNAME('BQV')) + " BQV "
			CSQL += "         ON BQV_FILIAL = '" + XFILIAL('BQV') + "' " 
			CSQL += "        AND BQV_CODOPE = B4Q_OPEMOV "
			CSQL += "        AND BQV_ANOINT = B4Q_ANOAUT "
			CSQL += "        AND BQV_MESINT = B4Q_MESAUT "
			CSQL += "        AND BQV_NUMINT = B4Q_NUMAUT "
			CSQL += "        AND BQV_STATUS = '1' "
			CSQL += "        AND BQV.D_E_L_E_T_ = ' ' "
			
			CSQL += " WHERE B4Q_FILIAL = '" + XFILIAL('B4Q') + "' "
			CSQL += "   AND B4Q_GUIREF = '" + CCHAVLIB + "' "
			CSQL += "   AND B4Q.D_E_L_E_T_ = ' ' "
			
			CSQL += "   UNION ALL "
			
			CSQL += " SELECT B4C_CODPAD CODPAD, B4C_CODPRO CODPRO, B4C_QTDPRO QTDPRO, B4A_TIPGUI TIPGUI, B4A_OPEMOV CODOPE,"
			CSQL += "        B4A_DATPRO DATPRO, B4C_NIVAUT NIVAUT, B4C_CHVNIV CHVNIV, '' DENREG, '' FADENT "
			CSQL += "   FROM " + B4A->(RETSQLNAME('B4A')) + " B4APRO "
			
			CSQL += " INNER JOIN " + B4C->(RETSQLNAME('B4C')) + " B4CPRO "
			CSQL += "         ON B4CPRO.B4C_FILIAL = '" + XFILIAL('B4C') + "' " 
			CSQL += "        AND B4CPRO.B4C_OPEMOV = B4APRO.B4A_OPEMOV "
			CSQL += "        AND B4CPRO.B4C_ANOAUT = B4APRO.B4A_ANOAUT "
			CSQL += "        AND B4CPRO.B4C_MESAUT = B4APRO.B4A_MESAUT "
			CSQL += "        AND B4CPRO.B4C_NUMAUT = B4APRO.B4A_NUMAUT "
			CSQL += "        AND B4CPRO.B4C_STATUS = '1' "
			CSQL += "        AND B4CPRO.D_E_L_E_T_ = ' ' "
			
			CSQL += " WHERE B4APRO.B4A_FILIAL = '" + XFILIAL('B4A') + "' "
			CSQL += "   AND B4APRO.B4A_GUIREF = '" + CCHAVLIB + "' "
			CSQL += "   AND B4APRO.D_E_L_E_T_ = ' ' "
			
		ENDIF	
//CHANGEQUERY(CSQL)
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQL),"TRBPAS",.F.,.T.)
		
		WHILE ! TRBPAS->(EOF()) 
							
			AADD(APROCBYP, { TRBPAS->CODPAD, TRBPAS->CODPRO, TRBPAS->QTDPRO, TRBPAS->TIPGUI, TRBPAS->CODOPE, STOD(TRBPAS->DATPRO), TRBPAS->NIVAUT, TRBPAS->CHVNIV, TRBPAS->DENREG, TRBPAS->FADENT } )
			
		TRBPAS->(DBSKIP())
		ENDDO
		
		TRBPAS->(DBCLOSEAREA())
		
		PLSETHASH(CCHAVLIB,APROCBYP,@OBHMPRE_AUT)
		
	ENDIF
	
ENDIF

IF ! EMPTY(CCODPAD) .AND. ! EMPTY(CCODPRO)

	NPOS := ASCAN(APROCBYP,{|X| ALLTRIM(X[1]) + ALLTRIM(X[2]) == ALLTRIM(CCODPAD) + ALLTRIM(CCODPRO) .AND. ALLTRIM(X[9]) + ALLTRIM(X[10]) == ALLTRIM(CCODDENTE) + ALLTRIM(CCODFACE) }) 
	LRET := ( NPOS  > 0 )
	
	IF LRET
		CNIVAUT := APROCBYP[NPOS,7]
		CCHVNIV := APROCBYP[NPOS,8]
	ENDIF
		 
ENDIF	
	
RETURN( { LRET, CNIVAUT, CCHVNIV } )


/*/{PROTHEUS.DOC} PLRDESBOX
RETORNA A DESCRICAO DE UM XBOX
@TYPE 		FUNCTION
@AUTHOR  	PLS TEAM
@SINCE		18.10.16
/*/
FUNCTION PLRDESBOX(AMAT,CFIELD,CCONTEUDO)
LOCAL NPOS		:= 0
LOCAL CDESCRI 	:= ""

IF LEN(AMAT) == 0
	AMAT := RETSX3BOX( X3CBOX( POSICIONE('SX3',2,CFIELD,'X3_CBOX') ),,,1 )
ENDIF
	
NPOS := ASCAN(AMAT, {|X| X[2] == CCONTEUDO })
IF NPOS > 0
	CDESCRI := AMAT[NPOS,3]
ENDIF

RETURN(CDESCRI)

/*/{PROTHEUS.DOC} PLGETDEC
RETORNA A DECIMAL DO CAMPO
@TYPE FUNCTION
@AUTHOR PLSTEAM
@SINCE 03.01.17
@VERSION 1.0
/*/
FUNCTION PLGETDEC(CFIELD)
RETURN GETSX3CACHE(CFIELD, 'X3_DECIMAL')

/*/{PROTHEUS.DOC} PLRETSX5
RETORNA A DESCRIÇÃO DO SX5
@TYPE FUNCTION
@AUTHOR LUCAS
@SINCE 20.03.18
@VERSION 1.0
/*/
FUNCTION PLRETSX5(CTAB,CCHAVE)
LOCAL ARET	:= {}
LOCAL NPOS	:= 0
LOCAL CDESC	:= ""

ARET := FWGETSX5(CTAB)
NPOS := ASCAN(ARET,{|X| ALLTRIM(X[3]) == ALLTRIM(UPPER(CCHAVE))}) 
IF NPOS > 0
	CDESC := ARET[NPOS][4]
ENDIF

RETURN CDESC

FUNCTION P090MTVCAN()
LOCAL AAREA := GETAREA()
LOCAL CMOTTISS 	:= SPACE(15)
LOCAL CTEXTO 	:= SPACE(TAMSX3("BEA_CANEDI")[1])
LOCAL NOK		:= 0
PRIVATE CCODTAB	:= "38"

ASIZE := MSADVSIZE(.T.)
AOBJECTS := {}
AADD( AOBJECTS, { 100, 100, .T., .T. } )

AINFO  := { ASIZE[ 1 ], ASIZE[ 2 ], ASIZE[ 3 ], ASIZE[ 4 ], 0, 0 }
APOBJS := MSOBJSIZE( AINFO, AOBJECTS, .T. )

DBSELECTAREA("BTP")
BTP->(DBSETORDER(2))

DEFINE MSDIALOG ODLGMOT TITLE STR0080 FROM 120, 000 TO 250 , 550 OF OMAINWND PIXEL   //"INFORME O MOTIVO DO CANCELAMENTO"

@ 010, 010 SAY STR0081 OF ODLGMOT PIXEL COLOR CLR_BLUE    // "MOTIVO TISS"
@ 020, 010 MSGET OPROD VAR CMOTTISS SIZE 40, 009 VALID PLVLDMOT(CMOTTISS,@CTEXTO) F3 "BTQPLS" OF ODLGMOT PIXEL COLOR CLR_BLACK

@ 010, 055 SAY STR0082  OF ODLGMOT PIXEL COLOR CLR_BLUE    // "DESCRIÇÃO MOTIVO"
@ 020, 055 MSGET ODES VAR CTEXTO  SIZE 205, 009 OF ODLGMOT PIXEL COLOR CLR_BLACK


OBTNOK := TBUTTON():NEW(@37, 115, STR0083, ODLGMOT, {|| NOK := 1, IIF(!EMPTY(CMOTTISS) .OR. !EMPTY(CTEXTO),ODLGMOT:END(),NIL)}, 050, 012,,,, .T.)    //"CONFIRMA"

ACTIVATE MSDIALOG ODLGMOT CENTERED

IF NOK <> 1
	CMOTTISS := ""
	CTEXTO := ""
ENDIF

RESTAREA(AAREA)
RETURN({CMOTTISS,CTEXTO})

//-------------------------------------------------------------------
/*/{PROTHEUS.DOC} PLVLDMOT

VALIDO O MOTIVO DIGITADO

@AUTHOR  	PLS TEAM
@VERSION 	P11.8
@SINCE		02/16
/*/
//-------------------------------------------------------------------
STATIC FUNCTION PLVLDMOT(CMOTIVO, CTEXTO)
LOCAL LRET := .F.

BTQ->(DBSETORDER(1))
LRET := BTQ->(MSSEEK(XFILIAL("BTQ") + "38" + CMOTIVO))
CTEXTO := BTQ->BTQ_DESTER

RETURN(LRET)

/*/{PROTHEUS.DOC} PLSGETRAS
RETORNA BENEFICIÁRIOS COM O CÓDIGO DE RASTREIO DE REEMBOLSO
@AUTHOR THIAGO RIBAS
@SINCE 21/03/2012
/*/
FUNCTION PLSGETRAS(CCODRDAS, CDTRECIBO) 

LOCAL CSQLRAS := ""
DEFAULT CDTRECIBO := ""

CSQLRAS := " SELECT BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO,BA1_NOMUSR, BA3_CODPLA, BA1_DATINC, BA1_DATBLO"
CSQLRAS += " FROM " + RETSQLNAME("BA1")
CSQLRAS += " INNER JOIN " + RETSQLNAME("BA3")
CSQLRAS += " ON BA3_CODINT = BA1_CODINT AND BA3_CODEMP = BA1_CODEMP AND BA3_MATRIC = BA1_MATRIC"
CSQLRAS += " WHERE"
CSQLRAS += " BA3_CODRAS = '" + CCODRDAS + "' AND  BA3_DATBLO >= '" + CDTRECIBO + "' AND "

IF !EMPTY(CDTRECIBO)
	CSQLRAS += " BA1_DATINC <= '" + CDTRECIBO + "' AND "
ENDIF

CSQLRAS += RETSQLNAME("BA3")+".D_E_L_E_T_ = ' ' AND " + RETSQLNAME("BA1")+".D_E_L_E_T_ = ' '"
CSQLRAS += " ORDER BY BA3_CODPLA"

RETURN CSQLRAS


/*/{PROTHEUS.DOC} PLHATVLDP
VERIFICA SE ENCONTRA NA TABELA B2Z A LIBERAÇÃO, QUANDO O PARÂMETRO MV_PLSHAT ESTIVER ATIVO, INDICANDO QUE A OPERADORA USA O HAT.
@TYPE FUNCTION
@AUTHOR PLSTEAM
@SINCE 12/2018
@VERSION 1.0
/*/
FUNCTION PLHATVLDP(CTIPGUIA, COPEMOV, CCODRDA, CSENHA, CNUMAUT, CMATRIC, CCDTBPD, CCODPRO, LATUSLD, NSLDPREV, NQTDATUZ)
LOCAL ATABDUP 	:= PLSBUSTERDUP(SUPERGETMV("MV_TISSCAB", .F. ,"87"))
LOCAL AAREAB2Z	:= B2Z->(GETAREA())
LOCAL CSQL			:= ""
LOCAL CNIVAUT 	:= ""
LOCAL CCHVNIV 	:= ""
LOCAL CPADBKP		:= ""
LOCAL CCODPAD		:= ""
LOCAL LRET			:= .F.
LOCAL NQTD			:= 0
LOCAL NI			:= 1
LOCAL NPOSB2Z		:= 0
LOCAL NTEMP		:= 0
DEFAULT LATUSLD	:= .F.
DEFAULT NQTDATUZ	:= 0

//FAZER O DE/PARA DO CÓDIGO DA TABELA E PROCEDIMENTO. HAT GRAVA CONFORME TERMINOLOGIA TISS....
IF( !EMPTY(CCDTBPD) .AND. !EMPTY(CCODPRO) )
	CPADBKP := PLSGETVINC("BTU_CDTERM", "BR4", .F., "87",  CCDTBPD)
	CCODPRO := PLSGETVINC("BTU_CDTERM", "BR8", .F., CPADBKP,  ALLTRIM(CCDTBPD + CCODPRO), .F. ,ATABDUP, @CPADBKP)
ENDIF	

CSQL := " SELECT B2Z_QTDAUT, B2Z_SALDO " + IIF(LATUSLD, ", R_E_C_N_O_ REC", "") 
CSQL += " FROM  " + RETSQLNAME("B2Z")
CSQL += " WHERE B2Z_FILIAL = '" + XFILIAL("B2Z") + "' "
CSQL += " AND B2Z_OPEMOV = '" + COPEMOV + "' "
//CSQL += " AND B2Z_CODRDA = '" + CCODRDA + "' "
IF ( !EMPTY(CSENHA) )
	CSQL += " AND B2Z_SENHA = '" + CSENHA + "' "
ELSE
	CSQL += " AND B2Z_NUMAUT = '" + CNUMAUT + "' "
ENDIF
CSQL += " AND B2Z_MATRIC = '" + CMATRIC + "' "
IF ( !EMPTY(CCDTBPD) .AND. !EMPTY(CCODPRO) )
	CSQL += " AND B2Z_CODPAD = '" + CPADBKP + "' "
	CSQL += " AND B2Z_CODPRO = '" + CCODPRO + "' "
ENDIF
CSQL += " AND D_E_L_E_T_ = ' ' "

//CHAMO FUNÇÃO DE QUERY
CSQL:= CHANGEQUERY(CSQL)
TCQUERY CSQL NEW ALIAS "TABPROCB2Z"

IF !TABPROCB2Z->(EOF())
	LRET := .T.
	CNIVAUT := "HAT"
	CCHVNIV := "HATAUT"	
	NQTD += TABPROCB2Z->B2Z_SALDO
	IIF(LATUSLD, NPOSB2Z := TABPROCB2Z->REC, "")  
ENDIF

IF LATUSLD .AND. NPOSB2Z > 0 
	B2Z->(DBGOTO(NPOSB2Z))
	B2Z->(RECLOCK("B2Z", .F.))
		IF NQTDATUZ == 0
			NQTD -= NSLDPREV
			B2Z->B2Z_SALDO := NQTD
		ELSE
			NTEMP := B2Z->B2Z_SALDO + NQTDATUZ
			B2Z->B2Z_SALDO := NTEMP
		ENDIF						
	B2Z->( MSUNLOCK() )									
ENDIF

TABPROCB2Z->(DBCLOSEAREA())

RESTAREA(AAREAB2Z)
RETURN	({LRET, CNIVAUT, CCHVNIV, NQTD})


//FUNÇÃO GENÉRICA PARA INCLUSÃO DA PESQUISA DE SE2 EM QUERIES QUE NECESSITEM DA BUSCA.
FUNCTION KEYBREAK(CCMPCHAVE)
LOCAL CSUBS		 := ""
LOCAL CTYPDB	 := UPPER(TCGETDB())
LOCAL CSUBSTR	 := IIF( 'MSSQL' $ CTYPDB, 'SUBSTRING(','SUBSTR(')
LOCAL NTAME2_FIL := TAMSX3("E2_FILIAL") [1]
LOCAL NTAME2_PRE := TAMSX3("E2_PREFIXO")[1]
LOCAL NTAME2_NUM := TAMSX3("E2_NUM")	[1]
LOCAL NTAME2_PAR := TAMSX3("E2_PARCELA")[1]
LOCAL NTAME2_TIP := TAMSX3("E2_TIPO")   [1]
LOCAL NTAME2_FOR := TAMSX3("E2_FORNECE")[1]
LOCAL NTAME2_LOJ := TAMSX3("E2_LOJA")   [1]

CSUBS += " E2_FILIAL      = " + CSUBSTR + CCMPCHAVE + ",1," + ALLTRIM( STR( NTAME2_FIL ) ) + " ) "
CSUBS += " AND E2_PREFIXO = " + CSUBSTR + CCMPCHAVE + ", "  + ALLTRIM( STR( NTAME2_FIL + 2) ) + ", " + ALLTRIM(STR(NTAME2_PRE ) ) + " ) "
CSUBS += " AND E2_NUM     = " + CSUBSTR + CCMPCHAVE + ", "  + ALLTRIM( STR( NTAME2_FIL + NTAME2_PRE + 3) ) + ", " +  ALLTRIM(STR(NTAME2_NUM ) ) + " ) "
CSUBS += " AND E2_PARCELA = " + CSUBSTR + CCMPCHAVE + ", "  + ALLTRIM( STR( NTAME2_FIL + NTAME2_PRE + NTAME2_NUM + 4) ) + ", " +  ALLTRIM(STR(NTAME2_PAR ) ) + " ) "
CSUBS += " AND E2_TIPO    = " + CSUBSTR + CCMPCHAVE + ", "  + ALLTRIM( STR( NTAME2_FIL + NTAME2_PRE + NTAME2_NUM + NTAME2_PAR + 5) ) + ", " +  ALLTRIM(STR(NTAME2_TIP ) ) + " ) "
CSUBS += " AND E2_FORNECE = " + CSUBSTR + CCMPCHAVE + ", "  + ALLTRIM( STR( NTAME2_FIL + NTAME2_PRE + NTAME2_NUM + NTAME2_PAR + NTAME2_TIP + 6) ) + ", " +  ALLTRIM(STR(NTAME2_FOR) )  + " ) "
CSUBS += " AND E2_LOJA    = " + CSUBSTR + CCMPCHAVE + ", "  + ALLTRIM( STR( NTAME2_FIL + NTAME2_PRE + NTAME2_NUM + NTAME2_PAR + NTAME2_TIP + NTAME2_FOR + 7) ) + ", " +  ALLTRIM(STR(NTAME2_LOJ ) ) + " ) "

RETURN CSUBS

/*/{PROTHEUS.DOC} PLSRETRAS
RETORNA O CÓDIGO DAS FAMÍLIAS QUE POSSUEM CÓDIGO DE RASTREIO
/*/
FUNCTION PLSRETRAS(CCODRDAS)  

LOCAL   CSQLRAS    := ""
LOCAL   CRETMATRIC := ""

DEFAULT CCODRDAS   := ""

CSQLRAS := " SELECT BA3_CODINT, BA3_CODEMP, BA3_MATRIC"
CSQLRAS += " FROM " + RETSQLNAME("BA3")
CSQLRAS += " WHERE"
CSQLRAS += " BA3_CODRAS = '" + CCODRDAS + "' AND "
CSQLRAS += RETSQLNAME("BA3")+".D_E_L_E_T_ = ' ' "

DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CSQLRAS),"TRBRAS",.F.,.T.)
	
WHILE !TRBRAS->(EOF())

	CRETMATRIC += "'" + TRBRAS->(BA3_CODINT + BA3_CODEMP + BA3_MATRIC) + "',"
	
	TRBRAS->(DBSKIP())
ENDDO

//RETIRA A ULTIMA VIRGULA
IF !EMPTY(CRETMATRIC)
	CRETMATRIC := SUBSTR(CRETMATRIC, 1, LEN(CRETMATRIC) - 1)
ENDIF

TRBRAS->(DBCLOSEAREA())

RETURN CRETMATRIC
