# Generated from Advpl.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0080")
        buf.write("\u03a0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\3\2\7\2\u008a\n\2\f\2\16\2\u008d\13\2\3\2\7\2\u0090")
        buf.write("\n\2\f\2\16\2\u0093\13\2\3\2\5\2\u0096\n\2\3\3\3\3\3\3")
        buf.write("\5\3\u009b\n\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u00a4\n")
        buf.write("\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00bb\n\7\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\5\n\u00c5\n\n\3\n\5\n\u00c8\n")
        buf.write("\n\3\n\3\n\3\n\7\n\u00cd\n\n\f\n\16\n\u00d0\13\n\3\n\7")
        buf.write("\n\u00d3\n\n\f\n\16\n\u00d6\13\n\3\n\3\n\3\n\5\n\u00db")
        buf.write("\n\n\3\n\3\n\5\n\u00df\n\n\3\13\3\13\3\13\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u00e8\n\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u00f1")
        buf.write("\n\r\3\r\3\r\3\16\3\16\3\16\3\16\5\16\u00f9\n\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\5\17\u0101\n\17\3\17\5\17\u0104")
        buf.write("\n\17\3\17\3\17\3\17\3\17\5\17\u010a\n\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\5\20\u0114\n\20\3\20\3\20")
        buf.write("\7\20\u0118\n\20\f\20\16\20\u011b\13\20\3\20\7\20\u011e")
        buf.write("\n\20\f\20\16\20\u0121\13\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\5\21\u012a\n\21\3\21\3\21\5\21\u012e\n\21\3")
        buf.write("\21\3\21\5\21\u0132\n\21\3\21\3\21\5\21\u0136\n\21\3\21")
        buf.write("\3\21\5\21\u013a\n\21\3\21\3\21\5\21\u013e\n\21\3\21\3")
        buf.write("\21\5\21\u0142\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u014b\n\22\3\22\3\22\5\22\u014f\n\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u0155\n\22\3\22\3\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\7\23\u0161\n\23\f\23\16\23\u0164")
        buf.write("\13\23\3\23\7\23\u0167\n\23\f\23\16\23\u016a\13\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u0174\n\24\3")
        buf.write("\24\3\24\3\25\3\25\3\25\5\25\u017b\n\25\3\25\3\25\5\25")
        buf.write("\u017f\n\25\3\25\3\25\3\26\3\26\3\26\5\26\u0186\n\26\3")
        buf.write("\26\5\26\u0189\n\26\3\26\3\26\3\26\3\26\5\26\u018f\n\26")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\5\31\u019c\n\31\3\32\3\32\3\32\3\32\3\32\7\32\u01a3\n")
        buf.write("\32\f\32\16\32\u01a6\13\32\3\32\3\32\3\32\3\33\3\33\3")
        buf.write("\33\3\33\3\34\3\34\3\34\5\34\u01b2\n\34\3\34\5\34\u01b5")
        buf.write("\n\34\3\34\5\34\u01b8\n\34\3\34\3\34\3\34\3\34\5\34\u01be")
        buf.write("\n\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\7\36\u01ca\n\36\f\36\16\36\u01cd\13\36\3\36\3\36\3\36")
        buf.write("\3\37\5\37\u01d3\n\37\3\37\3\37\3\37\3\37\5\37\u01d9\n")
        buf.write("\37\3\37\5\37\u01dc\n\37\3\37\3\37\5\37\u01e0\n\37\3\37")
        buf.write("\5\37\u01e3\n\37\3\37\3\37\3 \3 \3 \7 \u01ea\n \f \16")
        buf.write(" \u01ed\13 \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\6\"\u01fb\n\"\r\"\16\"\u01fc\3#\3#\3$\3$\3$\7$\u0204")
        buf.write("\n$\f$\16$\u0207\13$\3%\3%\3%\3%\7%\u020d\n%\f%\16%\u0210")
        buf.write("\13%\3&\3&\3&\3&\7&\u0216\n&\f&\16&\u0219\13&\3\'\3\'")
        buf.write("\3\'\3(\3(\3(\3(\3(\3(\3(\5(\u0225\n(\3(\3(\3(\3(\5(\u022b")
        buf.write("\n(\3)\3)\3)\7)\u0230\n)\f)\16)\u0233\13)\3*\3*\3*\5*")
        buf.write("\u0238\n*\3*\6*\u023b\n*\r*\16*\u023c\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u024d\n+\3,\3,\5,\u0251\n")
        buf.write(",\3-\3-\3.\3.\3/\3/\3/\3/\3/\3/\5/\u025d\n/\3/\3/\3/\5")
        buf.write("/\u0262\n/\3/\3/\3/\3/\5/\u0268\n/\3/\3/\3/\3/\5/\u026e")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\5/\u0282\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u028e")
        buf.write("\n/\7/\u0290\n/\f/\16/\u0293\13/\3\60\3\60\3\60\3\60\3")
        buf.write("\60\5\60\u029a\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60")
        buf.write("\u02a2\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u02aa\n")
        buf.write("\60\3\60\3\60\5\60\u02ae\n\60\3\60\3\60\3\60\5\60\u02b3")
        buf.write("\n\60\6\60\u02b5\n\60\r\60\16\60\u02b6\3\60\3\60\7\60")
        buf.write("\u02bb\n\60\f\60\16\60\u02be\13\60\3\60\6\60\u02c1\n\60")
        buf.write("\r\60\16\60\u02c2\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write("\60\5\60\u02cd\n\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60")
        buf.write("\u02d5\n\60\f\60\16\60\u02d8\13\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u02e4\n\60\3\60\5")
        buf.write("\60\u02e7\n\60\5\60\u02e9\n\60\3\61\3\61\3\62\3\62\3\63")
        buf.write("\3\63\3\63\3\63\6\63\u02f3\n\63\r\63\16\63\u02f4\3\64")
        buf.write("\3\64\3\64\5\64\u02fa\n\64\3\64\5\64\u02fd\n\64\3\65\3")
        buf.write("\65\3\65\3\65\3\66\3\66\3\66\7\66\u0306\n\66\f\66\16\66")
        buf.write("\u0309\13\66\3\67\5\67\u030c\n\67\38\38\39\39\39\39\3")
        buf.write("9\39\59\u0316\n9\3:\3:\3:\3:\3:\5:\u031d\n:\3:\3:\5:\u0321")
        buf.write("\n:\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\7;\u032e\n;\f;\16")
        buf.write(";\u0331\13;\3;\3;\3;\3;\7;\u0337\n;\f;\16;\u033a\13;\3")
        buf.write(";\3;\3;\3;\5;\u0340\n;\3<\3<\3<\3<\3<\3<\5<\u0348\n<\3")
        buf.write("<\3<\5<\u034c\n<\3<\3<\5<\u0350\n<\3=\3=\3=\5=\u0355\n")
        buf.write("=\3>\3>\3?\3?\3?\3?\5?\u035d\n?\3?\3?\5?\u0361\n?\3@\3")
        buf.write("@\3@\3@\3@\3@\5@\u0369\n@\6@\u036b\n@\r@\16@\u036c\3@")
        buf.write("\3@\5@\u0371\n@\5@\u0373\n@\3@\3@\3@\3@\5@\u0379\n@\5")
        buf.write("@\u037b\n@\3@\5@\u037e\n@\3A\3A\5A\u0382\nA\3A\3A\3A\3")
        buf.write("A\7A\u0388\nA\fA\16A\u038b\13A\6A\u038d\nA\rA\16A\u038e")
        buf.write("\3B\3B\3B\3C\3C\3C\3C\3D\6D\u0399\nD\rD\16D\u039a\3D\5")
        buf.write("D\u039e\nD\3D\2\3\\E\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\2\r\3\2|}\3\2\62\63")
        buf.write("\4\2HJMM\3\2\4\7\4\2__nn\5\2\r\20\"\"ww\n\2--??LLPPSS")
        buf.write("VWiiyy\r\2\21\21--\67\67??LMPPRRVVaaegyy\3\2CD\4\2\23")
        buf.write("\23>?\4\2\30\30ww\2\u0411\2\u008b\3\2\2\2\4\u009a\3\2")
        buf.write("\2\2\6\u009c\3\2\2\2\b\u00a3\3\2\2\2\n\u00a5\3\2\2\2\f")
        buf.write("\u00ba\3\2\2\2\16\u00bc\3\2\2\2\20\u00be\3\2\2\2\22\u00c1")
        buf.write("\3\2\2\2\24\u00e0\3\2\2\2\26\u00e3\3\2\2\2\30\u00eb\3")
        buf.write("\2\2\2\32\u00f4\3\2\2\2\34\u00fc\3\2\2\2\36\u010d\3\2")
        buf.write("\2\2 \u0126\3\2\2\2\"\u0145\3\2\2\2$\u0158\3\2\2\2&\u016e")
        buf.write("\3\2\2\2(\u0177\3\2\2\2*\u0182\3\2\2\2,\u0192\3\2\2\2")
        buf.write(".\u0195\3\2\2\2\60\u0198\3\2\2\2\62\u019d\3\2\2\2\64\u01aa")
        buf.write("\3\2\2\2\66\u01ae\3\2\2\28\u01c1\3\2\2\2:\u01c4\3\2\2")
        buf.write("\2<\u01d2\3\2\2\2>\u01e6\3\2\2\2@\u01ee\3\2\2\2B\u01fa")
        buf.write("\3\2\2\2D\u01fe\3\2\2\2F\u0200\3\2\2\2H\u0208\3\2\2\2")
        buf.write("J\u0211\3\2\2\2L\u021a\3\2\2\2N\u022a\3\2\2\2P\u022c\3")
        buf.write("\2\2\2R\u023a\3\2\2\2T\u024c\3\2\2\2V\u024e\3\2\2\2X\u0252")
        buf.write("\3\2\2\2Z\u0254\3\2\2\2\\\u0261\3\2\2\2^\u02e8\3\2\2\2")
        buf.write("`\u02ea\3\2\2\2b\u02ec\3\2\2\2d\u02f2\3\2\2\2f\u02f6\3")
        buf.write("\2\2\2h\u02fe\3\2\2\2j\u0302\3\2\2\2l\u030b\3\2\2\2n\u030d")
        buf.write("\3\2\2\2p\u0315\3\2\2\2r\u0317\3\2\2\2t\u0324\3\2\2\2")
        buf.write("v\u0341\3\2\2\2x\u0351\3\2\2\2z\u0356\3\2\2\2|\u0358\3")
        buf.write("\2\2\2~\u0362\3\2\2\2\u0080\u0381\3\2\2\2\u0082\u0390")
        buf.write("\3\2\2\2\u0084\u0393\3\2\2\2\u0086\u039d\3\2\2\2\u0088")
        buf.write("\u008a\5\4\3\2\u0089\u0088\3\2\2\2\u008a\u008d\3\2\2\2")
        buf.write("\u008b\u0089\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u0091\3")
        buf.write("\2\2\2\u008d\u008b\3\2\2\2\u008e\u0090\5\f\7\2\u008f\u008e")
        buf.write("\3\2\2\2\u0090\u0093\3\2\2\2\u0091\u008f\3\2\2\2\u0091")
        buf.write("\u0092\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2")
        buf.write("\u0094\u0096\7\2\2\3\u0095\u0094\3\2\2\2\u0095\u0096\3")
        buf.write("\2\2\2\u0096\3\3\2\2\2\u0097\u009b\5\6\4\2\u0098\u009b")
        buf.write("\5\u0086D\2\u0099\u009b\5\20\t\2\u009a\u0097\3\2\2\2\u009a")
        buf.write("\u0098\3\2\2\2\u009a\u0099\3\2\2\2\u009b\5\3\2\2\2\u009c")
        buf.write("\u009d\7u\2\2\u009d\u009e\t\2\2\2\u009e\7\3\2\2\2\u009f")
        buf.write("\u00a0\t\3\2\2\u00a0\u00a4\5\\/\2\u00a1\u00a4\7\64\2\2")
        buf.write("\u00a2\u00a4\7\65\2\2\u00a3\u009f\3\2\2\2\u00a3\u00a1")
        buf.write("\3\2\2\2\u00a3\u00a2\3\2\2\2\u00a4\t\3\2\2\2\u00a5\u00a6")
        buf.write("\7\61\2\2\u00a6\u00a7\5b\62\2\u00a7\u00a8\5\\/\2\u00a8")
        buf.write("\u00a9\5\u0086D\2\u00a9\13\3\2\2\2\u00aa\u00bb\5\22\n")
        buf.write("\2\u00ab\u00bb\5\34\17\2\u00ac\u00bb\5<\37\2\u00ad\u00bb")
        buf.write("\5$\23\2\u00ae\u00bb\5\"\22\2\u00af\u00bb\5*\26\2\u00b0")
        buf.write("\u00bb\5\20\t\2\u00b1\u00bb\5\62\32\2\u00b2\u00bb\5\66")
        buf.write("\34\2\u00b3\u00bb\5:\36\2\u00b4\u00bb\5\u0086D\2\u00b5")
        buf.write("\u00bb\5\n\6\2\u00b6\u00bb\5\36\20\2\u00b7\u00b8\5\b\5")
        buf.write("\2\u00b8\u00b9\5\u0086D\2\u00b9\u00bb\3\2\2\2\u00ba\u00aa")
        buf.write("\3\2\2\2\u00ba\u00ab\3\2\2\2\u00ba\u00ac\3\2\2\2\u00ba")
        buf.write("\u00ad\3\2\2\2\u00ba\u00ae\3\2\2\2\u00ba\u00af\3\2\2\2")
        buf.write("\u00ba\u00b0\3\2\2\2\u00ba\u00b1\3\2\2\2\u00ba\u00b2\3")
        buf.write("\2\2\2\u00ba\u00b3\3\2\2\2\u00ba\u00b4\3\2\2\2\u00ba\u00b5")
        buf.write("\3\2\2\2\u00ba\u00b6\3\2\2\2\u00ba\u00b7\3\2\2\2\u00bb")
        buf.write("\r\3\2\2\2\u00bc\u00bd\t\4\2\2\u00bd\17\3\2\2\2\u00be")
        buf.write("\u00bf\7H\2\2\u00bf\u00c0\5F$\2\u00c0\21\3\2\2\2\u00c1")
        buf.write("\u00c2\7S\2\2\u00c2\u00c4\5b\62\2\u00c3\u00c5\7o\2\2\u00c4")
        buf.write("\u00c3\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c7\3\2\2\2")
        buf.write("\u00c6\u00c8\5\24\13\2\u00c7\u00c6\3\2\2\2\u00c7\u00c8")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00ce\5\u0086D\2\u00ca")
        buf.write("\u00cd\5\26\f\2\u00cb\u00cd\5\30\r\2\u00cc\u00ca\3\2\2")
        buf.write("\2\u00cc\u00cb\3\2\2\2\u00cd\u00d0\3\2\2\2\u00ce\u00cc")
        buf.write("\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d4\3\2\2\2\u00d0")
        buf.write("\u00ce\3\2\2\2\u00d1\u00d3\5\32\16\2\u00d2\u00d1\3\2\2")
        buf.write("\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5")
        buf.write("\3\2\2\2\u00d5\u00da\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7")
        buf.write("\u00db\7T\2\2\u00d8\u00d9\7?\2\2\u00d9\u00db\7S\2\2\u00da")
        buf.write("\u00d7\3\2\2\2\u00da\u00d8\3\2\2\2\u00db\u00de\3\2\2\2")
        buf.write("\u00dc\u00df\5\u0086D\2\u00dd\u00df\7\2\2\3\u00de\u00dc")
        buf.write("\3\2\2\2\u00de\u00dd\3\2\2\2\u00df\23\3\2\2\2\u00e0\u00e1")
        buf.write("\7W\2\2\u00e1\u00e2\5b\62\2\u00e2\25\3\2\2\2\u00e3\u00e4")
        buf.write("\7V\2\2\u00e4\u00e7\5b\62\2\u00e5\u00e6\7f\2\2\u00e6\u00e8")
        buf.write("\5\60\31\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8")
        buf.write("\u00e9\3\2\2\2\u00e9\u00ea\5\u0086D\2\u00ea\27\3\2\2\2")
        buf.write("\u00eb\u00ec\7o\2\2\u00ec\u00ed\7V\2\2\u00ed\u00f0\5b")
        buf.write("\62\2\u00ee\u00ef\7f\2\2\u00ef\u00f1\5\60\31\2\u00f0\u00ee")
        buf.write("\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f3\5\u0086D\2\u00f3\31\3\2\2\2\u00f4\u00f5\7U\2\2")
        buf.write("\u00f5\u00f6\5b\62\2\u00f6\u00f8\5h\65\2\u00f7\u00f9\7")
        buf.write("\3\2\2\u00f8\u00f7\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa")
        buf.write("\3\2\2\2\u00fa\u00fb\5\u0086D\2\u00fb\33\3\2\2\2\u00fc")
        buf.write("\u00fd\7U\2\2\u00fd\u0103\5b\62\2\u00fe\u0100\7q\2\2\u00ff")
        buf.write("\u0101\5> \2\u0100\u00ff\3\2\2\2\u0100\u0101\3\2\2\2\u0101")
        buf.write("\u0102\3\2\2\2\u0102\u0104\7r\2\2\u0103\u00fe\3\2\2\2")
        buf.write("\u0103\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0106\7")
        buf.write("S\2\2\u0106\u0107\5b\62\2\u0107\u0109\5\u0086D\2\u0108")
        buf.write("\u010a\5B\"\2\u0109\u0108\3\2\2\2\u0109\u010a\3\2\2\2")
        buf.write("\u010a\u010b\3\2\2\2\u010b\u010c\5R*\2\u010c\35\3\2\2")
        buf.write("\2\u010d\u010e\7_\2\2\u010e\u010f\5b\62\2\u010f\u0110")
        buf.write("\7e\2\2\u0110\u0113\5\\/\2\u0111\u0112\7`\2\2\u0112\u0114")
        buf.write("\5p9\2\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\u0119\5\u0086D\2\u0116\u0118\5&\24\2\u0117")
        buf.write("\u0116\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2")
        buf.write("\u0119\u011a\3\2\2\2\u011a\u011f\3\2\2\2\u011b\u0119\3")
        buf.write("\2\2\2\u011c\u011e\5 \21\2\u011d\u011c\3\2\2\2\u011e\u0121")
        buf.write("\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\u0122\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123\7?\2\2")
        buf.write("\u0123\u0124\7_\2\2\u0124\u0125\5\u0086D\2\u0125\37\3")
        buf.write("\2\2\2\u0126\u0127\7a\2\2\u0127\u0129\t\5\2\2\u0128\u012a")
        buf.write("\5b\62\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2\u012a")
        buf.write("\u012d\3\2\2\2\u012b\u012c\7e\2\2\u012c\u012e\5\\/\2\u012d")
        buf.write("\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0131\3\2\2\2")
        buf.write("\u012f\u0130\7j\2\2\u0130\u0132\5p9\2\u0131\u012f\3\2")
        buf.write("\2\2\u0131\u0132\3\2\2\2\u0132\u0135\3\2\2\2\u0133\u0134")
        buf.write("\7\b\2\2\u0134\u0136\5\\/\2\u0135\u0133\3\2\2\2\u0135")
        buf.write("\u0136\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0138\7h\2\2")
        buf.write("\u0138\u013a\5b\62\2\u0139\u0137\3\2\2\2\u0139\u013a\3")
        buf.write("\2\2\2\u013a\u013d\3\2\2\2\u013b\u013c\7l\2\2\u013c\u013e")
        buf.write("\5p9\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0141")
        buf.write("\3\2\2\2\u013f\u0140\7k\2\2\u0140\u0142\5b\62\2\u0141")
        buf.write("\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\3\2\2\2")
        buf.write("\u0143\u0144\5\u0086D\2\u0144!\3\2\2\2\u0145\u0146\7a")
        buf.write("\2\2\u0146\u0147\t\5\2\2\u0147\u014a\5b\62\2\u0148\u0149")
        buf.write("\7p\2\2\u0149\u014b\5j\66\2\u014a\u0148\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014d\7m\2\2")
        buf.write("\u014d\u014f\5j\66\2\u014e\u014c\3\2\2\2\u014e\u014f\3")
        buf.write("\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\t\6\2\2\u0151\u0152")
        buf.write("\5b\62\2\u0152\u0154\5\u0086D\2\u0153\u0155\5B\"\2\u0154")
        buf.write("\u0153\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0156\3\2\2\2")
        buf.write("\u0156\u0157\5R*\2\u0157#\3\2\2\2\u0158\u0159\7Y\2\2\u0159")
        buf.write("\u015a\5b\62\2\u015a\u015b\7e\2\2\u015b\u015c\5p9\2\u015c")
        buf.write("\u015d\7\\\2\2\u015d\u015e\5p9\2\u015e\u0162\5\u0086D")
        buf.write("\2\u015f\u0161\5&\24\2\u0160\u015f\3\2\2\2\u0161\u0164")
        buf.write("\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0163\3\2\2\2\u0163")
        buf.write("\u0168\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0167\5(\25\2")
        buf.write("\u0166\u0165\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166\3")
        buf.write("\2\2\2\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0168")
        buf.write("\3\2\2\2\u016b\u016c\7^\2\2\u016c\u016d\5\u0086D\2\u016d")
        buf.write("%\3\2\2\2\u016e\u016f\7b\2\2\u016f\u0170\5b\62\2\u0170")
        buf.write("\u0171\7f\2\2\u0171\u0173\5\60\31\2\u0172\u0174\7i\2\2")
        buf.write("\u0173\u0172\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3")
        buf.write("\2\2\2\u0175\u0176\5\u0086D\2\u0176\'\3\2\2\2\u0177\u0178")
        buf.write("\7a\2\2\u0178\u017a\5b\62\2\u0179\u017b\5h\65\2\u017a")
        buf.write("\u0179\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017e\3\2\2\2")
        buf.write("\u017c\u017d\7e\2\2\u017d\u017f\5p9\2\u017e\u017c\3\2")
        buf.write("\2\2\u017e\u017f\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181")
        buf.write("\5\u0086D\2\u0181)\3\2\2\2\u0182\u0183\7a\2\2\u0183\u0185")
        buf.write("\5b\62\2\u0184\u0186\5,\27\2\u0185\u0184\3\2\2\2\u0185")
        buf.write("\u0186\3\2\2\2\u0186\u0188\3\2\2\2\u0187\u0189\5.\30\2")
        buf.write("\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\3")
        buf.write("\2\2\2\u018a\u018b\7Y\2\2\u018b\u018c\5b\62\2\u018c\u018e")
        buf.write("\5\u0086D\2\u018d\u018f\5B\"\2\u018e\u018d\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\5R*\2\u0191")
        buf.write("+\3\2\2\2\u0192\u0193\7c\2\2\u0193\u0194\5> \2\u0194-")
        buf.write("\3\2\2\2\u0195\u0196\7d\2\2\u0196\u0197\5> \2\u0197/\3")
        buf.write("\2\2\2\u0198\u019b\5b\62\2\u0199\u019a\7g\2\2\u019a\u019c")
        buf.write("\5b\62\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c")
        buf.write("\61\3\2\2\2\u019d\u019e\7X\2\2\u019e\u019f\5b\62\2\u019f")
        buf.write("\u01a4\5\u0086D\2\u01a0\u01a3\5&\24\2\u01a1\u01a3\5\64")
        buf.write("\33\2\u01a2\u01a0\3\2\2\2\u01a2\u01a1\3\2\2\2\u01a3\u01a6")
        buf.write("\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5")
        buf.write("\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01a8\7]\2\2")
        buf.write("\u01a8\u01a9\5\u0086D\2\u01a9\63\3\2\2\2\u01aa\u01ab\7")
        buf.write("a\2\2\u01ab\u01ac\5b\62\2\u01ac\u01ad\5\u0086D\2\u01ad")
        buf.write("\65\3\2\2\2\u01ae\u01af\7a\2\2\u01af\u01b1\5b\62\2\u01b0")
        buf.write("\u01b2\5.\30\2\u01b1\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2")
        buf.write("\u01b2\u01b4\3\2\2\2\u01b3\u01b5\5> \2\u01b4\u01b3\3\2")
        buf.write("\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b7\3\2\2\2\u01b6\u01b8")
        buf.write("\5,\27\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\u01ba\7X\2\2\u01ba\u01bb\5b\62\2")
        buf.write("\u01bb\u01bd\5\u0086D\2\u01bc\u01be\5B\"\2\u01bd\u01bc")
        buf.write("\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf")
        buf.write("\u01c0\5R*\2\u01c0\67\3\2\2\2\u01c1\u01c2\7?\2\2\u01c2")
        buf.write("\u01c3\7a\2\2\u01c39\3\2\2\2\u01c4\u01c5\7Z\2\2\u01c5")
        buf.write("\u01c6\5b\62\2\u01c6\u01cb\5\u0086D\2\u01c7\u01ca\5&\24")
        buf.write("\2\u01c8\u01ca\5\64\33\2\u01c9\u01c7\3\2\2\2\u01c9\u01c8")
        buf.write("\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01cb\3\2\2\2")
        buf.write("\u01ce\u01cf\7[\2\2\u01cf\u01d0\5\u0086D\2\u01d0;\3\2")
        buf.write("\2\2\u01d1\u01d3\5\16\b\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3")
        buf.write("\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\7K\2\2\u01d5")
        buf.write("\u01db\5b\62\2\u01d6\u01d8\7q\2\2\u01d7\u01d9\5> \2\u01d8")
        buf.write("\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da\u01dc\7r\2\2\u01db\u01d6\3\2\2\2\u01db\u01dc\3")
        buf.write("\2\2\2\u01dc\u01df\3\2\2\2\u01dd\u01e0\5\u0086D\2\u01de")
        buf.write("\u01e0\7\2\2\3\u01df\u01dd\3\2\2\2\u01df\u01de\3\2\2\2")
        buf.write("\u01e0\u01e2\3\2\2\2\u01e1\u01e3\5B\"\2\u01e2\u01e1\3")
        buf.write("\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5")
        buf.write("\5R*\2\u01e5=\3\2\2\2\u01e6\u01eb\5@!\2\u01e7\u01e8\7")
        buf.write("v\2\2\u01e8\u01ea\5@!\2\u01e9\u01e7\3\2\2\2\u01ea\u01ed")
        buf.write("\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec")
        buf.write("?\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ee\u01ef\5b\62\2\u01ef")
        buf.write("A\3\2\2\2\u01f0\u01f1\7E\2\2\u01f1\u01f2\5F$\2\u01f2\u01f3")
        buf.write("\5\u0086D\2\u01f3\u01fb\3\2\2\2\u01f4\u01f5\5\b\5\2\u01f5")
        buf.write("\u01f6\5\u0086D\2\u01f6\u01fb\3\2\2\2\u01f7\u01f8\5D#")
        buf.write("\2\u01f8\u01f9\5\u0086D\2\u01f9\u01fb\3\2\2\2\u01fa\u01f0")
        buf.write("\3\2\2\2\u01fa\u01f4\3\2\2\2\u01fa\u01f7\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2")
        buf.write("\u01fdC\3\2\2\2\u01fe\u01ff\5\20\t\2\u01ffE\3\2\2\2\u0200")
        buf.write("\u0205\5\\/\2\u0201\u0202\7v\2\2\u0202\u0204\5\\/\2\u0203")
        buf.write("\u0201\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3\2\2\2")
        buf.write("\u0205\u0206\3\2\2\2\u0206G\3\2\2\2\u0207\u0205\3\2\2")
        buf.write("\2\u0208\u0209\7G\2\2\u0209\u020e\5\\/\2\u020a\u020b\7")
        buf.write("v\2\2\u020b\u020d\5\\/\2\u020c\u020a\3\2\2\2\u020d\u0210")
        buf.write("\3\2\2\2\u020e\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f")
        buf.write("I\3\2\2\2\u0210\u020e\3\2\2\2\u0211\u0212\7F\2\2\u0212")
        buf.write("\u0217\5\\/\2\u0213\u0214\7v\2\2\u0214\u0216\5\\/\2\u0215")
        buf.write("\u0213\3\2\2\2\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2")
        buf.write("\u0217\u0218\3\2\2\2\u0218K\3\2\2\2\u0219\u0217\3\2\2")
        buf.write("\2\u021a\u021b\7P\2\2\u021b\u021c\5\\/\2\u021cM\3\2\2")
        buf.write("\2\u021d\u021e\7\t\2\2\u021e\u021f\5j\66\2\u021f\u0220")
        buf.write("\7\n\2\2\u0220\u022b\3\2\2\2\u0221\u0222\7\t\2\2\u0222")
        buf.write("\u0224\7\13\2\2\u0223\u0225\5P)\2\u0224\u0223\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\7")
        buf.write("\13\2\2\u0227\u0228\5j\66\2\u0228\u0229\7\n\2\2\u0229")
        buf.write("\u022b\3\2\2\2\u022a\u021d\3\2\2\2\u022a\u0221\3\2\2\2")
        buf.write("\u022bO\3\2\2\2\u022c\u0231\5b\62\2\u022d\u022e\7v\2\2")
        buf.write("\u022e\u0230\5b\62\2\u022f\u022d\3\2\2\2\u0230\u0233\3")
        buf.write("\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232Q")
        buf.write("\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0237\5T+\2\u0235\u0238")
        buf.write("\5\u0086D\2\u0236\u0238\7\2\2\3\u0237\u0235\3\2\2\2\u0237")
        buf.write("\u0236\3\2\2\2\u0238\u023b\3\2\2\2\u0239\u023b\5\u0086")
        buf.write("D\2\u023a\u0234\3\2\2\2\u023a\u0239\3\2\2\2\u023b\u023c")
        buf.write("\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2\u023d")
        buf.write("S\3\2\2\2\u023e\u024d\5Z.\2\u023f\u024d\5t;\2\u0240\u024d")
        buf.write("\5v<\2\u0241\u024d\5x=\2\u0242\u024d\5|?\2\u0243\u024d")
        buf.write("\5~@\2\u0244\u024d\5V,\2\u0245\u024d\5J&\2\u0246\u024d")
        buf.write("\5z>\2\u0247\u024d\5L\'\2\u0248\u024d\5H%\2\u0249\u024d")
        buf.write("\5\20\t\2\u024a\u024d\5\b\5\2\u024b\u024d\5\u0080A\2\u024c")
        buf.write("\u023e\3\2\2\2\u024c\u023f\3\2\2\2\u024c\u0240\3\2\2\2")
        buf.write("\u024c\u0241\3\2\2\2\u024c\u0242\3\2\2\2\u024c\u0243\3")
        buf.write("\2\2\2\u024c\u0244\3\2\2\2\u024c\u0245\3\2\2\2\u024c\u0246")
        buf.write("\3\2\2\2\u024c\u0247\3\2\2\2\u024c\u0248\3\2\2\2\u024c")
        buf.write("\u0249\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024b\3\2\2\2")
        buf.write("\u024dU\3\2\2\2\u024e\u0250\7Q\2\2\u024f\u0251\5X-\2\u0250")
        buf.write("\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251W\3\2\2\2\u0252")
        buf.write("\u0253\5\\/\2\u0253Y\3\2\2\2\u0254\u0255\5\\/\2\u0255")
        buf.write("[\3\2\2\2\u0256\u0257\b/\1\2\u0257\u0262\5^\60\2\u0258")
        buf.write("\u025d\7#\2\2\u0259\u025d\7$\2\2\u025a\u025d\7 \2\2\u025b")
        buf.write("\u025d\7!\2\2\u025c\u0258\3\2\2\2\u025c\u0259\3\2\2\2")
        buf.write("\u025c\u025a\3\2\2\2\u025c\u025b\3\2\2\2\u025d\u025e\3")
        buf.write("\2\2\2\u025e\u0262\5\\/\13\u025f\u0260\7\f\2\2\u0260\u0262")
        buf.write("\5\\/\n\u0261\u0256\3\2\2\2\u0261\u025c\3\2\2\2\u0261")
        buf.write("\u025f\3\2\2\2\u0262\u0291\3\2\2\2\u0263\u0267\f\t\2\2")
        buf.write("\u0264\u0268\7%\2\2\u0265\u0268\7&\2\2\u0266\u0268\7\'")
        buf.write("\2\2\u0267\u0264\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0266")
        buf.write("\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u0290\5\\/\n\u026a")
        buf.write("\u026d\f\b\2\2\u026b\u026e\7#\2\2\u026c\u026e\7$\2\2\u026d")
        buf.write("\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026e\u026f\3\2\2\2")
        buf.write("\u026f\u0290\5\\/\t\u0270\u0271\f\7\2\2\u0271\u0272\7")
        buf.write("N\2\2\u0272\u0290\5\\/\b\u0273\u0274\f\6\2\2\u0274\u0275")
        buf.write("\7O\2\2\u0275\u0290\5\\/\7\u0276\u0281\f\5\2\2\u0277\u0282")
        buf.write("\7\31\2\2\u0278\u0282\7\32\2\2\u0279\u0282\7\26\2\2\u027a")
        buf.write("\u0282\7\27\2\2\u027b\u0282\7\30\2\2\u027c\u0282\7\33")
        buf.write("\2\2\u027d\u0282\7\34\2\2\u027e\u0282\7\35\2\2\u027f\u0282")
        buf.write("\7\36\2\2\u0280\u0282\7\37\2\2\u0281\u0277\3\2\2\2\u0281")
        buf.write("\u0278\3\2\2\2\u0281\u0279\3\2\2\2\u0281\u027a\3\2\2\2")
        buf.write("\u0281\u027b\3\2\2\2\u0281\u027c\3\2\2\2\u0281\u027d\3")
        buf.write("\2\2\2\u0281\u027e\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0280")
        buf.write("\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0290\5\\/\6\u0284")
        buf.write("\u0285\f\4\2\2\u0285\u0286\7+\2\2\u0286\u0290\5\\/\5\u0287")
        buf.write("\u0288\f\3\2\2\u0288\u0289\t\7\2\2\u0289\u0290\5\\/\4")
        buf.write("\u028a\u028d\f\f\2\2\u028b\u028e\7 \2\2\u028c\u028e\7")
        buf.write("!\2\2\u028d\u028b\3\2\2\2\u028d\u028c\3\2\2\2\u028e\u0290")
        buf.write("\3\2\2\2\u028f\u0263\3\2\2\2\u028f\u026a\3\2\2\2\u028f")
        buf.write("\u0270\3\2\2\2\u028f\u0273\3\2\2\2\u028f\u0276\3\2\2\2")
        buf.write("\u028f\u0284\3\2\2\2\u028f\u0287\3\2\2\2\u028f\u028a\3")
        buf.write("\2\2\2\u0290\u0293\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292")
        buf.write("\3\2\2\2\u0292]\3\2\2\2\u0293\u0291\3\2\2\2\u0294\u0295")
        buf.write("\7q\2\2\u0295\u0296\5j\66\2\u0296\u0297\7r\2\2\u0297\u02e9")
        buf.write("\3\2\2\2\u0298\u029a\7(\2\2\u0299\u0298\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\5b\62\2")
        buf.write("\u029c\u029d\5d\63\2\u029d\u02e9\3\2\2\2\u029e\u029f\5")
        buf.write("b\62\2\u029f\u02a1\5h\65\2\u02a0\u02a2\5d\63\2\u02a1\u02a0")
        buf.write("\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02e9\3\2\2\2\u02a3")
        buf.write("\u02a4\5b\62\2\u02a4\u02a5\5h\65\2\u02a5\u02a6\7\21\2")
        buf.write("\2\u02a6\u02a7\5b\62\2\u02a7\u02e9\3\2\2\2\u02a8\u02aa")
        buf.write("\7(\2\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02ad\5b\62\2\u02ac\u02ae\5d\63\2")
        buf.write("\u02ad\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b4\3")
        buf.write("\2\2\2\u02af\u02b0\7\21\2\2\u02b0\u02b2\5b\62\2\u02b1")
        buf.write("\u02b3\5d\63\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2")
        buf.write("\u02b3\u02b5\3\2\2\2\u02b4\u02af\3\2\2\2\u02b5\u02b6\3")
        buf.write("\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02e9")
        buf.write("\3\2\2\2\u02b8\u02bc\5b\62\2\u02b9\u02bb\5d\63\2\u02ba")
        buf.write("\u02b9\3\2\2\2\u02bb\u02be\3\2\2\2\u02bc\u02ba\3\2\2\2")
        buf.write("\u02bc\u02bd\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc\3")
        buf.write("\2\2\2\u02bf\u02c1\5f\64\2\u02c0\u02bf\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3")
        buf.write("\u02e9\3\2\2\2\u02c4\u02c5\5b\62\2\u02c5\u02c6\7q\2\2")
        buf.write("\u02c6\u02c7\7r\2\2\u02c7\u02c8\7\21\2\2\u02c8\u02c9\5")
        buf.write("b\62\2\u02c9\u02ca\5h\65\2\u02ca\u02e9\3\2\2\2\u02cb\u02cd")
        buf.write("\7(\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02e9\5b\62\2\u02cf\u02d0\7(\2\2")
        buf.write("\u02d0\u02d1\7R\2\2\u02d1\u02d6\5b\62\2\u02d2\u02d3\7")
        buf.write("\21\2\2\u02d3\u02d5\5b\62\2\u02d4\u02d2\3\2\2\2\u02d5")
        buf.write("\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02d9\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02da\7")
        buf.write("f\2\2\u02da\u02db\5b\62\2\u02db\u02e9\3\2\2\2\u02dc\u02e9")
        buf.write("\5p9\2\u02dd\u02e9\5N(\2\u02de\u02e9\5r:\2\u02df\u02e0")
        buf.write("\7)\2\2\u02e0\u02e3\5\\/\2\u02e1\u02e2\7\22\2\2\u02e2")
        buf.write("\u02e4\5\\/\2\u02e3\u02e1\3\2\2\2\u02e3\u02e4\3\2\2\2")
        buf.write("\u02e4\u02e6\3\2\2\2\u02e5\u02e7\5f\64\2\u02e6\u02e5\3")
        buf.write("\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e9\3\2\2\2\u02e8\u0294")
        buf.write("\3\2\2\2\u02e8\u0299\3\2\2\2\u02e8\u029e\3\2\2\2\u02e8")
        buf.write("\u02a3\3\2\2\2\u02e8\u02a9\3\2\2\2\u02e8\u02b8\3\2\2\2")
        buf.write("\u02e8\u02c4\3\2\2\2\u02e8\u02cc\3\2\2\2\u02e8\u02cf\3")
        buf.write("\2\2\2\u02e8\u02dc\3\2\2\2\u02e8\u02dd\3\2\2\2\u02e8\u02de")
        buf.write("\3\2\2\2\u02e8\u02df\3\2\2\2\u02e9_\3\2\2\2\u02ea\u02eb")
        buf.write("\t\b\2\2\u02eba\3\2\2\2\u02ec\u02ed\t\t\2\2\u02edc\3\2")
        buf.write("\2\2\u02ee\u02ef\7s\2\2\u02ef\u02f0\5j\66\2\u02f0\u02f1")
        buf.write("\7t\2\2\u02f1\u02f3\3\2\2\2\u02f2\u02ee\3\2\2\2\u02f3")
        buf.write("\u02f4\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2")
        buf.write("\u02f5e\3\2\2\2\u02f6\u02f7\7\21\2\2\u02f7\u02f9\5b\62")
        buf.write("\2\u02f8\u02fa\5h\65\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa")
        buf.write("\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb\u02fd\5d\63\2\u02fc")
        buf.write("\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fdg\3\2\2\2\u02fe")
        buf.write("\u02ff\7q\2\2\u02ff\u0300\5j\66\2\u0300\u0301\7r\2\2\u0301")
        buf.write("i\3\2\2\2\u0302\u0307\5l\67\2\u0303\u0304\7v\2\2\u0304")
        buf.write("\u0306\5l\67\2\u0305\u0303\3\2\2\2\u0306\u0309\3\2\2\2")
        buf.write("\u0307\u0305\3\2\2\2\u0307\u0308\3\2\2\2\u0308k\3\2\2")
        buf.write("\2\u0309\u0307\3\2\2\2\u030a\u030c\5\\/\2\u030b\u030a")
        buf.write("\3\2\2\2\u030b\u030c\3\2\2\2\u030cm\3\2\2\2\u030d\u030e")
        buf.write("\7v\2\2\u030eo\3\2\2\2\u030f\u0316\7x\2\2\u0310\u0316")
        buf.write("\7|\2\2\u0311\u0316\7}\2\2\u0312\u0316\7.\2\2\u0313\u0316")
        buf.write("\7/\2\2\u0314\u0316\7\60\2\2\u0315\u030f\3\2\2\2\u0315")
        buf.write("\u0310\3\2\2\2\u0315\u0311\3\2\2\2\u0315\u0312\3\2\2\2")
        buf.write("\u0315\u0313\3\2\2\2\u0315\u0314\3\2\2\2\u0316q\3\2\2")
        buf.write("\2\u0317\u0318\7;\2\2\u0318\u0319\7q\2\2\u0319\u031a\5")
        buf.write("\\/\2\u031a\u031c\7v\2\2\u031b\u031d\5\\/\2\u031c\u031b")
        buf.write("\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e")
        buf.write("\u0320\7v\2\2\u031f\u0321\5\\/\2\u0320\u031f\3\2\2\2\u0320")
        buf.write("\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\7r\2\2")
        buf.write("\u0323s\3\2\2\2\u0324\u0325\7;\2\2\u0325\u0326\5\\/\2")
        buf.write("\u0326\u0327\5\u0086D\2\u0327\u032f\5R*\2\u0328\u0329")
        buf.write("\7:\2\2\u0329\u032a\5\\/\2\u032a\u032b\5\u0086D\2\u032b")
        buf.write("\u032c\5R*\2\u032c\u032e\3\2\2\2\u032d\u0328\3\2\2\2\u032e")
        buf.write("\u0331\3\2\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2")
        buf.write("\u0330\u0338\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0333\7")
        buf.write("<\2\2\u0333\u0334\5\u0086D\2\u0334\u0335\5R*\2\u0335\u0337")
        buf.write("\3\2\2\2\u0336\u0332\3\2\2\2\u0337\u033a\3\2\2\2\u0338")
        buf.write("\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033f\3\2\2\2")
        buf.write("\u033a\u0338\3\2\2\2\u033b\u0340\7=\2\2\u033c\u0340\7")
        buf.write("?\2\2\u033d\u033e\7?\2\2\u033e\u0340\7;\2\2\u033f\u033b")
        buf.write("\3\2\2\2\u033f\u033c\3\2\2\2\u033f\u033d\3\2\2\2\u0340")
        buf.write("u\3\2\2\2\u0341\u0342\7\66\2\2\u0342\u0343\5\u0084C\2")
        buf.write("\u0343\u0344\7-\2\2\u0344\u0347\5\\/\2\u0345\u0346\7,")
        buf.write("\2\2\u0346\u0348\5\\/\2\u0347\u0345\3\2\2\2\u0347\u0348")
        buf.write("\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034b\5\u0086D\2\u034a")
        buf.write("\u034c\5R*\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c")
        buf.write("\u034d\3\2\2\2\u034d\u034f\7\67\2\2\u034e\u0350\5\\/\2")
        buf.write("\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350w\3\2\2")
        buf.write("\2\u0351\u0354\79\2\2\u0352\u0355\5|?\2\u0353\u0355\5")
        buf.write("~@\2\u0354\u0352\3\2\2\2\u0354\u0353\3\2\2\2\u0355y\3")
        buf.write("\2\2\2\u0356\u0357\t\n\2\2\u0357{\3\2\2\2\u0358\u0359")
        buf.write("\78\2\2\u0359\u035a\5\\/\2\u035a\u035c\5\u0086D\2\u035b")
        buf.write("\u035d\5R*\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d")
        buf.write("\u035e\3\2\2\2\u035e\u0360\t\13\2\2\u035f\u0361\5\u0086")
        buf.write("D\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2\2\2\u0361}\3\2")
        buf.write("\2\2\u0362\u0363\7@\2\2\u0363\u036a\5\u0086D\2\u0364\u0365")
        buf.write("\7@\2\2\u0365\u0366\5\\/\2\u0366\u0368\5\u0086D\2\u0367")
        buf.write("\u0369\5R*\2\u0368\u0367\3\2\2\2\u0368\u0369\3\2\2\2\u0369")
        buf.write("\u036b\3\2\2\2\u036a\u0364\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u0372\3")
        buf.write("\2\2\2\u036e\u0370\7B\2\2\u036f\u0371\5R*\2\u0370\u036f")
        buf.write("\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0373\3\2\2\2\u0372")
        buf.write("\u036e\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u037a\3\2\2\2")
        buf.write("\u0374\u037b\7\24\2\2\u0375\u037b\7A\2\2\u0376\u0378\7")
        buf.write("?\2\2\u0377\u0379\7@\2\2\u0378\u0377\3\2\2\2\u0378\u0379")
        buf.write("\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u0374\3\2\2\2\u037a")
        buf.write("\u0375\3\2\2\2\u037a\u0376\3\2\2\2\u037b\u037d\3\2\2\2")
        buf.write("\u037c\u037e\5\u0086D\2\u037d\u037c\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\177\3\2\2\2\u037f\u0382\5`\61\2\u0380\u0382")
        buf.write("\5\u0082B\2\u0381\u037f\3\2\2\2\u0381\u0380\3\2\2\2\u0382")
        buf.write("\u038c\3\2\2\2\u0383\u038d\5`\61\2\u0384\u0389\5\\/\2")
        buf.write("\u0385\u0386\7v\2\2\u0386\u0388\5\\/\2\u0387\u0385\3\2")
        buf.write("\2\2\u0388\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u0389\u038a")
        buf.write("\3\2\2\2\u038a\u038d\3\2\2\2\u038b\u0389\3\2\2\2\u038c")
        buf.write("\u0383\3\2\2\2\u038c\u0384\3\2\2\2\u038d\u038e\3\2\2\2")
        buf.write("\u038e\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0081\3")
        buf.write("\2\2\2\u0390\u0391\7(\2\2\u0391\u0392\5j\66\2\u0392\u0083")
        buf.write("\3\2\2\2\u0393\u0394\5b\62\2\u0394\u0395\t\f\2\2\u0395")
        buf.write("\u0396\5\\/\2\u0396\u0085\3\2\2\2\u0397\u0399\7~\2\2\u0398")
        buf.write("\u0397\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u0398\3\2\2\2")
        buf.write("\u039a\u039b\3\2\2\2\u039b\u039e\3\2\2\2\u039c\u039e\7")
        buf.write("\25\2\2\u039d\u0398\3\2\2\2\u039d\u039c\3\2\2\2\u039e")
        buf.write("\u0087\3\2\2\2y\u008b\u0091\u0095\u009a\u00a3\u00ba\u00c4")
        buf.write("\u00c7\u00cc\u00ce\u00d4\u00da\u00de\u00e7\u00f0\u00f8")
        buf.write("\u0100\u0103\u0109\u0113\u0119\u011f\u0129\u012d\u0131")
        buf.write("\u0135\u0139\u013d\u0141\u014a\u014e\u0154\u0162\u0168")
        buf.write("\u0173\u017a\u017e\u0185\u0188\u018e\u019b\u01a2\u01a4")
        buf.write("\u01b1\u01b4\u01b7\u01bd\u01c9\u01cb\u01d2\u01d8\u01db")
        buf.write("\u01df\u01e2\u01eb\u01fa\u01fc\u0205\u020e\u0217\u0224")
        buf.write("\u022a\u0231\u0237\u023a\u023c\u024c\u0250\u025c\u0261")
        buf.write("\u0267\u026d\u0281\u028d\u028f\u0291\u0299\u02a1\u02a9")
        buf.write("\u02ad\u02b2\u02b6\u02bc\u02c2\u02cc\u02d6\u02e3\u02e6")
        buf.write("\u02e8\u02f4\u02f9\u02fc\u0307\u030b\u0315\u031c\u0320")
        buf.write("\u032f\u0338\u033f\u0347\u034b\u034f\u0354\u035c\u0360")
        buf.write("\u0368\u036c\u0370\u0372\u0378\u037a\u037d\u0381\u0389")
        buf.write("\u038c\u038e\u039a\u039d")
        return buf.getvalue()


class AdvplParser ( Parser ):

    grammarFileName = "Advpl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'CONSTRUCTOR'", "'GET'", "'PUT'", "'POST'", 
                     "'DELETE'", "'PATH'", "'{'", "'}'", "'|'", "'!'", "'-='", 
                     "'*='", "'/='", "'^'", "':'", "'.'", "'ENDD'", "'ENDC'", 
                     "';'", "'<'", "'>'", "'='", "'<='", "'>='", "'=='", 
                     "'!='", "'<>'", "'#'", "'$'", "'++'", "'--'", "'+='", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'@'", "'&'", "<INVALID>", 
                     "'->'", "'STEP'", "'TO'", "'.T.'", "'.F.'", "'NIL'", 
                     "'#DEFINE'", "'#IFDEF'", "'#IFNDEF'", "'#ELSE'", "'#ENDIF'", 
                     "'FOR'", "'NEXT'", "'WHILE'", "'DO'", "'ELSEIF'", "'IF'", 
                     "'ELSE'", "'ENDIF'", "'ENDDO'", "'END'", "'CASE'", 
                     "'ENDCASE'", "'OTHERWISE'", "'EXIT'", "'LOOP'", "'LOCAL'", 
                     "'PRIVATE'", "'PUBLIC'", "'STATIC'", "'USER'", "'MAIN'", 
                     "'FUNCTION'", "'SELF'", "'PROJECT'", "'.AND.'", "'.OR.'", 
                     "'DEFAULT'", "'RETURN'", "'ASSUME'", "'CLASS'", "'ENDCLASS'", 
                     "'METHOD'", "'DATA'", "'FROM'", "'WSCLIENT'", "'WSSERVICE'", 
                     "'WSSTRUCT'", "'ENDWSSTRUCT'", "'NAMESPACE'", "'ENDWSCLIENT'", 
                     "'ENDWSSERVICE'", "'WSRESTFUL'", "'FORMAT'", "'WSMETHOD'", 
                     "'WSDATA'", "'WSRECEIVE'", "'WSSEND'", "'DESCRIPTION'", 
                     "'AS'", "'OF'", "'PRODUCES'", "'OPTIONAL'", "'WSSYNTAX'", 
                     "'RESPONSE'", "'REQUEST'", "'QUERYPARAM'", "'WSREST'", 
                     "'CAMELCASE'", "'PATHPARAM'", "'('", "')'", "'['", 
                     "']'", "<INVALID>", "','", "':='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "MINOR", "MAJOR", "EQUALS", "MINOREQUALS", "MAJOREQUALS", 
                      "DOUBLEEQUAL", "DIF1", "DIF2", "DIF3", "CONTIDO", 
                      "PLUSPLUS", "MINUSMINUS", "PLUSEQUALS", "PLUS", "MINUS", 
                      "MULT", "DIV", "PERC", "ARROBA", "ECOMERCIAL", "BEGIN_SQL", 
                      "ALIASACCESS", "STEP", "TO", "TRUE", "FALSE", "NIL", 
                      "DEFINE", "IFDEF", "IFNDEF", "ELSEDEF", "ENDIFDEF", 
                      "FOR", "NEXT", "WHILE", "DO", "ELSEIF", "IF", "ELSE", 
                      "ENDIF", "ENDDO", "END", "CASE", "ENDCASE", "OTHERWISE", 
                      "EXIT", "LOOP", "LOCAL", "PRIVATE", "PUBLIC", "STATIC", 
                      "USER", "MAIN", "FUNCTION", "SELF", "PROJECT", "AND", 
                      "OR", "DEFAULT", "RETURN", "ASSUME", "CLASS", "ENDCLASS", 
                      "METHOD", "DATA", "FROM", "WSCLIENT", "WSSERVICE", 
                      "WSSTRUCT", "ENDWSSTRUCT", "NAMESPACE", "ENDWSCLIENT", 
                      "ENDWSSERVICE", "WSRESTFUL", "FORMAT", "WSMETHOD", 
                      "WSDATA", "WSRECEIVE", "WSSEND", "DESCRIPTION", "AS", 
                      "OF", "PRODUCES", "OPTIONAL", "WSSYNTAX", "RESPONSE", 
                      "REQUEST", "QUERYPARAM", "WSREST", "CAMELCASE", "PATHPARAM", 
                      "LPAREN", "RPAREN", "LBRACK", "RBRACK", "INCLUDE", 
                      "COMMA", "ATTRIB_OPERATOR", "NUMBER", "IDENTIFIER", 
                      "COMMENT", "LINE_COMMENT", "STRING", "STRINGSIMPLE", 
                      "CRLF", "WS", "CRLF_ESCAPED" ]

    RULE_program = 0
    RULE_preprocessorDeclaration = 1
    RULE_includeDeclaration = 2
    RULE_ifdef = 3
    RULE_defineDeclaration = 4
    RULE_sources = 5
    RULE_modifiersFunction = 6
    RULE_staticVariable = 7
    RULE_classDeclaration = 8
    RULE_fromClass = 9
    RULE_dataDefinition = 10
    RULE_serializabledataDefinition = 11
    RULE_methodDefinition = 12
    RULE_methodBody = 13
    RULE_restServiceDeclaration = 14
    RULE_restmethodDefinition = 15
    RULE_restmethodBody = 16
    RULE_wsServiceDeclaration = 17
    RULE_wsdataDefinition = 18
    RULE_wsmethodDefinition = 19
    RULE_wsmethodBody = 20
    RULE_wsReceive = 21
    RULE_wsSend = 22
    RULE_wsDataType = 23
    RULE_wsServiceClientDeclaration = 24
    RULE_wsmethodClientDefinition = 25
    RULE_wsmethodClientBody = 26
    RULE_endWSMethod = 27
    RULE_wsServiceClientStructDeclaration = 28
    RULE_funcDeclaration = 29
    RULE_formalParameters = 30
    RULE_formalParameter = 31
    RULE_initFuncOrMethod = 32
    RULE_staticVariableBeforeLocal = 33
    RULE_localVariableDeclarationStatement = 34
    RULE_publicVariableDeclarationStatement = 35
    RULE_privateVariableDeclarationStatement = 36
    RULE_defaultStatement = 37
    RULE_arrayOrBlockInitializer = 38
    RULE_blockParams = 39
    RULE_block = 40
    RULE_statement = 41
    RULE_returnStatement = 42
    RULE_returnvalues = 43
    RULE_statementExpression = 44
    RULE_expression = 45
    RULE_primary = 46
    RULE_chIdentifier = 47
    RULE_identifier = 48
    RULE_arrayAccess = 49
    RULE_methodAccessLoop = 50
    RULE_arguments = 51
    RULE_expressionList = 52
    RULE_optionalExpression = 53
    RULE_expressionListComa = 54
    RULE_literal = 55
    RULE_ifFunctioncall = 56
    RULE_ifStatement = 57
    RULE_forStatement = 58
    RULE_doStatement = 59
    RULE_exitOrLoopStatement = 60
    RULE_whileStatement = 61
    RULE_docaseStatement = 62
    RULE_chStatement = 63
    RULE_arrobaDefine = 64
    RULE_forInit = 65
    RULE_crlf = 66

    ruleNames =  [ "program", "preprocessorDeclaration", "includeDeclaration", 
                   "ifdef", "defineDeclaration", "sources", "modifiersFunction", 
                   "staticVariable", "classDeclaration", "fromClass", "dataDefinition", 
                   "serializabledataDefinition", "methodDefinition", "methodBody", 
                   "restServiceDeclaration", "restmethodDefinition", "restmethodBody", 
                   "wsServiceDeclaration", "wsdataDefinition", "wsmethodDefinition", 
                   "wsmethodBody", "wsReceive", "wsSend", "wsDataType", 
                   "wsServiceClientDeclaration", "wsmethodClientDefinition", 
                   "wsmethodClientBody", "endWSMethod", "wsServiceClientStructDeclaration", 
                   "funcDeclaration", "formalParameters", "formalParameter", 
                   "initFuncOrMethod", "staticVariableBeforeLocal", "localVariableDeclarationStatement", 
                   "publicVariableDeclarationStatement", "privateVariableDeclarationStatement", 
                   "defaultStatement", "arrayOrBlockInitializer", "blockParams", 
                   "block", "statement", "returnStatement", "returnvalues", 
                   "statementExpression", "expression", "primary", "chIdentifier", 
                   "identifier", "arrayAccess", "methodAccessLoop", "arguments", 
                   "expressionList", "optionalExpression", "expressionListComa", 
                   "literal", "ifFunctioncall", "ifStatement", "forStatement", 
                   "doStatement", "exitOrLoopStatement", "whileStatement", 
                   "docaseStatement", "chStatement", "arrobaDefine", "forInit", 
                   "crlf" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    MINOR=20
    MAJOR=21
    EQUALS=22
    MINOREQUALS=23
    MAJOREQUALS=24
    DOUBLEEQUAL=25
    DIF1=26
    DIF2=27
    DIF3=28
    CONTIDO=29
    PLUSPLUS=30
    MINUSMINUS=31
    PLUSEQUALS=32
    PLUS=33
    MINUS=34
    MULT=35
    DIV=36
    PERC=37
    ARROBA=38
    ECOMERCIAL=39
    BEGIN_SQL=40
    ALIASACCESS=41
    STEP=42
    TO=43
    TRUE=44
    FALSE=45
    NIL=46
    DEFINE=47
    IFDEF=48
    IFNDEF=49
    ELSEDEF=50
    ENDIFDEF=51
    FOR=52
    NEXT=53
    WHILE=54
    DO=55
    ELSEIF=56
    IF=57
    ELSE=58
    ENDIF=59
    ENDDO=60
    END=61
    CASE=62
    ENDCASE=63
    OTHERWISE=64
    EXIT=65
    LOOP=66
    LOCAL=67
    PRIVATE=68
    PUBLIC=69
    STATIC=70
    USER=71
    MAIN=72
    FUNCTION=73
    SELF=74
    PROJECT=75
    AND=76
    OR=77
    DEFAULT=78
    RETURN=79
    ASSUME=80
    CLASS=81
    ENDCLASS=82
    METHOD=83
    DATA=84
    FROM=85
    WSCLIENT=86
    WSSERVICE=87
    WSSTRUCT=88
    ENDWSSTRUCT=89
    NAMESPACE=90
    ENDWSCLIENT=91
    ENDWSSERVICE=92
    WSRESTFUL=93
    FORMAT=94
    WSMETHOD=95
    WSDATA=96
    WSRECEIVE=97
    WSSEND=98
    DESCRIPTION=99
    AS=100
    OF=101
    PRODUCES=102
    OPTIONAL=103
    WSSYNTAX=104
    RESPONSE=105
    REQUEST=106
    QUERYPARAM=107
    WSREST=108
    CAMELCASE=109
    PATHPARAM=110
    LPAREN=111
    RPAREN=112
    LBRACK=113
    RBRACK=114
    INCLUDE=115
    COMMA=116
    ATTRIB_OPERATOR=117
    NUMBER=118
    IDENTIFIER=119
    COMMENT=120
    LINE_COMMENT=121
    STRING=122
    STRINGSIMPLE=123
    CRLF=124
    WS=125
    CRLF_ESCAPED=126

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preprocessorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.PreprocessorDeclarationContext)
            else:
                return self.getTypedRuleContext(AdvplParser.PreprocessorDeclarationContext,i)


        def sources(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.SourcesContext)
            else:
                return self.getTypedRuleContext(AdvplParser.SourcesContext,i)


        def EOF(self):
            return self.getToken(AdvplParser.EOF, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = AdvplParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 134
                    self.preprocessorDeclaration() 
                self.state = 139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__18) | (1 << AdvplParser.DEFINE) | (1 << AdvplParser.IFDEF) | (1 << AdvplParser.IFNDEF) | (1 << AdvplParser.ELSEDEF) | (1 << AdvplParser.ENDIFDEF))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (AdvplParser.STATIC - 70)) | (1 << (AdvplParser.USER - 70)) | (1 << (AdvplParser.MAIN - 70)) | (1 << (AdvplParser.FUNCTION - 70)) | (1 << (AdvplParser.PROJECT - 70)) | (1 << (AdvplParser.CLASS - 70)) | (1 << (AdvplParser.METHOD - 70)) | (1 << (AdvplParser.WSCLIENT - 70)) | (1 << (AdvplParser.WSSERVICE - 70)) | (1 << (AdvplParser.WSSTRUCT - 70)) | (1 << (AdvplParser.WSRESTFUL - 70)) | (1 << (AdvplParser.WSMETHOD - 70)) | (1 << (AdvplParser.CRLF - 70)))) != 0):
                self.state = 140
                self.sources()
                self.state = 145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 146
                self.match(AdvplParser.EOF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreprocessorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def includeDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.IncludeDeclarationContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def staticVariable(self):
            return self.getTypedRuleContext(AdvplParser.StaticVariableContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_preprocessorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreprocessorDeclaration" ):
                listener.enterPreprocessorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreprocessorDeclaration" ):
                listener.exitPreprocessorDeclaration(self)




    def preprocessorDeclaration(self):

        localctx = AdvplParser.PreprocessorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorDeclaration)
        try:
            self.state = 152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.INCLUDE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self.includeDeclaration()
                pass
            elif token in [AdvplParser.T__18, AdvplParser.CRLF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.crlf()
                pass
            elif token in [AdvplParser.STATIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 151
                self.staticVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(AdvplParser.INCLUDE, 0)

        def STRINGSIMPLE(self):
            return self.getToken(AdvplParser.STRINGSIMPLE, 0)

        def STRING(self):
            return self.getToken(AdvplParser.STRING, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_includeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeDeclaration" ):
                listener.enterIncludeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeDeclaration" ):
                listener.exitIncludeDeclaration(self)




    def includeDeclaration(self):

        localctx = AdvplParser.IncludeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_includeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.match(AdvplParser.INCLUDE)
            self.state = 155
            _la = self._input.LA(1)
            if not(_la==AdvplParser.STRING or _la==AdvplParser.STRINGSIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def IFDEF(self):
            return self.getToken(AdvplParser.IFDEF, 0)

        def IFNDEF(self):
            return self.getToken(AdvplParser.IFNDEF, 0)

        def ELSEDEF(self):
            return self.getToken(AdvplParser.ELSEDEF, 0)

        def ENDIFDEF(self):
            return self.getToken(AdvplParser.ENDIFDEF, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_ifdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfdef" ):
                listener.enterIfdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfdef" ):
                listener.exitIfdef(self)




    def ifdef(self):

        localctx = AdvplParser.IfdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_ifdef)
        self._la = 0 # Token type
        try:
            self.state = 161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.IFDEF, AdvplParser.IFNDEF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 157
                _la = self._input.LA(1)
                if not(_la==AdvplParser.IFDEF or _la==AdvplParser.IFNDEF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 158
                self.expression(0)
                pass
            elif token in [AdvplParser.ELSEDEF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 159
                self.match(AdvplParser.ELSEDEF)
                pass
            elif token in [AdvplParser.ENDIFDEF]:
                self.enterOuterAlt(localctx, 3)
                self.state = 160
                self.match(AdvplParser.ENDIFDEF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefineDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(AdvplParser.DEFINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_defineDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefineDeclaration" ):
                listener.enterDefineDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefineDeclaration" ):
                listener.exitDefineDeclaration(self)




    def defineDeclaration(self):

        localctx = AdvplParser.DefineDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_defineDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self.match(AdvplParser.DEFINE)
            self.state = 164
            self.identifier()
            self.state = 165
            self.expression(0)
            self.state = 166
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.ClassDeclarationContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(AdvplParser.MethodBodyContext,0)


        def funcDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.FuncDeclarationContext,0)


        def wsServiceDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.WsServiceDeclarationContext,0)


        def restmethodBody(self):
            return self.getTypedRuleContext(AdvplParser.RestmethodBodyContext,0)


        def wsmethodBody(self):
            return self.getTypedRuleContext(AdvplParser.WsmethodBodyContext,0)


        def staticVariable(self):
            return self.getTypedRuleContext(AdvplParser.StaticVariableContext,0)


        def wsServiceClientDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.WsServiceClientDeclarationContext,0)


        def wsmethodClientBody(self):
            return self.getTypedRuleContext(AdvplParser.WsmethodClientBodyContext,0)


        def wsServiceClientStructDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.WsServiceClientStructDeclarationContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def defineDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.DefineDeclarationContext,0)


        def restServiceDeclaration(self):
            return self.getTypedRuleContext(AdvplParser.RestServiceDeclarationContext,0)


        def ifdef(self):
            return self.getTypedRuleContext(AdvplParser.IfdefContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSources" ):
                listener.enterSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSources" ):
                listener.exitSources(self)




    def sources(self):

        localctx = AdvplParser.SourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_sources)
        try:
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 168
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 169
                self.methodBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 170
                self.funcDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 171
                self.wsServiceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 172
                self.restmethodBody()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 173
                self.wsmethodBody()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 174
                self.staticVariable()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 175
                self.wsServiceClientDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 176
                self.wsmethodClientBody()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 177
                self.wsServiceClientStructDeclaration()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 178
                self.crlf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 179
                self.defineDeclaration()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 180
                self.restServiceDeclaration()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 181
                self.ifdef()
                self.state = 182
                self.crlf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifiersFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(AdvplParser.USER, 0)

        def STATIC(self):
            return self.getToken(AdvplParser.STATIC, 0)

        def MAIN(self):
            return self.getToken(AdvplParser.MAIN, 0)

        def PROJECT(self):
            return self.getToken(AdvplParser.PROJECT, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_modifiersFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiersFunction" ):
                listener.enterModifiersFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiersFunction" ):
                listener.exitModifiersFunction(self)




    def modifiersFunction(self):

        localctx = AdvplParser.ModifiersFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_modifiersFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (AdvplParser.STATIC - 70)) | (1 << (AdvplParser.USER - 70)) | (1 << (AdvplParser.MAIN - 70)) | (1 << (AdvplParser.PROJECT - 70)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(AdvplParser.STATIC, 0)

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(AdvplParser.LocalVariableDeclarationStatementContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_staticVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariable" ):
                listener.enterStaticVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariable" ):
                listener.exitStaticVariable(self)




    def staticVariable(self):

        localctx = AdvplParser.StaticVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_staticVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(AdvplParser.STATIC)
            self.state = 189
            self.localVariableDeclarationStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.CLASS)
            else:
                return self.getToken(AdvplParser.CLASS, i)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ENDCLASS(self):
            return self.getToken(AdvplParser.ENDCLASS, 0)

        def EOF(self):
            return self.getToken(AdvplParser.EOF, 0)

        def CAMELCASE(self):
            return self.getToken(AdvplParser.CAMELCASE, 0)

        def fromClass(self):
            return self.getTypedRuleContext(AdvplParser.FromClassContext,0)


        def dataDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.DataDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.DataDefinitionContext,i)


        def serializabledataDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.SerializabledataDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.SerializabledataDefinitionContext,i)


        def methodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.MethodDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.MethodDefinitionContext,i)


        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = AdvplParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(AdvplParser.CLASS)
            self.state = 192
            self.identifier()
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.CAMELCASE:
                self.state = 193
                self.match(AdvplParser.CAMELCASE)


            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.FROM:
                self.state = 196
                self.fromClass()


            self.state = 199
            self.crlf()
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.DATA or _la==AdvplParser.CAMELCASE:
                self.state = 202
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [AdvplParser.DATA]:
                    self.state = 200
                    self.dataDefinition()
                    pass
                elif token in [AdvplParser.CAMELCASE]:
                    self.state = 201
                    self.serializabledataDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.METHOD:
                self.state = 207
                self.methodDefinition()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.ENDCLASS]:
                self.state = 213
                self.match(AdvplParser.ENDCLASS)
                pass
            elif token in [AdvplParser.END]:
                self.state = 214
                self.match(AdvplParser.END)
                self.state = 215
                self.match(AdvplParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.T__18, AdvplParser.CRLF]:
                self.state = 218
                self.crlf()
                pass
            elif token in [AdvplParser.EOF]:
                self.state = 219
                self.match(AdvplParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(AdvplParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_fromClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClass" ):
                listener.enterFromClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClass" ):
                listener.exitFromClass(self)




    def fromClass(self):

        localctx = AdvplParser.FromClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fromClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(AdvplParser.FROM)
            self.state = 223
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(AdvplParser.DATA, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def AS(self):
            return self.getToken(AdvplParser.AS, 0)

        def wsDataType(self):
            return self.getTypedRuleContext(AdvplParser.WsDataTypeContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_dataDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDefinition" ):
                listener.enterDataDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDefinition" ):
                listener.exitDataDefinition(self)




    def dataDefinition(self):

        localctx = AdvplParser.DataDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dataDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(AdvplParser.DATA)
            self.state = 226
            self.identifier()
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.AS:
                self.state = 227
                self.match(AdvplParser.AS)
                self.state = 228
                self.wsDataType()


            self.state = 231
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SerializabledataDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAMELCASE(self):
            return self.getToken(AdvplParser.CAMELCASE, 0)

        def DATA(self):
            return self.getToken(AdvplParser.DATA, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def AS(self):
            return self.getToken(AdvplParser.AS, 0)

        def wsDataType(self):
            return self.getTypedRuleContext(AdvplParser.WsDataTypeContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_serializabledataDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializabledataDefinition" ):
                listener.enterSerializabledataDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializabledataDefinition" ):
                listener.exitSerializabledataDefinition(self)




    def serializabledataDefinition(self):

        localctx = AdvplParser.SerializabledataDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_serializabledataDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(AdvplParser.CAMELCASE)
            self.state = 234
            self.match(AdvplParser.DATA)
            self.state = 235
            self.identifier()
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.AS:
                self.state = 236
                self.match(AdvplParser.AS)
                self.state = 237
                self.wsDataType()


            self.state = 240
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METHOD(self):
            return self.getToken(AdvplParser.METHOD, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(AdvplParser.ArgumentsContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_methodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDefinition" ):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDefinition" ):
                listener.exitMethodDefinition(self)




    def methodDefinition(self):

        localctx = AdvplParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_methodDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(AdvplParser.METHOD)
            self.state = 243
            self.identifier()
            self.state = 244
            self.arguments()
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.T__0:
                self.state = 245
                self.match(AdvplParser.T__0)


            self.state = 248
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METHOD(self):
            return self.getToken(AdvplParser.METHOD, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def CLASS(self):
            return self.getToken(AdvplParser.CLASS, 0)

        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(AdvplParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(AdvplParser.RPAREN, 0)

        def initFuncOrMethod(self):
            return self.getTypedRuleContext(AdvplParser.InitFuncOrMethodContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(AdvplParser.FormalParametersContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = AdvplParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_methodBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(AdvplParser.METHOD)
            self.state = 251
            self.identifier()
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.LPAREN:
                self.state = 252
                self.match(AdvplParser.LPAREN)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__14) | (1 << AdvplParser.TO) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) != 0):
                    self.state = 253
                    self.formalParameters()


                self.state = 256
                self.match(AdvplParser.RPAREN)


            self.state = 259
            self.match(AdvplParser.CLASS)
            self.state = 260
            self.identifier()
            self.state = 261
            self.crlf()
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 262
                self.initFuncOrMethod()


            self.state = 265
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSRESTFUL(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.WSRESTFUL)
            else:
                return self.getToken(AdvplParser.WSRESTFUL, i)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def DESCRIPTION(self):
            return self.getToken(AdvplParser.DESCRIPTION, 0)

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def FORMAT(self):
            return self.getToken(AdvplParser.FORMAT, 0)

        def literal(self):
            return self.getTypedRuleContext(AdvplParser.LiteralContext,0)


        def wsdataDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsdataDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsdataDefinitionContext,i)


        def restmethodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.RestmethodDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.RestmethodDefinitionContext,i)


        def getRuleIndex(self):
            return AdvplParser.RULE_restServiceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceDeclaration" ):
                listener.enterRestServiceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceDeclaration" ):
                listener.exitRestServiceDeclaration(self)




    def restServiceDeclaration(self):

        localctx = AdvplParser.RestServiceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(AdvplParser.WSRESTFUL)
            self.state = 268
            self.identifier()
            self.state = 269
            self.match(AdvplParser.DESCRIPTION)
            self.state = 270
            self.expression(0)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.FORMAT:
                self.state = 271
                self.match(AdvplParser.FORMAT)
                self.state = 272
                self.literal()


            self.state = 275
            self.crlf()
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.WSDATA:
                self.state = 276
                self.wsdataDefinition()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.WSMETHOD:
                self.state = 282
                self.restmethodDefinition()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self.match(AdvplParser.END)
            self.state = 289
            self.match(AdvplParser.WSRESTFUL)
            self.state = 290
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestmethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def DESCRIPTION(self):
            return self.getToken(AdvplParser.DESCRIPTION, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def WSSYNTAX(self):
            return self.getToken(AdvplParser.WSSYNTAX, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.LiteralContext)
            else:
                return self.getTypedRuleContext(AdvplParser.LiteralContext,i)


        def PRODUCES(self):
            return self.getToken(AdvplParser.PRODUCES, 0)

        def REQUEST(self):
            return self.getToken(AdvplParser.REQUEST, 0)

        def RESPONSE(self):
            return self.getToken(AdvplParser.RESPONSE, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_restmethodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestmethodDefinition" ):
                listener.enterRestmethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestmethodDefinition" ):
                listener.exitRestmethodDefinition(self)




    def restmethodDefinition(self):

        localctx = AdvplParser.RestmethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restmethodDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(AdvplParser.WSMETHOD)
            self.state = 293
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__2) | (1 << AdvplParser.T__3) | (1 << AdvplParser.T__4))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 294
                self.identifier()


            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.DESCRIPTION:
                self.state = 297
                self.match(AdvplParser.DESCRIPTION)
                self.state = 298
                self.expression(0)


            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.WSSYNTAX:
                self.state = 301
                self.match(AdvplParser.WSSYNTAX)
                self.state = 302
                self.literal()


            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.T__5:
                self.state = 305
                self.match(AdvplParser.T__5)
                self.state = 306
                self.expression(0)


            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.PRODUCES:
                self.state = 309
                self.match(AdvplParser.PRODUCES)
                self.state = 310
                self.identifier()


            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.REQUEST:
                self.state = 313
                self.match(AdvplParser.REQUEST)
                self.state = 314
                self.literal()


            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.RESPONSE:
                self.state = 317
                self.match(AdvplParser.RESPONSE)
                self.state = 318
                self.identifier()


            self.state = 321
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestmethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def WSREST(self):
            return self.getToken(AdvplParser.WSREST, 0)

        def WSRESTFUL(self):
            return self.getToken(AdvplParser.WSRESTFUL, 0)

        def PATHPARAM(self):
            return self.getToken(AdvplParser.PATHPARAM, 0)

        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionListContext,i)


        def QUERYPARAM(self):
            return self.getToken(AdvplParser.QUERYPARAM, 0)

        def initFuncOrMethod(self):
            return self.getTypedRuleContext(AdvplParser.InitFuncOrMethodContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_restmethodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestmethodBody" ):
                listener.enterRestmethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestmethodBody" ):
                listener.exitRestmethodBody(self)




    def restmethodBody(self):

        localctx = AdvplParser.RestmethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restmethodBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(AdvplParser.WSMETHOD)
            self.state = 324
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__2) | (1 << AdvplParser.T__3) | (1 << AdvplParser.T__4))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 325
            self.identifier()
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.PATHPARAM:
                self.state = 326
                self.match(AdvplParser.PATHPARAM)
                self.state = 327
                self.expressionList()


            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.QUERYPARAM:
                self.state = 330
                self.match(AdvplParser.QUERYPARAM)
                self.state = 331
                self.expressionList()


            self.state = 334
            _la = self._input.LA(1)
            if not(_la==AdvplParser.WSRESTFUL or _la==AdvplParser.WSREST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 335
            self.identifier()
            self.state = 336
            self.crlf()
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 337
                self.initFuncOrMethod()


            self.state = 340
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsServiceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSSERVICE(self):
            return self.getToken(AdvplParser.WSSERVICE, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def DESCRIPTION(self):
            return self.getToken(AdvplParser.DESCRIPTION, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.LiteralContext)
            else:
                return self.getTypedRuleContext(AdvplParser.LiteralContext,i)


        def NAMESPACE(self):
            return self.getToken(AdvplParser.NAMESPACE, 0)

        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ENDWSSERVICE(self):
            return self.getToken(AdvplParser.ENDWSSERVICE, 0)

        def wsdataDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsdataDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsdataDefinitionContext,i)


        def wsmethodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsmethodDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsmethodDefinitionContext,i)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsServiceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsServiceDeclaration" ):
                listener.enterWsServiceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsServiceDeclaration" ):
                listener.exitWsServiceDeclaration(self)




    def wsServiceDeclaration(self):

        localctx = AdvplParser.WsServiceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_wsServiceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(AdvplParser.WSSERVICE)
            self.state = 343
            self.identifier()
            self.state = 344
            self.match(AdvplParser.DESCRIPTION)
            self.state = 345
            self.literal()
            self.state = 346
            self.match(AdvplParser.NAMESPACE)
            self.state = 347
            self.literal()
            self.state = 348
            self.crlf()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.WSDATA:
                self.state = 349
                self.wsdataDefinition()
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.WSMETHOD:
                self.state = 355
                self.wsmethodDefinition()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(AdvplParser.ENDWSSERVICE)
            self.state = 362
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsdataDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSDATA(self):
            return self.getToken(AdvplParser.WSDATA, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(AdvplParser.AS, 0)

        def wsDataType(self):
            return self.getTypedRuleContext(AdvplParser.WsDataTypeContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def OPTIONAL(self):
            return self.getToken(AdvplParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_wsdataDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsdataDefinition" ):
                listener.enterWsdataDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsdataDefinition" ):
                listener.exitWsdataDefinition(self)




    def wsdataDefinition(self):

        localctx = AdvplParser.WsdataDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_wsdataDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(AdvplParser.WSDATA)
            self.state = 365
            self.identifier()
            self.state = 366
            self.match(AdvplParser.AS)
            self.state = 367
            self.wsDataType()
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.OPTIONAL:
                self.state = 368
                self.match(AdvplParser.OPTIONAL)


            self.state = 371
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsmethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def arguments(self):
            return self.getTypedRuleContext(AdvplParser.ArgumentsContext,0)


        def DESCRIPTION(self):
            return self.getToken(AdvplParser.DESCRIPTION, 0)

        def literal(self):
            return self.getTypedRuleContext(AdvplParser.LiteralContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsmethodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsmethodDefinition" ):
                listener.enterWsmethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsmethodDefinition" ):
                listener.exitWsmethodDefinition(self)




    def wsmethodDefinition(self):

        localctx = AdvplParser.WsmethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_wsmethodDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(AdvplParser.WSMETHOD)
            self.state = 374
            self.identifier()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.LPAREN:
                self.state = 375
                self.arguments()


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.DESCRIPTION:
                self.state = 378
                self.match(AdvplParser.DESCRIPTION)
                self.state = 379
                self.literal()


            self.state = 382
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsmethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def WSSERVICE(self):
            return self.getToken(AdvplParser.WSSERVICE, 0)

        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def wsReceive(self):
            return self.getTypedRuleContext(AdvplParser.WsReceiveContext,0)


        def wsSend(self):
            return self.getTypedRuleContext(AdvplParser.WsSendContext,0)


        def initFuncOrMethod(self):
            return self.getTypedRuleContext(AdvplParser.InitFuncOrMethodContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsmethodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsmethodBody" ):
                listener.enterWsmethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsmethodBody" ):
                listener.exitWsmethodBody(self)




    def wsmethodBody(self):

        localctx = AdvplParser.WsmethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_wsmethodBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(AdvplParser.WSMETHOD)
            self.state = 385
            self.identifier()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.WSRECEIVE:
                self.state = 386
                self.wsReceive()


            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.WSSEND:
                self.state = 389
                self.wsSend()


            self.state = 392
            self.match(AdvplParser.WSSERVICE)
            self.state = 393
            self.identifier()
            self.state = 394
            self.crlf()
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 395
                self.initFuncOrMethod()


            self.state = 398
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsReceiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSRECEIVE(self):
            return self.getToken(AdvplParser.WSRECEIVE, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(AdvplParser.FormalParametersContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsReceive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsReceive" ):
                listener.enterWsReceive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsReceive" ):
                listener.exitWsReceive(self)




    def wsReceive(self):

        localctx = AdvplParser.WsReceiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_wsReceive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(AdvplParser.WSRECEIVE)
            self.state = 401
            self.formalParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsSendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSSEND(self):
            return self.getToken(AdvplParser.WSSEND, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(AdvplParser.FormalParametersContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsSend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsSend" ):
                listener.enterWsSend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsSend" ):
                listener.exitWsSend(self)




    def wsSend(self):

        localctx = AdvplParser.WsSendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_wsSend)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(AdvplParser.WSSEND)
            self.state = 404
            self.formalParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def OF(self):
            return self.getToken(AdvplParser.OF, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_wsDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsDataType" ):
                listener.enterWsDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsDataType" ):
                listener.exitWsDataType(self)




    def wsDataType(self):

        localctx = AdvplParser.WsDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_wsDataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.identifier()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.OF:
                self.state = 407
                self.match(AdvplParser.OF)
                self.state = 408
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsServiceClientDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSCLIENT(self):
            return self.getToken(AdvplParser.WSCLIENT, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ENDWSCLIENT(self):
            return self.getToken(AdvplParser.ENDWSCLIENT, 0)

        def wsdataDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsdataDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsdataDefinitionContext,i)


        def wsmethodClientDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsmethodClientDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsmethodClientDefinitionContext,i)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsServiceClientDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsServiceClientDeclaration" ):
                listener.enterWsServiceClientDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsServiceClientDeclaration" ):
                listener.exitWsServiceClientDeclaration(self)




    def wsServiceClientDeclaration(self):

        localctx = AdvplParser.WsServiceClientDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_wsServiceClientDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(AdvplParser.WSCLIENT)
            self.state = 412
            self.identifier()
            self.state = 413
            self.crlf()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.WSMETHOD or _la==AdvplParser.WSDATA:
                self.state = 416
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [AdvplParser.WSDATA]:
                    self.state = 414
                    self.wsdataDefinition()
                    pass
                elif token in [AdvplParser.WSMETHOD]:
                    self.state = 415
                    self.wsmethodClientDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 421
            self.match(AdvplParser.ENDWSCLIENT)
            self.state = 422
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsmethodClientDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsmethodClientDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsmethodClientDefinition" ):
                listener.enterWsmethodClientDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsmethodClientDefinition" ):
                listener.exitWsmethodClientDefinition(self)




    def wsmethodClientDefinition(self):

        localctx = AdvplParser.WsmethodClientDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_wsmethodClientDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(AdvplParser.WSMETHOD)
            self.state = 425
            self.identifier()
            self.state = 426
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsmethodClientBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def WSCLIENT(self):
            return self.getToken(AdvplParser.WSCLIENT, 0)

        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def wsSend(self):
            return self.getTypedRuleContext(AdvplParser.WsSendContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(AdvplParser.FormalParametersContext,0)


        def wsReceive(self):
            return self.getTypedRuleContext(AdvplParser.WsReceiveContext,0)


        def initFuncOrMethod(self):
            return self.getTypedRuleContext(AdvplParser.InitFuncOrMethodContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsmethodClientBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsmethodClientBody" ):
                listener.enterWsmethodClientBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsmethodClientBody" ):
                listener.exitWsmethodClientBody(self)




    def wsmethodClientBody(self):

        localctx = AdvplParser.WsmethodClientBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_wsmethodClientBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(AdvplParser.WSMETHOD)
            self.state = 429
            self.identifier()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.WSSEND:
                self.state = 430
                self.wsSend()


            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__14) | (1 << AdvplParser.TO) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) != 0):
                self.state = 433
                self.formalParameters()


            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.WSRECEIVE:
                self.state = 436
                self.wsReceive()


            self.state = 439
            self.match(AdvplParser.WSCLIENT)
            self.state = 440
            self.identifier()
            self.state = 441
            self.crlf()
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 442
                self.initFuncOrMethod()


            self.state = 445
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndWSMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_endWSMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndWSMethod" ):
                listener.enterEndWSMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndWSMethod" ):
                listener.exitEndWSMethod(self)




    def endWSMethod(self):

        localctx = AdvplParser.EndWSMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_endWSMethod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(AdvplParser.END)
            self.state = 448
            self.match(AdvplParser.WSMETHOD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsServiceClientStructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WSSTRUCT(self):
            return self.getToken(AdvplParser.WSSTRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ENDWSSTRUCT(self):
            return self.getToken(AdvplParser.ENDWSSTRUCT, 0)

        def wsdataDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsdataDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsdataDefinitionContext,i)


        def wsmethodClientDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.WsmethodClientDefinitionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.WsmethodClientDefinitionContext,i)


        def getRuleIndex(self):
            return AdvplParser.RULE_wsServiceClientStructDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsServiceClientStructDeclaration" ):
                listener.enterWsServiceClientStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsServiceClientStructDeclaration" ):
                listener.exitWsServiceClientStructDeclaration(self)




    def wsServiceClientStructDeclaration(self):

        localctx = AdvplParser.WsServiceClientStructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_wsServiceClientStructDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(AdvplParser.WSSTRUCT)
            self.state = 451
            self.identifier()
            self.state = 452
            self.crlf()
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.WSMETHOD or _la==AdvplParser.WSDATA:
                self.state = 455
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [AdvplParser.WSDATA]:
                    self.state = 453
                    self.wsdataDefinition()
                    pass
                elif token in [AdvplParser.WSMETHOD]:
                    self.state = 454
                    self.wsmethodClientDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(AdvplParser.ENDWSSTRUCT)
            self.state = 461
            self.crlf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(AdvplParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def EOF(self):
            return self.getToken(AdvplParser.EOF, 0)

        def modifiersFunction(self):
            return self.getTypedRuleContext(AdvplParser.ModifiersFunctionContext,0)


        def LPAREN(self):
            return self.getToken(AdvplParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(AdvplParser.RPAREN, 0)

        def initFuncOrMethod(self):
            return self.getTypedRuleContext(AdvplParser.InitFuncOrMethodContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(AdvplParser.FormalParametersContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_funcDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclaration" ):
                listener.enterFuncDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclaration" ):
                listener.exitFuncDeclaration(self)




    def funcDeclaration(self):

        localctx = AdvplParser.FuncDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_funcDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (AdvplParser.STATIC - 70)) | (1 << (AdvplParser.USER - 70)) | (1 << (AdvplParser.MAIN - 70)) | (1 << (AdvplParser.PROJECT - 70)))) != 0):
                self.state = 463
                self.modifiersFunction()


            self.state = 466
            self.match(AdvplParser.FUNCTION)
            self.state = 467
            self.identifier()
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.LPAREN:
                self.state = 468
                self.match(AdvplParser.LPAREN)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__14) | (1 << AdvplParser.TO) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) != 0):
                    self.state = 469
                    self.formalParameters()


                self.state = 472
                self.match(AdvplParser.RPAREN)


            self.state = 477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.T__18, AdvplParser.CRLF]:
                self.state = 475
                self.crlf()
                pass
            elif token in [AdvplParser.EOF]:
                self.state = 476
                self.match(AdvplParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 479
                self.initFuncOrMethod()


            self.state = 482
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(AdvplParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = AdvplParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.formalParameter()
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.COMMA:
                self.state = 485
                self.match(AdvplParser.COMMA)
                self.state = 486
                self.formalParameter()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = AdvplParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitFuncOrMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.LOCAL)
            else:
                return self.getToken(AdvplParser.LOCAL, i)

        def localVariableDeclarationStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.LocalVariableDeclarationStatementContext)
            else:
                return self.getTypedRuleContext(AdvplParser.LocalVariableDeclarationStatementContext,i)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ifdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IfdefContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IfdefContext,i)


        def staticVariableBeforeLocal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.StaticVariableBeforeLocalContext)
            else:
                return self.getTypedRuleContext(AdvplParser.StaticVariableBeforeLocalContext,i)


        def getRuleIndex(self):
            return AdvplParser.RULE_initFuncOrMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitFuncOrMethod" ):
                listener.enterInitFuncOrMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitFuncOrMethod" ):
                listener.exitInitFuncOrMethod(self)




    def initFuncOrMethod(self):

        localctx = AdvplParser.InitFuncOrMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initFuncOrMethod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 504
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [AdvplParser.LOCAL]:
                        self.state = 494
                        self.match(AdvplParser.LOCAL)
                        self.state = 495
                        self.localVariableDeclarationStatement()
                        self.state = 496
                        self.crlf()
                        pass
                    elif token in [AdvplParser.IFDEF, AdvplParser.IFNDEF, AdvplParser.ELSEDEF, AdvplParser.ENDIFDEF]:
                        self.state = 498
                        self.ifdef()
                        self.state = 499
                        self.crlf()
                        pass
                    elif token in [AdvplParser.STATIC]:
                        self.state = 501
                        self.staticVariableBeforeLocal()
                        self.state = 502
                        self.crlf()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 506 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableBeforeLocalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def staticVariable(self):
            return self.getTypedRuleContext(AdvplParser.StaticVariableContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_staticVariableBeforeLocal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableBeforeLocal" ):
                listener.enterStaticVariableBeforeLocal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableBeforeLocal" ):
                listener.exitStaticVariableBeforeLocal(self)




    def staticVariableBeforeLocal(self):

        localctx = AdvplParser.StaticVariableBeforeLocalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_staticVariableBeforeLocal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.staticVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = AdvplParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_localVariableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.expression(0)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.COMMA:
                self.state = 511
                self.match(AdvplParser.COMMA)
                self.state = 512
                self.expression(0)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicVariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(AdvplParser.PUBLIC, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_publicVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicVariableDeclarationStatement" ):
                listener.enterPublicVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicVariableDeclarationStatement" ):
                listener.exitPublicVariableDeclarationStatement(self)




    def publicVariableDeclarationStatement(self):

        localctx = AdvplParser.PublicVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_publicVariableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(AdvplParser.PUBLIC)
            self.state = 519
            self.expression(0)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.COMMA:
                self.state = 520
                self.match(AdvplParser.COMMA)
                self.state = 521
                self.expression(0)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateVariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(AdvplParser.PRIVATE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_privateVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateVariableDeclarationStatement" ):
                listener.enterPrivateVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateVariableDeclarationStatement" ):
                listener.exitPrivateVariableDeclarationStatement(self)




    def privateVariableDeclarationStatement(self):

        localctx = AdvplParser.PrivateVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_privateVariableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(AdvplParser.PRIVATE)
            self.state = 528
            self.expression(0)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.COMMA:
                self.state = 529
                self.match(AdvplParser.COMMA)
                self.state = 530
                self.expression(0)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(AdvplParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_defaultStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultStatement" ):
                listener.enterDefaultStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultStatement" ):
                listener.exitDefaultStatement(self)




    def defaultStatement(self):

        localctx = AdvplParser.DefaultStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_defaultStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(AdvplParser.DEFAULT)
            self.state = 537
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayOrBlockInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AdvplParser.RULE_arrayOrBlockInitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockInitializerContext(ArrayOrBlockInitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ArrayOrBlockInitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionList(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionListContext,0)

        def blockParams(self):
            return self.getTypedRuleContext(AdvplParser.BlockParamsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockInitializer" ):
                listener.enterBlockInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockInitializer" ):
                listener.exitBlockInitializer(self)


    class ArrayInitializerContext(ArrayOrBlockInitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ArrayOrBlockInitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionList(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)



    def arrayOrBlockInitializer(self):

        localctx = AdvplParser.ArrayOrBlockInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_arrayOrBlockInitializer)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                localctx = AdvplParser.ArrayInitializerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.match(AdvplParser.T__6)
                self.state = 540
                self.expressionList()
                self.state = 541
                self.match(AdvplParser.T__7)
                pass

            elif la_ == 2:
                localctx = AdvplParser.BlockInitializerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(AdvplParser.T__6)
                self.state = 544
                self.match(AdvplParser.T__8)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__14) | (1 << AdvplParser.TO) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) != 0):
                    self.state = 545
                    self.blockParams()


                self.state = 548
                self.match(AdvplParser.T__8)
                self.state = 549
                self.expressionList()
                self.state = 550
                self.match(AdvplParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockParamsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_blockParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockParams" ):
                listener.enterBlockParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockParams" ):
                listener.exitBlockParams(self)




    def blockParams(self):

        localctx = AdvplParser.BlockParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_blockParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.identifier()
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.COMMA:
                self.state = 555
                self.match(AdvplParser.COMMA)
                self.state = 556
                self.identifier()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.StatementContext)
            else:
                return self.getTypedRuleContext(AdvplParser.StatementContext,i)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.EOF)
            else:
                return self.getToken(AdvplParser.EOF, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = AdvplParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 568
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [AdvplParser.T__6, AdvplParser.T__9, AdvplParser.T__14, AdvplParser.PLUSPLUS, AdvplParser.MINUSMINUS, AdvplParser.PLUS, AdvplParser.MINUS, AdvplParser.ARROBA, AdvplParser.ECOMERCIAL, AdvplParser.TO, AdvplParser.TRUE, AdvplParser.FALSE, AdvplParser.NIL, AdvplParser.IFDEF, AdvplParser.IFNDEF, AdvplParser.ELSEDEF, AdvplParser.ENDIFDEF, AdvplParser.FOR, AdvplParser.NEXT, AdvplParser.WHILE, AdvplParser.DO, AdvplParser.IF, AdvplParser.END, AdvplParser.CASE, AdvplParser.EXIT, AdvplParser.LOOP, AdvplParser.PRIVATE, AdvplParser.PUBLIC, AdvplParser.STATIC, AdvplParser.SELF, AdvplParser.PROJECT, AdvplParser.DEFAULT, AdvplParser.RETURN, AdvplParser.ASSUME, AdvplParser.CLASS, AdvplParser.DATA, AdvplParser.FROM, AdvplParser.WSMETHOD, AdvplParser.DESCRIPTION, AdvplParser.AS, AdvplParser.OF, AdvplParser.OPTIONAL, AdvplParser.LPAREN, AdvplParser.NUMBER, AdvplParser.IDENTIFIER, AdvplParser.STRING, AdvplParser.STRINGSIMPLE]:
                        self.state = 562
                        self.statement()
                        self.state = 565
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [AdvplParser.T__18, AdvplParser.CRLF]:
                            self.state = 563
                            self.crlf()
                            pass
                        elif token in [AdvplParser.EOF]:
                            self.state = 564
                            self.match(AdvplParser.EOF)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [AdvplParser.T__18, AdvplParser.CRLF]:
                        self.state = 567
                        self.crlf()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 570 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self):
            return self.getTypedRuleContext(AdvplParser.StatementExpressionContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(AdvplParser.IfStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(AdvplParser.ForStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(AdvplParser.DoStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(AdvplParser.WhileStatementContext,0)


        def docaseStatement(self):
            return self.getTypedRuleContext(AdvplParser.DocaseStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(AdvplParser.ReturnStatementContext,0)


        def privateVariableDeclarationStatement(self):
            return self.getTypedRuleContext(AdvplParser.PrivateVariableDeclarationStatementContext,0)


        def exitOrLoopStatement(self):
            return self.getTypedRuleContext(AdvplParser.ExitOrLoopStatementContext,0)


        def defaultStatement(self):
            return self.getTypedRuleContext(AdvplParser.DefaultStatementContext,0)


        def publicVariableDeclarationStatement(self):
            return self.getTypedRuleContext(AdvplParser.PublicVariableDeclarationStatementContext,0)


        def staticVariable(self):
            return self.getTypedRuleContext(AdvplParser.StaticVariableContext,0)


        def ifdef(self):
            return self.getTypedRuleContext(AdvplParser.IfdefContext,0)


        def chStatement(self):
            return self.getTypedRuleContext(AdvplParser.ChStatementContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = AdvplParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statement)
        try:
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.statementExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.ifStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 575
                self.doStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 576
                self.whileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 577
                self.docaseStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 578
                self.returnStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 579
                self.privateVariableDeclarationStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 580
                self.exitOrLoopStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 581
                self.defaultStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 582
                self.publicVariableDeclarationStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 583
                self.staticVariable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 584
                self.ifdef()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 585
                self.chStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(AdvplParser.RETURN, 0)

        def returnvalues(self):
            return self.getTypedRuleContext(AdvplParser.ReturnvaluesContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = AdvplParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(AdvplParser.RETURN)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__6) | (1 << AdvplParser.T__9) | (1 << AdvplParser.T__14) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS) | (1 << AdvplParser.ARROBA) | (1 << AdvplParser.ECOMERCIAL) | (1 << AdvplParser.TO) | (1 << AdvplParser.TRUE) | (1 << AdvplParser.FALSE) | (1 << AdvplParser.NIL) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.IF) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.LPAREN - 74)) | (1 << (AdvplParser.NUMBER - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)) | (1 << (AdvplParser.STRING - 74)) | (1 << (AdvplParser.STRINGSIMPLE - 74)))) != 0):
                self.state = 589
                self.returnvalues()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnvaluesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_returnvalues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnvalues" ):
                listener.enterReturnvalues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnvalues" ):
                listener.exitReturnvalues(self)




    def returnvalues(self):

        localctx = AdvplParser.ReturnvaluesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_returnvalues)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)




    def statementExpression(self):

        localctx = AdvplParser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_statementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AdvplParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExprPrimaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(AdvplParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprPrimary" ):
                listener.enterExprPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprPrimary" ):
                listener.exitExprPrimary(self)


    class AssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def PLUSEQUALS(self):
            return self.getToken(AdvplParser.PLUSEQUALS, 0)
        def ATTRIB_OPERATOR(self):
            return self.getToken(AdvplParser.ATTRIB_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)


    class ExprIncrPosContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)

        def PLUSPLUS(self):
            return self.getToken(AdvplParser.PLUSPLUS, 0)
        def MINUSMINUS(self):
            return self.getToken(AdvplParser.MINUSMINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprIncrPos" ):
                listener.enterExprIncrPos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprIncrPos" ):
                listener.exitExprIncrPos(self)


    class ExprIncrPreContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)

        def PLUS(self):
            return self.getToken(AdvplParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(AdvplParser.MINUS, 0)
        def PLUSPLUS(self):
            return self.getToken(AdvplParser.PLUSPLUS, 0)
        def MINUSMINUS(self):
            return self.getToken(AdvplParser.MINUSMINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprIncrPre" ):
                listener.enterExprIncrPre(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprIncrPre" ):
                listener.exitExprIncrPre(self)


    class ExprLogicalContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(AdvplParser.AND, 0)
        def OR(self):
            return self.getToken(AdvplParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprLogical" ):
                listener.enterExprLogical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprLogical" ):
                listener.exitExprLogical(self)


    class AliasAssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def ALIASACCESS(self):
            return self.getToken(AdvplParser.ALIASACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasAssignment" ):
                listener.enterAliasAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasAssignment" ):
                listener.exitAliasAssignment(self)


    class ExprCompContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def MINOREQUALS(self):
            return self.getToken(AdvplParser.MINOREQUALS, 0)
        def MAJOREQUALS(self):
            return self.getToken(AdvplParser.MAJOREQUALS, 0)
        def MINOR(self):
            return self.getToken(AdvplParser.MINOR, 0)
        def MAJOR(self):
            return self.getToken(AdvplParser.MAJOR, 0)
        def EQUALS(self):
            return self.getToken(AdvplParser.EQUALS, 0)
        def DOUBLEEQUAL(self):
            return self.getToken(AdvplParser.DOUBLEEQUAL, 0)
        def DIF1(self):
            return self.getToken(AdvplParser.DIF1, 0)
        def DIF2(self):
            return self.getToken(AdvplParser.DIF2, 0)
        def DIF3(self):
            return self.getToken(AdvplParser.DIF3, 0)
        def CONTIDO(self):
            return self.getToken(AdvplParser.CONTIDO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprComp" ):
                listener.enterExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprComp" ):
                listener.exitExprComp(self)


    class ExprPlusContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(AdvplParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(AdvplParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprPlus" ):
                listener.enterExprPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprPlus" ):
                listener.exitExprPlus(self)


    class ExprNotContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprNot" ):
                listener.enterExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprNot" ):
                listener.exitExprNot(self)


    class ExprMulContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def MULT(self):
            return self.getToken(AdvplParser.MULT, 0)
        def DIV(self):
            return self.getToken(AdvplParser.DIV, 0)
        def PERC(self):
            return self.getToken(AdvplParser.PERC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprMul" ):
                listener.enterExprMul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprMul" ):
                listener.exitExprMul(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = AdvplParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.T__6, AdvplParser.T__14, AdvplParser.ARROBA, AdvplParser.ECOMERCIAL, AdvplParser.TO, AdvplParser.TRUE, AdvplParser.FALSE, AdvplParser.NIL, AdvplParser.NEXT, AdvplParser.IF, AdvplParser.END, AdvplParser.SELF, AdvplParser.PROJECT, AdvplParser.DEFAULT, AdvplParser.ASSUME, AdvplParser.DATA, AdvplParser.WSMETHOD, AdvplParser.DESCRIPTION, AdvplParser.AS, AdvplParser.OF, AdvplParser.LPAREN, AdvplParser.NUMBER, AdvplParser.IDENTIFIER, AdvplParser.STRING, AdvplParser.STRINGSIMPLE]:
                localctx = AdvplParser.ExprPrimaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 597
                self.primary()
                pass
            elif token in [AdvplParser.PLUSPLUS, AdvplParser.MINUSMINUS, AdvplParser.PLUS, AdvplParser.MINUS]:
                localctx = AdvplParser.ExprIncrPreContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 602
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [AdvplParser.PLUS]:
                    self.state = 598
                    localctx.op = self.match(AdvplParser.PLUS)
                    pass
                elif token in [AdvplParser.MINUS]:
                    self.state = 599
                    localctx.op = self.match(AdvplParser.MINUS)
                    pass
                elif token in [AdvplParser.PLUSPLUS]:
                    self.state = 600
                    localctx.op = self.match(AdvplParser.PLUSPLUS)
                    pass
                elif token in [AdvplParser.MINUSMINUS]:
                    self.state = 601
                    localctx.op = self.match(AdvplParser.MINUSMINUS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 604
                self.expression(9)
                pass
            elif token in [AdvplParser.T__9]:
                localctx = AdvplParser.ExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 605
                self.match(AdvplParser.T__9)
                self.state = 606
                self.expression(8)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 653
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        localctx = AdvplParser.ExprMulContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 609
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 613
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [AdvplParser.MULT]:
                            self.state = 610
                            localctx.op = self.match(AdvplParser.MULT)
                            pass
                        elif token in [AdvplParser.DIV]:
                            self.state = 611
                            localctx.op = self.match(AdvplParser.DIV)
                            pass
                        elif token in [AdvplParser.PERC]:
                            self.state = 612
                            localctx.op = self.match(AdvplParser.PERC)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 615
                        self.expression(8)
                        pass

                    elif la_ == 2:
                        localctx = AdvplParser.ExprPlusContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 616
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 619
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [AdvplParser.PLUS]:
                            self.state = 617
                            localctx.op = self.match(AdvplParser.PLUS)
                            pass
                        elif token in [AdvplParser.MINUS]:
                            self.state = 618
                            localctx.op = self.match(AdvplParser.MINUS)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 621
                        self.expression(7)
                        pass

                    elif la_ == 3:
                        localctx = AdvplParser.ExprLogicalContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 622
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 623
                        localctx.op = self.match(AdvplParser.AND)
                        self.state = 624
                        self.expression(6)
                        pass

                    elif la_ == 4:
                        localctx = AdvplParser.ExprLogicalContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 625
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 626
                        localctx.op = self.match(AdvplParser.OR)
                        self.state = 627
                        self.expression(5)
                        pass

                    elif la_ == 5:
                        localctx = AdvplParser.ExprCompContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 628
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 639
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [AdvplParser.MINOREQUALS]:
                            self.state = 629
                            localctx.op = self.match(AdvplParser.MINOREQUALS)
                            pass
                        elif token in [AdvplParser.MAJOREQUALS]:
                            self.state = 630
                            localctx.op = self.match(AdvplParser.MAJOREQUALS)
                            pass
                        elif token in [AdvplParser.MINOR]:
                            self.state = 631
                            localctx.op = self.match(AdvplParser.MINOR)
                            pass
                        elif token in [AdvplParser.MAJOR]:
                            self.state = 632
                            localctx.op = self.match(AdvplParser.MAJOR)
                            pass
                        elif token in [AdvplParser.EQUALS]:
                            self.state = 633
                            localctx.op = self.match(AdvplParser.EQUALS)
                            pass
                        elif token in [AdvplParser.DOUBLEEQUAL]:
                            self.state = 634
                            localctx.op = self.match(AdvplParser.DOUBLEEQUAL)
                            pass
                        elif token in [AdvplParser.DIF1]:
                            self.state = 635
                            localctx.op = self.match(AdvplParser.DIF1)
                            pass
                        elif token in [AdvplParser.DIF2]:
                            self.state = 636
                            localctx.op = self.match(AdvplParser.DIF2)
                            pass
                        elif token in [AdvplParser.DIF3]:
                            self.state = 637
                            localctx.op = self.match(AdvplParser.DIF3)
                            pass
                        elif token in [AdvplParser.CONTIDO]:
                            self.state = 638
                            localctx.op = self.match(AdvplParser.CONTIDO)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 641
                        self.expression(4)
                        pass

                    elif la_ == 6:
                        localctx = AdvplParser.AliasAssignmentContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 642
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 643
                        self.match(AdvplParser.ALIASACCESS)
                        self.state = 644
                        self.expression(3)
                        pass

                    elif la_ == 7:
                        localctx = AdvplParser.AssignmentContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 645
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 646
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__10) | (1 << AdvplParser.T__11) | (1 << AdvplParser.T__12) | (1 << AdvplParser.T__13) | (1 << AdvplParser.PLUSEQUALS))) != 0) or _la==AdvplParser.ATTRIB_OPERATOR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 647
                        self.expression(2)
                        pass

                    elif la_ == 8:
                        localctx = AdvplParser.ExprIncrPosContext(self, AdvplParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 648
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 651
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [AdvplParser.PLUSPLUS]:
                            self.state = 649
                            localctx.op = self.match(AdvplParser.PLUSPLUS)
                            pass
                        elif token in [AdvplParser.MINUSMINUS]:
                            self.state = 650
                            localctx.op = self.match(AdvplParser.MINUSMINUS)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AdvplParser.RULE_primary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ObjectAttribAccessContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)

        def ARROBA(self):
            return self.getToken(AdvplParser.ARROBA, 0)
        def arrayAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ArrayAccessContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ArrayAccessContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectAttribAccess" ):
                listener.enterObjectAttribAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectAttribAccess" ):
                listener.exitObjectAttribAccess(self)


    class CallContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)

        def arguments(self):
            return self.getTypedRuleContext(AdvplParser.ArgumentsContext,0)

        def arrayAccess(self):
            return self.getTypedRuleContext(AdvplParser.ArrayAccessContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)


    class VarArrayAccessContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)

        def arrayAccess(self):
            return self.getTypedRuleContext(AdvplParser.ArrayAccessContext,0)

        def ARROBA(self):
            return self.getToken(AdvplParser.ARROBA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarArrayAccess" ):
                listener.enterVarArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarArrayAccess" ):
                listener.exitVarArrayAccess(self)


    class ParensContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(AdvplParser.LPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionListContext,0)

        def RPAREN(self):
            return self.getToken(AdvplParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParens" ):
                listener.enterParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParens" ):
                listener.exitParens(self)


    class ObjectMethodAccessContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)

        def arrayAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ArrayAccessContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ArrayAccessContext,i)

        def methodAccessLoop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.MethodAccessLoopContext)
            else:
                return self.getTypedRuleContext(AdvplParser.MethodAccessLoopContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectMethodAccess" ):
                listener.enterObjectMethodAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectMethodAccess" ):
                listener.exitObjectMethodAccess(self)


    class VarContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)

        def ARROBA(self):
            return self.getToken(AdvplParser.ARROBA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)


    class ClassConstructorContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(AdvplParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(AdvplParser.RPAREN, 0)
        def arguments(self):
            return self.getTypedRuleContext(AdvplParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassConstructor" ):
                listener.enterClassConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassConstructor" ):
                listener.exitClassConstructor(self)


    class MacroExecucaoContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ECOMERCIAL(self):
            return self.getToken(AdvplParser.ECOMERCIAL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)

        def methodAccessLoop(self):
            return self.getTypedRuleContext(AdvplParser.MethodAccessLoopContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExecucao" ):
                listener.enterMacroExecucao(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExecucao" ):
                listener.exitMacroExecucao(self)


    class IfCallContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifFunctioncall(self):
            return self.getTypedRuleContext(AdvplParser.IfFunctioncallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfCall" ):
                listener.enterIfCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfCall" ):
                listener.exitIfCall(self)


    class LitContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(AdvplParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLit" ):
                listener.enterLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLit" ):
                listener.exitLit(self)


    class CallWithAttContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)

        def arguments(self):
            return self.getTypedRuleContext(AdvplParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallWithAtt" ):
                listener.enterCallWithAtt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallWithAtt" ):
                listener.exitCallWithAtt(self)


    class AssumeContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARROBA(self):
            return self.getToken(AdvplParser.ARROBA, 0)
        def ASSUME(self):
            return self.getToken(AdvplParser.ASSUME, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.IdentifierContext,i)

        def AS(self):
            return self.getToken(AdvplParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssume" ):
                listener.enterAssume(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssume" ):
                listener.exitAssume(self)


    class ArrayOrBlockContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayOrBlockInitializer(self):
            return self.getTypedRuleContext(AdvplParser.ArrayOrBlockInitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOrBlock" ):
                listener.enterArrayOrBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOrBlock" ):
                listener.exitArrayOrBlock(self)



    def primary(self):

        localctx = AdvplParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = AdvplParser.ParensContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.match(AdvplParser.LPAREN)
                self.state = 659
                self.expressionList()
                self.state = 660
                self.match(AdvplParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = AdvplParser.VarArrayAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AdvplParser.ARROBA:
                    self.state = 662
                    self.match(AdvplParser.ARROBA)


                self.state = 665
                self.identifier()
                self.state = 666
                self.arrayAccess()
                pass

            elif la_ == 3:
                localctx = AdvplParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 668
                self.identifier()
                self.state = 669
                self.arguments()

                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 670
                    self.arrayAccess()


                pass

            elif la_ == 4:
                localctx = AdvplParser.CallWithAttContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 673
                self.identifier()
                self.state = 674
                self.arguments()
                self.state = 675
                self.match(AdvplParser.T__14)
                self.state = 676
                self.identifier()
                pass

            elif la_ == 5:
                localctx = AdvplParser.ObjectAttribAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AdvplParser.ARROBA:
                    self.state = 678
                    self.match(AdvplParser.ARROBA)


                self.state = 681
                self.identifier()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AdvplParser.LBRACK:
                    self.state = 682
                    self.arrayAccess()


                self.state = 690 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 685
                        self.match(AdvplParser.T__14)
                        self.state = 686
                        self.identifier()
                        self.state = 688
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                        if la_ == 1:
                            self.state = 687
                            self.arrayAccess()



                    else:
                        raise NoViableAltException(self)
                    self.state = 692 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                pass

            elif la_ == 6:
                localctx = AdvplParser.ObjectMethodAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 694
                self.identifier()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AdvplParser.LBRACK:
                    self.state = 695
                    self.arrayAccess()
                    self.state = 700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 702 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 701
                        self.methodAccessLoop()

                    else:
                        raise NoViableAltException(self)
                    self.state = 704 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                pass

            elif la_ == 7:
                localctx = AdvplParser.ClassConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 706
                self.identifier()
                self.state = 707
                self.match(AdvplParser.LPAREN)
                self.state = 708
                self.match(AdvplParser.RPAREN)
                self.state = 709
                self.match(AdvplParser.T__14)
                self.state = 710
                self.identifier()
                self.state = 711
                self.arguments()
                pass

            elif la_ == 8:
                localctx = AdvplParser.VarContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AdvplParser.ARROBA:
                    self.state = 713
                    self.match(AdvplParser.ARROBA)


                self.state = 716
                self.identifier()
                pass

            elif la_ == 9:
                localctx = AdvplParser.AssumeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 717
                self.match(AdvplParser.ARROBA)
                self.state = 718
                self.match(AdvplParser.ASSUME)
                self.state = 719
                self.identifier()
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AdvplParser.T__14:
                    self.state = 720
                    self.match(AdvplParser.T__14)
                    self.state = 721
                    self.identifier()
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 727
                self.match(AdvplParser.AS)
                self.state = 728
                self.identifier()
                pass

            elif la_ == 10:
                localctx = AdvplParser.LitContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 730
                self.literal()
                pass

            elif la_ == 11:
                localctx = AdvplParser.ArrayOrBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 731
                self.arrayOrBlockInitializer()
                pass

            elif la_ == 12:
                localctx = AdvplParser.IfCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 732
                self.ifFunctioncall()
                pass

            elif la_ == 13:
                localctx = AdvplParser.MacroExecucaoContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 733
                self.match(AdvplParser.ECOMERCIAL)
                self.state = 734
                self.expression(0)
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 735
                    self.match(AdvplParser.T__15)
                    self.state = 736
                    self.expression(0)


                self.state = 740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self.methodAccessLoop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(AdvplParser.TO, 0)

        def SELF(self):
            return self.getToken(AdvplParser.SELF, 0)

        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def DEFAULT(self):
            return self.getToken(AdvplParser.DEFAULT, 0)

        def CLASS(self):
            return self.getToken(AdvplParser.CLASS, 0)

        def IDENTIFIER(self):
            return self.getToken(AdvplParser.IDENTIFIER, 0)

        def DATA(self):
            return self.getToken(AdvplParser.DATA, 0)

        def FROM(self):
            return self.getToken(AdvplParser.FROM, 0)

        def OPTIONAL(self):
            return self.getToken(AdvplParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_chIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChIdentifier" ):
                listener.enterChIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChIdentifier" ):
                listener.exitChIdentifier(self)




    def chIdentifier(self):

        localctx = AdvplParser.ChIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_chIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            _la = self._input.LA(1)
            if not(_la==AdvplParser.TO or _la==AdvplParser.END or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.CLASS - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.FROM - 74)) | (1 << (AdvplParser.OPTIONAL - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(AdvplParser.DEFAULT, 0)

        def PROJECT(self):
            return self.getToken(AdvplParser.PROJECT, 0)

        def WSMETHOD(self):
            return self.getToken(AdvplParser.WSMETHOD, 0)

        def OF(self):
            return self.getToken(AdvplParser.OF, 0)

        def ASSUME(self):
            return self.getToken(AdvplParser.ASSUME, 0)

        def DESCRIPTION(self):
            return self.getToken(AdvplParser.DESCRIPTION, 0)

        def AS(self):
            return self.getToken(AdvplParser.AS, 0)

        def TO(self):
            return self.getToken(AdvplParser.TO, 0)

        def NEXT(self):
            return self.getToken(AdvplParser.NEXT, 0)

        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def DATA(self):
            return self.getToken(AdvplParser.DATA, 0)

        def SELF(self):
            return self.getToken(AdvplParser.SELF, 0)

        def IDENTIFIER(self):
            return self.getToken(AdvplParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = AdvplParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__14) | (1 << AdvplParser.TO) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.LBRACK)
            else:
                return self.getToken(AdvplParser.LBRACK, i)

        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionListContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.RBRACK)
            else:
                return self.getToken(AdvplParser.RBRACK, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)




    def arrayAccess(self):

        localctx = AdvplParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_arrayAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 748
                    self.match(AdvplParser.LBRACK)
                    self.state = 749
                    self.expressionList()
                    self.state = 750
                    self.match(AdvplParser.RBRACK)

                else:
                    raise NoViableAltException(self)
                self.state = 754 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodAccessLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(AdvplParser.ArgumentsContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(AdvplParser.ArrayAccessContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_methodAccessLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodAccessLoop" ):
                listener.enterMethodAccessLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodAccessLoop" ):
                listener.exitMethodAccessLoop(self)




    def methodAccessLoop(self):

        localctx = AdvplParser.MethodAccessLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_methodAccessLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(AdvplParser.T__14)
            self.state = 757
            self.identifier()
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 758
                self.arguments()


            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 761
                self.arrayAccess()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(AdvplParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(AdvplParser.RPAREN, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = AdvplParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(AdvplParser.LPAREN)
            self.state = 765
            self.expressionList()
            self.state = 766
            self.match(AdvplParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.OptionalExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.OptionalExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = AdvplParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.optionalExpression()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.COMMA:
                self.state = 769
                self.match(AdvplParser.COMMA)
                self.state = 770
                self.optionalExpression()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_optionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalExpression" ):
                listener.enterOptionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalExpression" ):
                listener.exitOptionalExpression(self)




    def optionalExpression(self):

        localctx = AdvplParser.OptionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_optionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 776
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListComaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(AdvplParser.COMMA, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_expressionListComa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionListComa" ):
                listener.enterExpressionListComa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionListComa" ):
                listener.exitExpressionListComa(self)




    def expressionListComa(self):

        localctx = AdvplParser.ExpressionListComaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_expressionListComa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(AdvplParser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AdvplParser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralStringDuplaContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(AdvplParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralStringDupla" ):
                listener.enterLiteralStringDupla(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralStringDupla" ):
                listener.exitLiteralStringDupla(self)


    class LiteralLogicalContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUE(self):
            return self.getToken(AdvplParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(AdvplParser.FALSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralLogical" ):
                listener.enterLiteralLogical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralLogical" ):
                listener.exitLiteralLogical(self)


    class LiteralNilContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NIL(self):
            return self.getToken(AdvplParser.NIL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralNil" ):
                listener.enterLiteralNil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralNil" ):
                listener.exitLiteralNil(self)


    class LiteralNumberContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(AdvplParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralNumber" ):
                listener.enterLiteralNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralNumber" ):
                listener.exitLiteralNumber(self)


    class LiteralStringSimplesContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a AdvplParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRINGSIMPLE(self):
            return self.getToken(AdvplParser.STRINGSIMPLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralStringSimples" ):
                listener.enterLiteralStringSimples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralStringSimples" ):
                listener.exitLiteralStringSimples(self)



    def literal(self):

        localctx = AdvplParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_literal)
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.NUMBER]:
                localctx = AdvplParser.LiteralNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.match(AdvplParser.NUMBER)
                pass
            elif token in [AdvplParser.STRING]:
                localctx = AdvplParser.LiteralStringDuplaContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(AdvplParser.STRING)
                pass
            elif token in [AdvplParser.STRINGSIMPLE]:
                localctx = AdvplParser.LiteralStringSimplesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.match(AdvplParser.STRINGSIMPLE)
                pass
            elif token in [AdvplParser.TRUE]:
                localctx = AdvplParser.LiteralLogicalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.match(AdvplParser.TRUE)
                pass
            elif token in [AdvplParser.FALSE]:
                localctx = AdvplParser.LiteralLogicalContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self.match(AdvplParser.FALSE)
                pass
            elif token in [AdvplParser.NIL]:
                localctx = AdvplParser.LiteralNilContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 786
                self.match(AdvplParser.NIL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfFunctioncallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(AdvplParser.IF, 0)

        def LPAREN(self):
            return self.getToken(AdvplParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(AdvplParser.RPAREN, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_ifFunctioncall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfFunctioncall" ):
                listener.enterIfFunctioncall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfFunctioncall" ):
                listener.exitIfFunctioncall(self)




    def ifFunctioncall(self):

        localctx = AdvplParser.IfFunctioncallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_ifFunctioncall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(AdvplParser.IF)
            self.state = 790
            self.match(AdvplParser.LPAREN)
            self.state = 791
            self.expression(0)
            self.state = 792
            self.match(AdvplParser.COMMA)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__6) | (1 << AdvplParser.T__9) | (1 << AdvplParser.T__14) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS) | (1 << AdvplParser.ARROBA) | (1 << AdvplParser.ECOMERCIAL) | (1 << AdvplParser.TO) | (1 << AdvplParser.TRUE) | (1 << AdvplParser.FALSE) | (1 << AdvplParser.NIL) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.IF) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.LPAREN - 74)) | (1 << (AdvplParser.NUMBER - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)) | (1 << (AdvplParser.STRING - 74)) | (1 << (AdvplParser.STRINGSIMPLE - 74)))) != 0):
                self.state = 793
                self.expression(0)


            self.state = 796
            self.match(AdvplParser.COMMA)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__6) | (1 << AdvplParser.T__9) | (1 << AdvplParser.T__14) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS) | (1 << AdvplParser.ARROBA) | (1 << AdvplParser.ECOMERCIAL) | (1 << AdvplParser.TO) | (1 << AdvplParser.TRUE) | (1 << AdvplParser.FALSE) | (1 << AdvplParser.NIL) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.IF) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.LPAREN - 74)) | (1 << (AdvplParser.NUMBER - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)) | (1 << (AdvplParser.STRING - 74)) | (1 << (AdvplParser.STRINGSIMPLE - 74)))) != 0):
                self.state = 797
                self.expression(0)


            self.state = 800
            self.match(AdvplParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.IF)
            else:
                return self.getToken(AdvplParser.IF, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.BlockContext)
            else:
                return self.getTypedRuleContext(AdvplParser.BlockContext,i)


        def ENDIF(self):
            return self.getToken(AdvplParser.ENDIF, 0)

        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def ELSEIF(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.ELSEIF)
            else:
                return self.getToken(AdvplParser.ELSEIF, i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.ELSE)
            else:
                return self.getToken(AdvplParser.ELSE, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = AdvplParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(AdvplParser.IF)
            self.state = 803
            self.expression(0)
            self.state = 804
            self.crlf()
            self.state = 805
            self.block()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.ELSEIF:
                self.state = 806
                self.match(AdvplParser.ELSEIF)
                self.state = 807
                self.expression(0)
                self.state = 808
                self.crlf()
                self.state = 809
                self.block()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AdvplParser.ELSE:
                self.state = 816
                self.match(AdvplParser.ELSE)
                self.state = 817
                self.crlf()
                self.state = 818
                self.block()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 825
                self.match(AdvplParser.ENDIF)
                pass

            elif la_ == 2:
                self.state = 826
                self.match(AdvplParser.END)
                pass

            elif la_ == 3:
                self.state = 827
                self.match(AdvplParser.END)
                self.state = 828
                self.match(AdvplParser.IF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(AdvplParser.FOR, 0)

        def forInit(self):
            return self.getTypedRuleContext(AdvplParser.ForInitContext,0)


        def TO(self):
            return self.getToken(AdvplParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def crlf(self):
            return self.getTypedRuleContext(AdvplParser.CrlfContext,0)


        def NEXT(self):
            return self.getToken(AdvplParser.NEXT, 0)

        def STEP(self):
            return self.getToken(AdvplParser.STEP, 0)

        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = AdvplParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(AdvplParser.FOR)
            self.state = 832
            self.forInit()
            self.state = 833
            self.match(AdvplParser.TO)
            self.state = 834
            self.expression(0)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.STEP:
                self.state = 835
                self.match(AdvplParser.STEP)
                self.state = 836
                self.expression(0)


            self.state = 839
            self.crlf()
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 840
                self.block()


            self.state = 843
            self.match(AdvplParser.NEXT)
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__6) | (1 << AdvplParser.T__9) | (1 << AdvplParser.T__14) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS) | (1 << AdvplParser.ARROBA) | (1 << AdvplParser.ECOMERCIAL) | (1 << AdvplParser.TO) | (1 << AdvplParser.TRUE) | (1 << AdvplParser.FALSE) | (1 << AdvplParser.NIL) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.IF) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.LPAREN - 74)) | (1 << (AdvplParser.NUMBER - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)) | (1 << (AdvplParser.STRING - 74)) | (1 << (AdvplParser.STRINGSIMPLE - 74)))) != 0):
                self.state = 844
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(AdvplParser.DO, 0)

        def whileStatement(self):
            return self.getTypedRuleContext(AdvplParser.WhileStatementContext,0)


        def docaseStatement(self):
            return self.getTypedRuleContext(AdvplParser.DocaseStatementContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = AdvplParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(AdvplParser.DO)
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.WHILE]:
                self.state = 848
                self.whileStatement()
                pass
            elif token in [AdvplParser.CASE]:
                self.state = 849
                self.docaseStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitOrLoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(AdvplParser.EXIT, 0)

        def LOOP(self):
            return self.getToken(AdvplParser.LOOP, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_exitOrLoopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitOrLoopStatement" ):
                listener.enterExitOrLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitOrLoopStatement" ):
                listener.exitExitOrLoopStatement(self)




    def exitOrLoopStatement(self):

        localctx = AdvplParser.ExitOrLoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_exitOrLoopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            _la = self._input.LA(1)
            if not(_la==AdvplParser.EXIT or _la==AdvplParser.LOOP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(AdvplParser.WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ENDDO(self):
            return self.getToken(AdvplParser.ENDDO, 0)

        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def block(self):
            return self.getTypedRuleContext(AdvplParser.BlockContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = AdvplParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(AdvplParser.WHILE)
            self.state = 855
            self.expression(0)
            self.state = 856
            self.crlf()
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 857
                self.block()


            self.state = 860
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__16) | (1 << AdvplParser.ENDDO) | (1 << AdvplParser.END))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 861
                self.crlf()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DocaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.CASE)
            else:
                return self.getToken(AdvplParser.CASE, i)

        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.CrlfContext)
            else:
                return self.getTypedRuleContext(AdvplParser.CrlfContext,i)


        def ENDCASE(self):
            return self.getToken(AdvplParser.ENDCASE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def OTHERWISE(self):
            return self.getToken(AdvplParser.OTHERWISE, 0)

        def END(self):
            return self.getToken(AdvplParser.END, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.BlockContext)
            else:
                return self.getTypedRuleContext(AdvplParser.BlockContext,i)


        def getRuleIndex(self):
            return AdvplParser.RULE_docaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocaseStatement" ):
                listener.enterDocaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocaseStatement" ):
                listener.exitDocaseStatement(self)




    def docaseStatement(self):

        localctx = AdvplParser.DocaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_docaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(AdvplParser.CASE)
            self.state = 865
            self.crlf()
            self.state = 872 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 866
                self.match(AdvplParser.CASE)
                self.state = 867
                self.expression(0)
                self.state = 868
                self.crlf()
                self.state = 870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 869
                    self.block()


                self.state = 874 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==AdvplParser.CASE):
                    break

            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==AdvplParser.OTHERWISE:
                self.state = 876
                self.match(AdvplParser.OTHERWISE)
                self.state = 878
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 877
                    self.block()




            self.state = 888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.T__17]:
                self.state = 882
                self.match(AdvplParser.T__17)
                pass
            elif token in [AdvplParser.ENDCASE]:
                self.state = 883
                self.match(AdvplParser.ENDCASE)
                pass
            elif token in [AdvplParser.END]:
                self.state = 884
                self.match(AdvplParser.END)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AdvplParser.CASE:
                    self.state = 885
                    self.match(AdvplParser.CASE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 890
                self.crlf()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ChIdentifierContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ChIdentifierContext,i)


        def arrobaDefine(self):
            return self.getTypedRuleContext(AdvplParser.ArrobaDefineContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AdvplParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(AdvplParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.COMMA)
            else:
                return self.getToken(AdvplParser.COMMA, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_chStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChStatement" ):
                listener.enterChStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChStatement" ):
                listener.exitChStatement(self)




    def chStatement(self):

        localctx = AdvplParser.ChStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_chStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.TO, AdvplParser.END, AdvplParser.SELF, AdvplParser.DEFAULT, AdvplParser.CLASS, AdvplParser.DATA, AdvplParser.FROM, AdvplParser.OPTIONAL, AdvplParser.IDENTIFIER]:
                self.state = 893
                self.chIdentifier()
                pass
            elif token in [AdvplParser.ARROBA]:
                self.state = 894
                self.arrobaDefine()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 906 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 897
                    self.chIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 898
                    self.expression(0)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==AdvplParser.COMMA:
                        self.state = 899
                        self.match(AdvplParser.COMMA)
                        self.state = 900
                        self.expression(0)
                        self.state = 905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 908 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AdvplParser.T__6) | (1 << AdvplParser.T__9) | (1 << AdvplParser.T__14) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS) | (1 << AdvplParser.ARROBA) | (1 << AdvplParser.ECOMERCIAL) | (1 << AdvplParser.TO) | (1 << AdvplParser.TRUE) | (1 << AdvplParser.FALSE) | (1 << AdvplParser.NIL) | (1 << AdvplParser.NEXT) | (1 << AdvplParser.IF) | (1 << AdvplParser.END))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (AdvplParser.SELF - 74)) | (1 << (AdvplParser.PROJECT - 74)) | (1 << (AdvplParser.DEFAULT - 74)) | (1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.CLASS - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.FROM - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.OPTIONAL - 74)) | (1 << (AdvplParser.LPAREN - 74)) | (1 << (AdvplParser.NUMBER - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)) | (1 << (AdvplParser.STRING - 74)) | (1 << (AdvplParser.STRINGSIMPLE - 74)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrobaDefineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROBA(self):
            return self.getToken(AdvplParser.ARROBA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return AdvplParser.RULE_arrobaDefine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrobaDefine" ):
                listener.enterArrobaDefine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrobaDefine" ):
                listener.exitArrobaDefine(self)




    def arrobaDefine(self):

        localctx = AdvplParser.ArrobaDefineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_arrobaDefine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(AdvplParser.ARROBA)
            self.state = 911
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AdvplParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(AdvplParser.ExpressionContext,0)


        def ATTRIB_OPERATOR(self):
            return self.getToken(AdvplParser.ATTRIB_OPERATOR, 0)

        def EQUALS(self):
            return self.getToken(AdvplParser.EQUALS, 0)

        def getRuleIndex(self):
            return AdvplParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = AdvplParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_forInit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.identifier()
            self.state = 914
            _la = self._input.LA(1)
            if not(_la==AdvplParser.EQUALS or _la==AdvplParser.ATTRIB_OPERATOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 915
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrlfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CRLF(self, i:int=None):
            if i is None:
                return self.getTokens(AdvplParser.CRLF)
            else:
                return self.getToken(AdvplParser.CRLF, i)

        def getRuleIndex(self):
            return AdvplParser.RULE_crlf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrlf" ):
                listener.enterCrlf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrlf" ):
                listener.exitCrlf(self)




    def crlf(self):

        localctx = AdvplParser.CrlfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_crlf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AdvplParser.CRLF]:
                self.state = 918 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 917
                        self.match(AdvplParser.CRLF)

                    else:
                        raise NoViableAltException(self)
                    self.state = 920 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                pass
            elif token in [AdvplParser.T__18]:
                self.state = 922
                self.match(AdvplParser.T__18)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[45] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         




